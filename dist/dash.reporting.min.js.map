{"version":3,"sources":["node_modules/browser-pack/_prelude.js","/home/axel/streamroot/dev/players/dash.js/src/core/FactoryMaker.js","/home/axel/streamroot/dev/players/dash.js/src/core/events/CoreEvents.js","/home/axel/streamroot/dev/players/dash.js/src/core/events/Events.js","/home/axel/streamroot/dev/players/dash.js/src/core/events/EventsBase.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/MediaPlayerEvents.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/constants/Constants.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/constants/MetricsConstants.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/MetricsReporting.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/MetricsReportingEvents.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/controllers/MetricsCollectionController.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/controllers/MetricsController.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/controllers/MetricsHandlersController.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/controllers/RangeController.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/controllers/ReportingController.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/metrics/MetricsHandlerFactory.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/metrics/handlers/BufferLevelHandler.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/metrics/handlers/GenericMetricHandler.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/metrics/handlers/HttpListHandler.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/reporting/ReportingFactory.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/reporting/reporters/DVBReporting.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/utils/DVBErrorsTranslator.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/utils/HandlerHelpers.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/utils/ManifestParsing.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/utils/MetricSerialiser.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/utils/RNG.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/vo/DVBErrors.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/vo/Metrics.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/vo/Range.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/metrics/vo/Reporting.js","/home/axel/streamroot/dev/players/dash.js/src/streaming/utils/CustomTimeRanges.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","MetricsReporting","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","FactoryMaker","extend","name","childInstance","override","context","extensionContext","getExtensionContext","instance","getSingletonInstance","className","singletonContexts","obj","setSingletonInstance","push","registerFactory","factory","factoriesArray","getFactoryByName","updateFactory","updateClassFactory","classFactories","getClassFactoryByName","getClassFactory","classConstructor","__dashjs_factory_name","undefined","create","merge","apply","arguments","updateSingletonFactory","singletonFactories","getSingletonFactoryByName","getSingletonFactory","getInstance","args","getClassName","extensionObject","extension","parent","prop","hasOwnProperty","extensions","forEach","CoreEvents","_EventsBase","_get","Object","getPrototypeOf","prototype","BUFFERING_COMPLETED","BUFFER_CLEARED","BUFFER_LEVEL_UPDATED","BYTES_APPENDED","CHECK_FOR_EXISTENCE_COMPLETED","CURRENT_TRACK_CHANGED","DATA_UPDATE_COMPLETED","DATA_UPDATE_STARTED","INITIALIZATION_LOADED","INIT_FRAGMENT_LOADED","INIT_REQUESTED","INTERNAL_MANIFEST_LOADED","LIVE_EDGE_SEARCH_COMPLETED","LOADING_COMPLETED","LOADING_PROGRESS","MANIFEST_UPDATED","MEDIA_FRAGMENT_LOADED","QUOTA_EXCEEDED","REPRESENTATION_UPDATED","SEGMENTS_LOADED","SERVICE_LOCATION_BLACKLIST_ADD","SERVICE_LOCATION_BLACKLIST_CHANGED","SOURCEBUFFER_APPEND_COMPLETED","SOURCEBUFFER_REMOVE_COMPLETED","STREAMS_COMPOSED","STREAM_BUFFERING_COMPLETED","STREAM_COMPLETED","TIMED_TEXT_REQUESTED","TIME_SYNCHRONIZATION_COMPLETED","URL_RESOLUTION_FAILED","VIDEO_CHUNK_RECEIVED","WALLCLOCK_TIME_UPDATED","XLINK_ELEMENT_LOADED","XLINK_READY","Events","_CoreEvents","events","EventsBase","config","publicOnly","evt","indexOf","MediaPlayerEvents","AST_IN_FUTURE","BUFFER_EMPTY","BUFFER_LOADED","BUFFER_LEVEL_STATE_CHANGED","ERROR","FRAGMENT_LOADING_COMPLETED","FRAGMENT_LOADING_STARTED","FRAGMENT_LOADING_ABANDONED","LOG","MANIFEST_LOADED","METRICS_CHANGED","METRIC_CHANGED","METRIC_ADDED","METRIC_UPDATED","PERIOD_SWITCH_COMPLETED","PERIOD_SWITCH_STARTED","QUALITY_CHANGE_REQUESTED","QUALITY_CHANGE_RENDERED","STREAM_INITIALIZED","STREAM_TEARDOWN_COMPLETE","TEXT_TRACKS_ADDED","TEXT_TRACK_ADDED","CAN_PLAY","PLAYBACK_ENDED","PLAYBACK_ERROR","PLAYBACK_NOT_ALLOWED","PLAYBACK_METADATA_LOADED","PLAYBACK_PAUSED","PLAYBACK_PLAYING","PLAYBACK_PROGRESS","PLAYBACK_RATE_CHANGED","PLAYBACK_SEEKED","PLAYBACK_SEEKING","PLAYBACK_SEEK_ASKED","PLAYBACK_STARTED","PLAYBACK_TIME_UPDATED","mediaPlayerEvents","Constants","init","STREAM","VIDEO","AUDIO","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","MUXED","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","STPP","TTML","VTT","WVTT","UTF8","SUGGESTED_PRESENTATION_DELAY","SCHEME_ID_URI","START_TIME","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_THROUGHPUT","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","constants","MetricsConstants","TCP_CONNECTION","HTTP_REQUEST","TRACK_SWITCH","BUFFER_LEVEL","BUFFER_STATE","DVR_INFO","DROPPED_FRAMES","SCHEDULING_INFO","REQUESTS_QUEUE","MANIFEST_UPDATE","MANIFEST_UPDATE_STREAM_INFO","MANIFEST_UPDATE_TRACK_INFO","PLAY_LIST","DVB_ERRORS","createMetricsReporting","dvbErrorsTranslator","_utilsDVBErrorsTranslator2","eventBus","metricsModel","_controllersMetricsCollectionController2","getReportingFactory","_reportingReportingFactory2","getMetricsHandlerFactory","_metricsMetricsHandlerFactory2","_coreFactoryMaker2","_MetricsReportingEvents2","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","BECAME_REPORTING_PLAYER","metricsReportingEvents","MetricsCollectionController","update","error","controllersToRemove","keys","metricsControllers","_utilsManifestParsing2","dashManifestModel","getMetrics","manifest","m","key","JSON","stringify","splice","controller","_MetricsController2","initialize","c","reset","trigger","resetMetricsControllers","setup","on","_coreEventsEvents2","off","MetricsController","metricsEntry","rangeController","_RangeController2","mediaElement","Range","reportingController","_ReportingController2","log","Reporting","metricsHandlersController","_MetricsHandlersController2","metrics","MetricsHandlersController","handle","handlers","handler","handleNewMetric","metric","value","mediaType","split","midx","ms","nextm","metricsHandlerFactory","_MediaPlayerEvents2","RangeController","rs","start","starttime","end","duration","ranges","add","useWallClockTime","_useWallClockTime","clear","_utilsCustomTimeRanges2","isEnabled","numRanges","time","Date","getTime","currentTime","ReportingController","reporting","some","reporter","reportingFactory","reporters","report","type","vos","MetricsHandlerFactory","listType","matches","match","keyRegex","knownFactoryProducts","message","register","unregister","BufferLevel","_handlersBufferLevelHandler2","DVBErrors","_handlersDVBErrorsHandler2","HttpList","_handlersHttpListHandler2","PlayList","_handlersGenericMetricHandler2","RepSwitchList","TcpList","BufferLevelHandler","getLowestBufferLevelVO","storedVOs","map","reduce","b","level","intervalCallback","vo","lastReportedTime","basename","rc","n_ms","handlerHelpers","validateN","reconstructFullMetricName","interval","setInterval","clearInterval","_constantsMetricsConstants2","_utilsHandlerHelpers2","DVBErrorsHandler","onInitialisationComplete","unused","GenericMetricHandler","metricName","HttpListHandler","storedVos","requestType","ReportingFactory","entry","knownReportingSchemeIdUris","schemeIdUri","moduleName","urn:dvb:dash:reporting:2014","_reportersDVBReporting2","DVBReporting","doGetRequest","url","successCB","failureCB","req","XMLHttpRequest","oncomplete","reqIndex","pendingRequests","status","open","onloadend","onerror","send","Array","isArray","isReportingPlayer","metricSerialiser","serialise","USE_DRAFT_DVB_SPEC","reportingUrl","probability","reportingPlayerStatusDecided","randomNumberGenerator","random","allowPendingRequestsToCompleteOnReset","abort","_utilsMetricSerialiser2","_utilsRNG2","DVBErrorsTranslator","_voDVBErrors2","mpd","mpdurl","originalUrl","terror","metricModel","addDVBErrors","onManifestUpdate","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","onBecameReporter","BECAME_REPORTER","handleHttpMetric","responsecode","CONNECTION_ERROR","tresponse","_serviceLocation","onMetricEvent","onPlaybackError","reason","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","HandlerHelpers","mn","isNaN","ManifestParsing","getMetricsRangeStartTime","dynamic","range","voPeriods","reportingStartTime","getMpd","presentationStartTime","availabilityStartTime","getRegularPeriods","_streamingConstantsConstants2","Metrics_asArray","metricEntry","_voMetrics2","isDynamic","getIsDynamic","Range_asArray","rangeEntry","_voRange2","getDuration","Reporting_asArray","reportingEntry","_voReporting2","MetricSerialiser","pairs","v","isBuiltIn","toString","slice","encodeURIComponent","join","toISOString","Math","round","RNG","crypto","randomNumbers","ArrayType","NUM_RANDOM_NUMBERS","getRandomValues","index","rand","min","max","MAX_VALUE","msCrypto","Uint32Array","pow","BYTES_PER_ELEMENT","ipaddress","SSL_CONNECTION_FAILED_PREFIX","DNS_RESOLUTION_FAILED","HOST_UNREACHABLE","CONNECTION_REFUSED","CORRUPT_MEDIA_ISOBMFF","Metrics","Infinity","CustomTimeRanges","customTimeRangeArray","mergeRanges","remove","rangeIndex1","rangeIndex2","range1","range2","checkIndex","NaN"],"mappings":"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","file":"dash.reporting.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n */\nlet FactoryMaker = (function () {\n\n    let instance;\n    let extensions = [];\n    let singletonContexts = [];\n    let singletonFactories = [];\n    let classFactories = [];\n\n    function extend(name, childInstance, override, context) {\n        let extensionContext = getExtensionContext(context);\n        if (!extensionContext[name] && childInstance) {\n            extensionContext[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function registerFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n        factoriesArray.push({\n            name: name,\n            factory: factory\n        });\n    }\n\n    function getFactoryByName(name, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                return factoriesArray[i].factory;\n            }\n        }\n        return null;\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                            context: context\n                        }, arguments), context, arguments);\n                    }\n                };\n            };\n\n            registerFactory(classConstructor.__dashjs_factory_name, factory, classFactories); // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                                context: context\n                            }, arguments), context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            registerFactory(classConstructor.__dashjs_factory_name, factory, singletonFactories); // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(name, classConstructor, context, args) {\n        // Add getClassName function to class instance prototype (used by Debug)\n        classConstructor.getClassName = function () {return name;};\n\n        let extensionContext = getExtensionContext(context);\n        let extensionObject = extensionContext[name];\n        if (extensionObject) {\n            let extension = extensionObject.instance;\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n                extension = extension.apply({\n                    context: context,\n                    factory: instance,\n                    parent: classConstructor\n                }, args);\n                for (const prop in extension) {\n                    if (classConstructor.hasOwnProperty(prop)) {\n                        classConstructor[prop] = extension[prop];\n                    }\n                }\n            } else { //replace parent object completely with new object. Same as dijon.\n                return extension.apply({\n                    context: context,\n                    factory: instance\n                }, args);\n            }\n        }\n        return classConstructor;\n    }\n\n    function getExtensionContext(context) {\n        let extensionContext;\n        extensions.forEach(function (obj) {\n            if (obj === context) {\n                extensionContext = obj;\n            }\n        });\n        if (!extensionContext) {\n            extensionContext = extensions.push(context);\n        }\n        return extensionContext;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from './EventsBase';\n\n/**\n * These are internal events that should not be needed at the player level.\n * If you find and event in here that you would like access to from MediaPlayer level\n * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new\n * @class\n * @ignore\n */\nclass CoreEvents extends EventsBase {\n    constructor () {\n        super();\n        this.BUFFERING_COMPLETED = 'bufferingCompleted';\n        this.BUFFER_CLEARED = 'bufferCleared';\n        this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\n        this.BYTES_APPENDED = 'bytesAppended';\n        this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\n        this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';\n        this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\n        this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\n        this.INITIALIZATION_LOADED = 'initializationLoaded';\n        this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\n        this.INIT_REQUESTED = 'initRequested';\n        this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\n        this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\n        this.LOADING_COMPLETED = 'loadingCompleted';\n        this.LOADING_PROGRESS = 'loadingProgress';\n        this.MANIFEST_UPDATED = 'manifestUpdated';\n        this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\n        this.QUOTA_EXCEEDED = 'quotaExceeded';\n        this.REPRESENTATION_UPDATED = 'representationUpdated';\n        this.SEGMENTS_LOADED = 'segmentsLoaded';\n        this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';\n        this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\n        this.SOURCEBUFFER_APPEND_COMPLETED = 'sourceBufferAppendCompleted';\n        this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\n        this.STREAMS_COMPOSED = 'streamsComposed';\n        this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\n        this.STREAM_COMPLETED = 'streamCompleted';\n        this.TIMED_TEXT_REQUESTED = 'timedTextRequested';\n        this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\n        this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\n        this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';\n        this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\n        this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\n        this.XLINK_READY = 'xlinkReady';\n    }\n}\n\nexport default CoreEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nimport CoreEvents from './CoreEvents';\nclass Events extends CoreEvents {\n}\nlet events = new Events();\nexport default events;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass MediaPlayerEvents extends EventsBase {\n\n    /**\n     * @description Public facing external events to be used when developing a player that implements dash.js.\n     */\n    constructor() {\n        super();\n        /**\n         * Triggered when playback will not start yet\n         * as the MPD's availabilityStartTime is in the future.\n         * Check delay property in payload to determine time before playback will start.\n         */\n        this.AST_IN_FUTURE = 'astInFuture';\n        /**\n         * Triggered when the video element's buffer state changes to stalled.\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\n         * @event MediaPlayerEvents#BUFFER_EMPTY\n         */\n        this.BUFFER_EMPTY = 'bufferStalled';\n        /**\n         * Triggered when the video element's buffer state changes to loaded.\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\n         * @event MediaPlayerEvents#BUFFER_LOADED\n         */\n        this.BUFFER_LOADED = 'bufferLoaded';\n\n        /**\n         * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.\n         * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED\n         */\n        this.BUFFER_LEVEL_STATE_CHANGED = 'bufferStateChanged';\n\n        /**\n         * Triggered when there is an error from the element or MSE source buffer.\n         * @event MediaPlayerEvents#ERROR\n         */\n        this.ERROR = 'error';\n\n        /**\n         * Triggered when a fragment download has completed.\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED\n         */\n        this.FRAGMENT_LOADING_COMPLETED = 'fragmentLoadingCompleted';\n        /**\n         * Triggered when a fragment download has started.\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED\n         */\n        this.FRAGMENT_LOADING_STARTED = 'fragmentLoadingStarted';\n        /**\n         * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED\n         */\n        this.FRAGMENT_LOADING_ABANDONED = 'fragmentLoadingAbandoned';\n        /**\n         * Triggered when {@link module:Debug} log method is called.\n         * @event MediaPlayerEvents#LOG\n         */\n        this.LOG = 'log';\n        //TODO refactor with internal event\n        /**\n         * Triggered when the manifest load is complete\n         * @event MediaPlayerEvents#MANIFEST_LOADED\n         */\n        this.MANIFEST_LOADED = 'manifestLoaded';\n        /**\n         * Triggered anytime there is a change to the overall metrics.\n         * @event MediaPlayerEvents#METRICS_CHANGED\n         */\n        this.METRICS_CHANGED = 'metricsChanged';\n        /**\n         * Triggered when an individual metric is added, updated or cleared.\n         * @event MediaPlayerEvents#METRIC_CHANGED\n         */\n        this.METRIC_CHANGED = 'metricChanged';\n        /**\n         * Triggered every time a new metric is added.\n         * @event MediaPlayerEvents#METRIC_ADDED\n         */\n        this.METRIC_ADDED = 'metricAdded';\n        /**\n         * Triggered every time a metric is updated.\n         * @event MediaPlayerEvents#METRIC_UPDATED\n         */\n        this.METRIC_UPDATED = 'metricUpdated';\n        /**\n         * Triggered at the stream end of a period.\n         * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED\n         */\n        this.PERIOD_SWITCH_COMPLETED = 'periodSwitchCompleted';\n        /**\n         * Triggered when a new period starts.\n         * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED\n         */\n        this.PERIOD_SWITCH_STARTED = 'periodSwitchStarted';\n\n        /**\n         * Triggered when an ABR up /down switch is initialed; either by user in manual mode or auto mode via ABR rules.\n         * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED\n         */\n        this.QUALITY_CHANGE_REQUESTED = 'qualityChangeRequested';\n\n        /**\n         * Triggered when the new ABR quality is being rendered on-screen.\n         * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED\n         */\n        this.QUALITY_CHANGE_RENDERED = 'qualityChangeRendered';\n\n        /**\n         * Triggered when the stream is setup and ready.\n         * @event MediaPlayerEvents#STREAM_INITIALIZED\n         */\n        this.STREAM_INITIALIZED = 'streamInitialized';\n\n        /**\n         * Triggered when the player has been reset.\n         * @event MediaPlayerEvents#STREAM_TEARDOWN_COMPLETE\n         */\n        this.STREAM_TEARDOWN_COMPLETE = 'streamTeardownComplete';\n\n        /**\n         * Triggered once all text tracks detected in the MPD are added to the video element.\n         * @event MediaPlayerEvents#TEXT_TRACKS_ADDED\n         */\n        this.TEXT_TRACKS_ADDED = 'allTextTracksAdded';\n        /**\n         * Triggered when a text track is added to the video element's TextTrackList\n         * @event MediaPlayerEvents#TEXT_TRACK_ADDED\n         */\n        this.TEXT_TRACK_ADDED = 'textTrackAdded';\n\n        /**\n         * Sent when enough data is available that the media can be played,\n         * at least for a couple of frames.  This corresponds to the\n         * HAVE_ENOUGH_DATA readyState.\n         * @event MediaPlayerEvents#CAN_PLAY\n         */\n        this.CAN_PLAY = 'canPlay';\n\n        /**\n         * Sent when playback completes.\n         * @event MediaPlayerEvents#PLAYBACK_ENDED\n         */\n        this.PLAYBACK_ENDED = 'playbackEnded';\n\n        /**\n         * Sent when an error occurs.  The element's error\n         * attribute contains more information.\n         * @event MediaPlayerEvents#PLAYBACK_ERROR\n         */\n        this.PLAYBACK_ERROR = 'playbackError';\n        /**\n         * Sent when playback is not allowed (for example if user gesture is needed).\n         * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED\n         */\n        this.PLAYBACK_NOT_ALLOWED = 'playbackNotAllowed';\n        /**\n         * The media's metadata has finished loading; all attributes now\n         * contain as much useful information as they're going to.\n         * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED\n         */\n        this.PLAYBACK_METADATA_LOADED = 'playbackMetaDataLoaded';\n        /**\n         * Sent when playback is paused.\n         * @event MediaPlayerEvents#PLAYBACK_PAUSED\n         */\n        this.PLAYBACK_PAUSED = 'playbackPaused';\n        /**\n         * Sent when the media begins to play (either for the first time, after having been paused,\n         * or after ending and then restarting).\n         *\n         * @event MediaPlayerEvents#PLAYBACK_PLAYING\n         */\n        this.PLAYBACK_PLAYING = 'playbackPlaying';\n        /**\n         * Sent periodically to inform interested parties of progress downloading\n         * the media. Information about the current amount of the media that has\n         * been downloaded is available in the media element's buffered attribute.\n         * @event MediaPlayerEvents#PLAYBACK_PROGRESS\n         */\n        this.PLAYBACK_PROGRESS = 'playbackProgress';\n        /**\n         * Sent when the playback speed changes.\n         * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED\n         */\n        this.PLAYBACK_RATE_CHANGED = 'playbackRateChanged';\n        /**\n         * Sent when a seek operation completes.\n         * @event MediaPlayerEvents#PLAYBACK_SEEKED\n         */\n        this.PLAYBACK_SEEKED = 'playbackSeeked';\n        /**\n         * Sent when a seek operation begins.\n         * @event MediaPlayerEvents#PLAYBACK_SEEKING\n         */\n        this.PLAYBACK_SEEKING = 'playbackSeeking';\n\n        /**\n         * Sent when a seek operation has been asked.\n         * @event MediaPlayerEvents#PLAYBACK_SEEK_ASKED\n         */\n        this.PLAYBACK_SEEK_ASKED = 'playbackSeekAsked';\n\n        /**\n         * Sent when playback of the media starts after having been paused;\n         * that is, when playback is resumed after a prior pause event.\n         *\n         * @event MediaPlayerEvents#PLAYBACK_STARTED\n         */\n        this.PLAYBACK_STARTED = 'playbackStarted';\n        /**\n         * The time indicated by the element's currentTime attribute has changed.\n         * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED\n         */\n        this.PLAYBACK_TIME_UPDATED = 'playbackTimeUpdated';\n    }\n}\n\nlet mediaPlayerEvents = new MediaPlayerEvents();\nexport default mediaPlayerEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Constants declaration\n * @class\n * @ignore\n */\nclass Constants {\n\n    init () {\n        this.STREAM = 'stream';\n        this.VIDEO = 'video';\n        this.AUDIO = 'audio';\n        this.TEXT = 'text';\n        this.FRAGMENTED_TEXT = 'fragmentedText';\n        this.EMBEDDED_TEXT = 'embeddedText';\n        this.MUXED = 'muxed';\n        this.LOCATION = 'Location';\n        this.INITIALIZE = 'initialize';\n        this.TEXT_SHOWING = 'showing';\n        this.TEXT_HIDDEN = 'hidden';\n        this.CC1 = 'CC1';\n        this.CC3 = 'CC3';\n        this.STPP = 'stpp';\n        this.TTML = 'ttml';\n        this.VTT = 'vtt';\n        this.WVTT = 'wvtt';\n        this.UTF8 = 'utf-8';\n        this.SUGGESTED_PRESENTATION_DELAY = 'suggestedPresentationDelay';\n        this.SCHEME_ID_URI = 'schemeIdUri';\n        this.START_TIME = 'starttime';\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\n        this.ABR_STRATEGY_BOLA = 'abrBola';\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\n        this.MOVING_AVERAGE_EWMA = 'ewma';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new Constants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Metrics Constants declaration\n * @class\n * @ignore\n */\nclass MetricsConstants {\n\n    init () {\n        this.TCP_CONNECTION = 'TcpList';\n        this.HTTP_REQUEST = 'HttpList';\n        this.TRACK_SWITCH = 'RepSwitchList';\n        this.BUFFER_LEVEL = 'BufferLevel';\n        this.BUFFER_STATE = 'BufferState';\n        this.DVR_INFO = 'DVRInfo';\n        this.DROPPED_FRAMES = 'DroppedFrames';\n        this.SCHEDULING_INFO = 'SchedulingInfo';\n        this.REQUESTS_QUEUE = 'RequestsQueue';\n        this.MANIFEST_UPDATE = 'ManifestUpdate';\n        this.MANIFEST_UPDATE_STREAM_INFO = 'ManifestUpdatePeriodInfo';\n        this.MANIFEST_UPDATE_TRACK_INFO = 'ManifestUpdateRepresentationInfo';\n        this.PLAY_LIST = 'PlayList';\n        this.DVB_ERRORS = 'DVBErrors';\n    }\n\n    constructor() {\n        this.init();\n    }\n}\n\nlet constants = new MetricsConstants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\nimport MetricsReportingEvents from './MetricsReportingEvents';\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\nimport ReportingFactory from './reporting/ReportingFactory';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction MetricsReporting() {\n\n    let context = this.context;\n    let instance;\n\n    let dvbErrorsTranslator;\n\n    /**\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\n     * @param {Object} config - dependancies from owner\n     * @return {MetricsCollectionController} Metrics Collection Controller\n     */\n    function createMetricsReporting(config) {\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\n            eventBus: config.eventBus,\n            metricsModel: config.metricsModel\n        });\n\n        return MetricsCollectionController(context).create(config);\n    }\n\n    /**\n     * Get the ReportingFactory to allow new reporters to be registered\n     * @return {ReportingFactory} Reporting Factory\n     */\n    function getReportingFactory() {\n        return ReportingFactory(context).getInstance();\n    }\n\n    /**\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\n     */\n    function getMetricsHandlerFactory() {\n        return MetricsHandlerFactory(context).getInstance();\n    }\n\n    instance = {\n        createMetricsReporting:     createMetricsReporting,\n        getReportingFactory:        getReportingFactory,\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\n    };\n\n    return instance;\n}\n\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\nlet factory = FactoryMaker.getClassFactory(MetricsReporting);\nfactory.events = MetricsReportingEvents;\nFactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory);\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n\nclass MetricsReportingEvents extends EventsBase {\n    constructor () {\n        super();\n\n        this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';\n        this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';\n    }\n}\n\nlet metricsReportingEvents = new MetricsReportingEvents();\nexport default metricsReportingEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsController from './MetricsController';\nimport ManifestParsing from '../utils/ManifestParsing';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\nimport Events from '../../../core/events/Events';\n\nfunction MetricsCollectionController(config) {\n\n    let metricsControllers = {};\n\n    let context = this.context;\n    let eventBus = config.eventBus;\n\n    function update(e) {\n        if (e.error) {\n            return;\n        }\n\n        // start by assuming all existing controllers need removing\n        let controllersToRemove = Object.keys(metricsControllers);\n\n        const metrics = ManifestParsing(context).getInstance({\n            dashManifestModel: config.dashManifestModel\n        }).getMetrics(e.manifest);\n\n        metrics.forEach(m => {\n            const key = JSON.stringify(m);\n\n            if (!metricsControllers.hasOwnProperty(key)) {\n                try {\n                    let controller = MetricsController(context).create(config);\n                    controller.initialize(m);\n                    metricsControllers[key] = controller;\n                } catch (e) {\n                    // fail quietly\n                }\n            } else {\n                // we still need this controller - delete from removal list\n                controllersToRemove.splice(key, 1);\n            }\n        });\n\n        // now remove the unwanted controllers\n        controllersToRemove.forEach(c => {\n            metricsControllers[c].reset();\n            delete metricsControllers[c];\n        });\n\n        eventBus.trigger(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE\n        );\n    }\n\n    function resetMetricsControllers() {\n        Object.keys(metricsControllers).forEach(key => {\n            metricsControllers[key].reset();\n        });\n\n        metricsControllers = {};\n    }\n\n    function setup() {\n        eventBus.on(Events.MANIFEST_UPDATED, update);\n        eventBus.on(Events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    function reset() {\n        eventBus.off(Events.MANIFEST_UPDATED, update);\n        eventBus.off(Events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    setup();\n\n    return {\n        reset: reset\n    };\n}\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexport default FactoryMaker.getClassFactory(MetricsCollectionController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport RangeController from './RangeController';\nimport ReportingController from './ReportingController';\nimport MetricsHandlersController from './MetricsHandlersController';\n\nfunction MetricsController(config) {\n\n    let metricsHandlersController,\n        reportingController,\n        rangeController,\n        instance;\n\n    let context = this.context;\n\n    function initialize(metricsEntry) {\n        try {\n            rangeController = RangeController(context).create({\n                mediaElement: config.mediaElement\n            });\n\n            rangeController.initialize(metricsEntry.Range);\n\n            reportingController = ReportingController(context).create({\n                log: config.log\n            });\n\n            reportingController.initialize(metricsEntry.Reporting, rangeController);\n\n            metricsHandlersController = MetricsHandlersController(context).create({\n                log: config.log,\n                eventBus: config.eventBus\n            });\n\n            metricsHandlersController.initialize(metricsEntry.metrics, reportingController);\n        } catch (e) {\n            reset();\n            throw e;\n        }\n    }\n\n    function reset() {\n        if (metricsHandlersController) {\n            metricsHandlersController.reset();\n        }\n\n        if (reportingController) {\n            reportingController.reset();\n        }\n\n        if (rangeController) {\n            rangeController.reset();\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsController.__dashjs_factory_name = 'MetricsController';\nexport default FactoryMaker.getClassFactory(MetricsController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport MediaPlayerEvents from '../../MediaPlayerEvents';\n\nfunction MetricsHandlersController(config) {\n    let handlers = [];\n\n    let instance;\n    let context = this.context;\n    let eventBus = config.eventBus;\n\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\n        log: config.log,\n        eventBus: config.eventBus\n    });\n\n    function handle(e) {\n        handlers.forEach(handler => {\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\n        });\n    }\n\n    function initialize(metrics, reportingController) {\n        metrics.split(',').forEach(\n            (m, midx, ms) => {\n                let handler;\n\n                // there is a bug in ISO23009-1 where the metrics attribute\n                // is a comma-separated list but HttpList key can contain a\n                // comma enclosed by ().\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\n                    let nextm = ms[midx + 1];\n\n                    if (nextm &&\n                            (nextm.indexOf('(') === -1) &&\n                            (nextm.indexOf(')') !== -1)) {\n                        m += ',' + nextm;\n\n                        // delete the next metric so forEach does not visit.\n                        delete ms[midx + 1];\n                    }\n                }\n\n                handler = metricsHandlerFactory.create(\n                    m,\n                    reportingController\n                );\n\n                if (handler) {\n                    handlers.push(handler);\n                }\n            }\n        );\n\n        eventBus.on(\n            MediaPlayerEvents.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.on(\n            MediaPlayerEvents.METRIC_UPDATED,\n            handle,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(\n            MediaPlayerEvents.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.off(\n            MediaPlayerEvents.METRIC_UPDATED,\n            handle,\n            instance\n        );\n\n        handlers.forEach(handler => handler.reset());\n\n        handlers = [];\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\nexport default FactoryMaker.getClassFactory(MetricsHandlersController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\n\nfunction RangeController(config) {\n\n    let useWallClockTime = false;\n    let context = this.context;\n    let instance,\n        ranges;\n\n    let mediaElement = config.mediaElement;\n\n    function initialize(rs) {\n        if (rs && rs.length) {\n            rs.forEach(r => {\n                let start = r.starttime;\n                let end = start + r.duration;\n\n                ranges.add(start, end);\n            });\n\n            useWallClockTime = !!rs[0]._useWallClockTime;\n        }\n    }\n\n    function reset() {\n        ranges.clear();\n    }\n\n    function setup() {\n        ranges = CustomTimeRanges(context).create();\n    }\n\n    function isEnabled() {\n        let numRanges = ranges.length;\n        let time;\n\n        if (!numRanges) {\n            return true;\n        }\n\n        // When not present, DASH Metrics reporting is requested\n        // for the whole duration of the content.\n        time = useWallClockTime ?\n                (new Date().getTime() / 1000) :\n                mediaElement.currentTime;\n\n        for (let i = 0; i < numRanges; i += 1) {\n            let start = ranges.start(i);\n            let end = ranges.end(i);\n\n            if ((start <= time) && (time < end)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        isEnabled:  isEnabled\n    };\n\n    setup();\n\n    return instance;\n}\n\nRangeController.__dashjs_factory_name = 'RangeController';\nexport default FactoryMaker.getClassFactory(RangeController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport ReportingFactory from '../reporting/ReportingFactory';\n\nfunction ReportingController(config) {\n\n    let reporters = [];\n    let instance;\n\n    let reportingFactory = ReportingFactory(this.context).getInstance({\n        log: config.log\n    });\n\n    function initialize(reporting, rangeController) {\n        // \"if multiple Reporting elements are present, it is expected that\n        // the client processes one of the recognized reporting schemes.\"\n        // to ignore this, and support multiple Reporting per Metric,\n        // simply change the 'some' below to 'forEach'\n        reporting.some(r => {\n            let reporter = reportingFactory.create(r, rangeController);\n\n            if (reporter) {\n                reporters.push(reporter);\n                return true;\n            }\n        });\n    }\n\n    function reset() {\n        reporters.forEach(r => r.reset());\n        reporters = [];\n    }\n\n    function report(type, vos) {\n        reporters.forEach(r => r.report(type, vos));\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        report:     report\n    };\n\n    return instance;\n}\n\nReportingController.__dashjs_factory_name = 'ReportingController';\nexport default FactoryMaker.getClassFactory(ReportingController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport BufferLevel from './handlers/BufferLevelHandler';\nimport DVBErrors from './handlers/DVBErrorsHandler';\nimport HttpList from './handlers/HttpListHandler';\nimport GenericMetricHandler from './handlers/GenericMetricHandler';\n\nfunction MetricsHandlerFactory(config) {\n\n    let instance;\n    let log = config.log;\n\n    // group 1: key, [group 3: n [, group 5: type]]\n    let keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\n\n    let context = this.context;\n    let knownFactoryProducts = {\n        BufferLevel:    BufferLevel,\n        DVBErrors:      DVBErrors,\n        HttpList:       HttpList,\n        PlayList:       GenericMetricHandler,\n        RepSwitchList:  GenericMetricHandler,\n        TcpList:        GenericMetricHandler\n    };\n\n    function create(listType, reportingController) {\n        var matches = listType.match(keyRegex);\n        var handler;\n\n        if (!matches) {\n            return;\n        }\n\n        try {\n            handler = knownFactoryProducts[matches[1]](context).create({\n                eventBus: config.eventBus\n            });\n\n            handler.initialize(\n                matches[1],\n                reportingController,\n                matches[3],\n                matches[5]\n            );\n        } catch (e) {\n            handler = null;\n\n            log(`MetricsHandlerFactory: Could not create handler for type ${matches[1]} with args ${matches[3]}, ${matches[5]} (${e.message})`);\n        }\n\n        return handler;\n    }\n\n    function register(key, handler) {\n        knownFactoryProducts[key] = handler;\n    }\n\n    function unregister(key) {\n        delete knownFactoryProducts[key];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\nexport default FactoryMaker.getSingletonFactory(MetricsHandlerFactory);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport MetricsConstants from '../../../constants/MetricsConstants';\nimport FactoryMaker from '../../../../core/FactoryMaker';\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction BufferLevelHandler() {\n\n    let instance,\n        reportingController,\n        n,\n        name,\n        interval,\n        lastReportedTime;\n\n    let context = this.context;\n    let handlerHelpers = HandlerHelpers(context).getInstance();\n\n    let storedVOs = [];\n\n    function getLowestBufferLevelVO() {\n        try {\n            return Object.keys(storedVOs).map(\n                key => storedVOs[key]\n            ).reduce(\n                (a, b) => {\n                    return (a.level < b.level) ? a : b;\n                }\n            );\n        } catch (e) {\n            return;\n        }\n    }\n\n    function intervalCallback() {\n        let vo = getLowestBufferLevelVO();\n\n        if (vo) {\n            if (lastReportedTime !== vo.t) {\n                lastReportedTime = vo.t;\n                reportingController.report(name, vo);\n            }\n        }\n    }\n\n    function initialize(basename, rc, n_ms) {\n        if (rc) {\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n            reportingController = rc;\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = 0;\n        reportingController = null;\n        lastReportedTime = null;\n    }\n\n    function handleNewMetric(metric, vo, type) {\n        if (metric === MetricsConstants.BUFFER_LEVEL) {\n            storedVOs[type] = vo;\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexport default FactoryMaker.getClassFactory(BufferLevelHandler);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport MetricsConstants from '../../../constants/MetricsConstants';\nimport FactoryMaker from '../../../../core/FactoryMaker';\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\n\nfunction DVBErrorsHandler(config) {\n\n    let instance,\n        reportingController;\n\n    let eventBus = config.eventBus;\n\n    function onInitialisationComplete() {\n        // we only want to report this once per call to initialize\n        eventBus.off(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n            onInitialisationComplete,\n            this\n        );\n\n        // Note: A Player becoming a reporting Player is itself\n        // something which is recorded by the DVBErrors metric.\n        eventBus.trigger(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER\n        );\n    }\n\n    function initialize(unused, rc) {\n        if (rc) {\n            reportingController = rc;\n\n            eventBus.on(\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n                onInitialisationComplete,\n                this\n            );\n        }\n    }\n\n    function reset() {\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === MetricsConstants.DVB_ERRORS) {\n            if (reportingController) {\n                reportingController.report(metric, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nexport default FactoryMaker.getClassFactory(DVBErrorsHandler);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../../core/FactoryMaker';\n\nfunction GenericMetricHandler() {\n\n    let instance,\n        metricName,\n        reportingController;\n\n    function initialize(name, rc) {\n        metricName = name;\n        reportingController = rc;\n    }\n\n    function reset() {\n        reportingController = null;\n        metricName = undefined;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricName) {\n            if (reportingController) {\n                reportingController.report(metricName, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nGenericMetricHandler.__dashjs_factory_name = 'GenericMetricHandler';\nexport default FactoryMaker.getClassFactory(GenericMetricHandler);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsConstants from '../../../constants/MetricsConstants';\nimport FactoryMaker from '../../../../core/FactoryMaker';\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction HttpListHandler() {\n\n    let instance,\n        reportingController,\n        n,\n        type,\n        name,\n        interval;\n\n    let storedVos = [];\n\n    let handlerHelpers = HandlerHelpers(this.context).getInstance();\n\n    function intervalCallback() {\n        var vos = storedVos;\n\n        if (vos.length) {\n            if (reportingController) {\n                reportingController.report(name, vos);\n            }\n        }\n\n        storedVos = [];\n    }\n\n    function initialize(basename, rc, n_ms, requestType) {\n        if (rc) {\n\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n\n            reportingController = rc;\n\n            if (requestType && requestType.length) {\n                type = requestType;\n            }\n\n            name = handlerHelpers.reconstructFullMetricName(\n                basename,\n                n_ms,\n                requestType\n            );\n\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = null;\n        type = null;\n        storedVos = [];\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        if (metric === MetricsConstants.HTTP_REQUEST) {\n            if (!type || (type === vo.type)) {\n                storedVos.push(vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\nexport default FactoryMaker.getClassFactory(HttpListHandler);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport DVBReporting from './reporters/DVBReporting';\n\nfunction ReportingFactory(config) {\n\n    let knownReportingSchemeIdUris = {\n        'urn:dvb:dash:reporting:2014': DVBReporting\n    };\n\n    let context = this.context;\n    let log = config.log;\n    let instance;\n\n    function create(entry, rangeController) {\n        let reporting;\n\n        try {\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create();\n\n            reporting.initialize(entry, rangeController);\n        } catch (e) {\n            reporting = null;\n\n            log(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\n        }\n\n        return reporting;\n    }\n\n    function register(schemeIdUri, moduleName) {\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\n    }\n\n    function unregister(schemeIdUri) {\n        delete knownReportingSchemeIdUris[schemeIdUri];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\nexport default FactoryMaker.getSingletonFactory(ReportingFactory);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport MetricsConstants from '../../../constants/MetricsConstants';\nimport FactoryMaker from '../../../../core/FactoryMaker';\nimport MetricSerialiser from '../../utils/MetricSerialiser';\nimport RNG from '../../utils/RNG';\n\nfunction DVBReporting() {\n    let instance;\n\n    let context = this.context;\n    let metricSerialiser = MetricSerialiser(context).getInstance();\n    let randomNumberGenerator = RNG(context).getInstance();\n\n    let USE_DRAFT_DVB_SPEC = true;\n    let isReportingPlayer = false;\n    let reportingPlayerStatusDecided = false;\n    let reportingUrl = null;\n    let rangeController = null;\n    let allowPendingRequestsToCompleteOnReset = true;\n    let pendingRequests = [];\n\n    function doGetRequest(url, successCB, failureCB) {\n        let req = new XMLHttpRequest();\n        const oncomplete = function () {\n            let reqIndex = pendingRequests.indexOf(req);\n\n            if (reqIndex === -1) {\n                return;\n            } else {\n                pendingRequests.splice(reqIndex, 1);\n            }\n\n            if ((req.status >= 200) && (req.status < 300)) {\n                if (successCB) {\n                    successCB();\n                }\n            } else {\n                if (failureCB) {\n                    failureCB();\n                }\n            }\n        };\n\n        pendingRequests.push(req);\n\n        try {\n            req.open('GET', url);\n            req.onloadend = oncomplete;\n            req.onerror = oncomplete;\n            req.send();\n        } catch (e) {\n            req.onerror();\n        }\n    }\n\n    function report(type, vos) {\n        if (!Array.isArray(vos)) {\n            vos = [vos];\n        }\n\n        // If the Player is not a reporting Player, then the Player shall\n        // not report any errors.\n        // ... In addition to any time restrictions specified by a Range\n        // element within the Metrics element.\n        if (isReportingPlayer && rangeController.isEnabled()) {\n\n            // This reporting mechanism operates by creating one HTTP GET\n            // request for every entry in the top level list of the metric.\n            vos.forEach(function (vo) {\n                let url = metricSerialiser.serialise(vo);\n\n                // this has been proposed for errata\n                if (USE_DRAFT_DVB_SPEC && (type !== MetricsConstants.DVB_ERRORS)) {\n                    url = `metricname=${type}&${url}`;\n                }\n\n                // Take the value of the @reportingUrl attribute, append a\n                // question mark ('?') character and then append the string\n                // created in the previous step.\n                url = `${reportingUrl}?${url}`;\n\n                // Make an HTTP GET request to the URL contained within the\n                // string created in the previous step.\n                doGetRequest(url, null, function () {\n                    // If the Player is unable to make the report, for\n                    // example because the @reportingUrl is invalid, the\n                    // host cannot be reached, or an HTTP status code other\n                    // than one in the 200 series is received, the Player\n                    // shall cease being a reporting Player for the\n                    // duration of the MPD.\n                    isReportingPlayer = false;\n                });\n            });\n        }\n    }\n\n    function initialize(entry, rc) {\n        let probability;\n\n        rangeController = rc;\n\n        reportingUrl = entry['dvb:reportingUrl'];\n\n        // If a required attribute is missing, the Reporting descriptor may\n        // be ignored by the Player\n        if (!reportingUrl) {\n            throw new Error(\n                'required parameter missing (dvb:reportingUrl)'\n            );\n        }\n\n        // A Player's status, as a reporting Player or not, shall remain\n        // static for the duration of the MPD, regardless of MPD updates.\n        // (i.e. only calling reset (or failure) changes this state)\n        if (!reportingPlayerStatusDecided) {\n            // NOTE: DVB spec has a typo where it incorrectly references the\n            // priority attribute, which should be probability\n            probability = entry['dvb:probability'] || entry['dvb:priority'] || 0;\n            // If the @priority attribute is set to 1000, it shall be a reporting Player.\n            // If the @priority attribute is missing, the Player shall not be a reporting Player.\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\n            // reporting Player, such that the probability of being one is @probability/1000.\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\n                isReportingPlayer = true;\n            }\n\n            reportingPlayerStatusDecided = true;\n        }\n    }\n\n    function reset() {\n        if (!allowPendingRequestsToCompleteOnReset) {\n            pendingRequests.forEach(req => req.abort());\n            pendingRequests = [];\n        }\n\n        reportingPlayerStatusDecided = false;\n        isReportingPlayer = false;\n        reportingUrl = null;\n        rangeController = null;\n    }\n\n    instance = {\n        report:     report,\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\nexport default FactoryMaker.getClassFactory(DVBReporting);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsConstants from '../../constants/MetricsConstants';\nimport DVBErrors from '../vo/DVBErrors';\nimport Events from '../../../core/events/Events';\nimport MediaPlayerEvents from '../../MediaPlayerEvents';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction DVBErrorsTranslator(config) {\n\n    let instance;\n    let eventBus = config.eventBus;\n    let metricModel = config.metricsModel;\n    let mpd;\n\n    function report(vo) {\n        let o = new DVBErrors();\n\n        if (!mpd) {\n            return;\n        }\n\n        for (const key in vo) {\n            if (vo.hasOwnProperty(key)) {\n                o[key] = vo[key];\n            }\n        }\n\n        if (!o.mpdurl) {\n            o.mpdurl = mpd.originalUrl || mpd.url;\n        }\n\n        if (!o.terror) {\n            o.terror = new Date();\n        }\n\n        metricModel.addDVBErrors(o);\n    }\n\n    function onManifestUpdate(e) {\n        if (e.error) {\n            return;\n        }\n\n        mpd = e.manifest;\n    }\n\n    function onServiceLocationChanged(e) {\n        report({\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\n            servicelocation:    e.entry\n        });\n    }\n\n    function onBecameReporter() {\n        report({\n            errorcode: DVBErrors.BECAME_REPORTER\n        });\n    }\n\n    function handleHttpMetric(vo) {\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\n                (vo.responsecode >= 400) || // HTTP error status code\n                (vo.responsecode < 100) ||  // unknown status codes\n                (vo.responsecode >= 600)) { // unknown status codes\n            report({\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\n                url:                vo.url,\n                terror:             vo.tresponse,\n                servicelocation:    vo._serviceLocation\n            });\n        }\n    }\n\n    function onMetricEvent(e) {\n        switch (e.metric) {\n        case MetricsConstants.HTTP_REQUEST:\n            handleHttpMetric(e.value);\n            break;\n        default:\n            break;\n        }\n    }\n\n    function onPlaybackError(e) {\n        let reason = e.error ? e.error.code : 0;\n        let errorcode;\n\n        switch (reason) {\n            case MediaError.MEDIA_ERR_NETWORK:\n                errorcode = DVBErrors.CONNECTION_ERROR;\n                break;\n            case MediaError.MEDIA_ERR_DECODE:\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\n                break;\n            default:\n                return;\n        }\n\n        report({\n            errorcode: errorcode\n        });\n    }\n\n    function initialise() {\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.on(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.on(MediaPlayerEvents.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.on(MediaPlayerEvents.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.on(MediaPlayerEvents.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.on(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.off(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.off(MediaPlayerEvents.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.off(MediaPlayerEvents.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.off(MediaPlayerEvents.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.off(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    instance = {\n        initialise: initialise,\n        reset:      reset\n    };\n\n    initialise();\n\n    return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexport default FactoryMaker.getSingletonFactory(DVBErrorsTranslator);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction HandlerHelpers() {\n    return {\n        reconstructFullMetricName: function (key, n, type) {\n            let mn = key;\n\n            if (n) {\n                mn += '(' + n;\n\n                if (type && type.length) {\n                    mn += ',' + type;\n                }\n\n                mn += ')';\n            }\n\n            return mn;\n        },\n\n        validateN: function (n_ms) {\n            if (!n_ms) {\n                throw new Error('missing n');\n            }\n\n            if (isNaN(n_ms)) {\n                throw new Error('n is NaN');\n            }\n\n            // n is a positive integer is defined to refer to the metric\n            // in which the buffer level is recorded every n ms.\n            if (n_ms < 0) {\n                throw new Error('n must be positive');\n            }\n\n            return n_ms;\n        }\n    };\n}\n\nHandlerHelpers.__dashjs_factory_name = 'HandlerHelpers';\nexport default FactoryMaker.getSingletonFactory(HandlerHelpers);\n","import Constants from '../../../streaming/constants/Constants';\nimport Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ManifestParsing (config) {\n    let instance;\n    let dashManifestModel = config.dashManifestModel;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        var mpd = dashManifestModel.getMpd(manifest);\n        var voPeriods;\n        var presentationStartTime = 0;\n        var reportingStartTime;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = mpd.availabilityStartTime.getTime() / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            voPeriods = this.getRegularPeriods(mpd);\n\n            if (voPeriods.length) {\n                presentationStartTime = voPeriods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty(Constants.START_TIME)) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        var metrics = [];\n\n        if (manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = dashManifestModel.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    //console.log(\"Invalid Metrics. metrics must be set. Ignoring.\");\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = dashManifestModel.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty(Constants.SCHEME_ID_URI)) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        for (const prop in reporting) {\n                            if (reporting.hasOwnProperty(prop)) {\n                                reportingEntry[prop] = reporting[prop];\n                            }\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default FactoryMaker.getSingletonFactory(ManifestParsing);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction MetricSerialiser() {\n\n    // For each entry in the top level list within the metric (in the case\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\n    // described in clause 10.8.4) the Player shall:\n    function serialise(metric) {\n        let pairs = [];\n        let obj = [];\n        let key,\n            value;\n\n        // Take each (key, value) pair from the metric entry and create a\n        // string consisting of the name of the key, followed by an equals\n        // ('=') character, followed by the string representation of the\n        // value. The string representation of the value is created based\n        // on the type of the value following the instructions in Table 22.\n        for (key in metric) {\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\n                value = metric[key];\n\n                // we want to ensure that keys still end up in the report\n                // even if there is no value\n                if ((value === undefined) || (value === null)) {\n                    value = '';\n                }\n\n                // DVB A168 10.12.4 Table 22\n                if (Array.isArray(value)) {\n                    // if trace or similar is null, do not include in output\n                    if (!value.length) {\n                        continue;\n                    }\n\n                    obj = [];\n\n                    value.forEach(function (v) {\n                        let isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\n\n                        obj.push(isBuiltIn ? v : serialise(v));\n                    });\n\n                    value = obj.map(encodeURIComponent).join(',');\n                } else if (typeof value === 'string') {\n                    value = encodeURIComponent(value);\n                } else if (value instanceof Date) {\n                    value = value.toISOString();\n                } else if (typeof value === 'number') {\n                    value = Math.round(value);\n                }\n\n                pairs.push(key + '=' + value);\n            }\n        }\n\n        // Concatenate the strings created in the previous step with an\n        // ampersand ('&') character between each one.\n        return pairs.join('&');\n    }\n\n    return {\n        serialise: serialise\n    };\n}\n\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\nexport default FactoryMaker.getSingletonFactory(MetricSerialiser);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction RNG() {\n\n    // check whether secure random numbers are available. if not, revert to\n    // using Math.random\n    let crypto = window.crypto || window.msCrypto;\n\n    // could just as easily use any other array type by changing line below\n    let ArrayType = Uint32Array;\n    let MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;\n\n    // currently there is only one client for this code, and that only uses\n    // a single random number per initialisation. may want to increase this\n    // number if more consumers in the future\n    let NUM_RANDOM_NUMBERS = 10;\n\n    let randomNumbers,\n        index,\n        instance;\n\n    function initialise() {\n        if (crypto) {\n            if (!randomNumbers) {\n                randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);\n            }\n            crypto.getRandomValues(randomNumbers);\n            index = 0;\n        }\n    }\n\n    function rand(min, max) {\n        let r;\n\n        if (!min) {\n            min = 0;\n        }\n\n        if (!max) {\n            max = 1;\n        }\n\n        if (crypto) {\n            if (index === randomNumbers.length) {\n                initialise();\n            }\n\n            r = randomNumbers[index] / MAX_VALUE;\n            index += 1;\n        } else {\n            r = Math.random();\n        }\n\n        return (r * (max - min)) + min;\n    }\n\n    instance = {\n        random: rand\n    };\n\n    initialise();\n\n    return instance;\n}\n\nRNG.__dashjs_factory_name = 'RNG';\nexport default FactoryMaker.getSingletonFactory(RNG);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DVBErrors {\n    constructor() {\n        this.mpdurl = null;\n        // String - Absolute URL from which the MPD was originally\n        // retrieved (MPD updates will not change this value).\n\n        this.errorcode = null;\n        // String - The value of errorcode depends upon the type\n        // of error being reported. For an error listed in the\n        // ErrorType column below the value is as described in the\n        // Value column.\n        //\n        // ErrorType                                            Value\n        // ---------                                            -----\n        // HTTP error status code                               HTTP status code\n        // Unknown HTTP status code                             HTTP status code\n        // SSL connection failed                                \"SSL\" followed by SSL alert value\n        // DNS resolution failed                                \"C00\"\n        // Host unreachable                                     \"C01\"\n        // Connection refused                                   \"C02\"\n        // Connection error – Not otherwise specified           \"C03\"\n        // Corrupt media – ISO BMFF container cannot be parsed  \"M00\"\n        // Corrupt media – Not otherwise specified              \"M01\"\n        // Changing Base URL in use due to errors               \"F00\"\n        // Becoming an error reporting Player                   \"S00\"\n\n        this.terror = null;\n        // Real-Time - Date and time at which error occurred in UTC,\n        // formatted as a combined date and time according to ISO 8601.\n\n        this.url = null;\n        // String - Absolute URL from which data was being requested\n        // when this error occurred. If the error report is in relation\n        // to corrupt media or changing BaseURL, this may be a null\n        // string if the URL from which the media was obtained or\n        // which led to the change of BaseURL is no longer known.\n\n        this.ipaddress = null;\n        // String - IP Address which the host name in \"url\" resolved to.\n        // If the error report is in relation to corrupt media or\n        // changing BaseURL, this may be a null string if the URL\n        // from which the media was obtained or which led to the\n        // change of BaseURL is no longer known.\n\n        this.servicelocation = null;\n        // String - The value of the serviceLocation field in the\n        // BaseURL being used. In the event of this report indicating\n        // a change of BaseURL this is the value from the BaseURL\n        // being moved from.\n    }\n}\n\nDVBErrors.SSL_CONNECTION_FAILED_PREFIX = 'SSL';\nDVBErrors.DNS_RESOLUTION_FAILED =        'C00';\nDVBErrors.HOST_UNREACHABLE =             'C01';\nDVBErrors.CONNECTION_REFUSED =           'C02';\nDVBErrors.CONNECTION_ERROR =             'C03';\nDVBErrors.CORRUPT_MEDIA_ISOBMFF =        'M00';\nDVBErrors.CORRUPT_MEDIA_OTHER =          'M01';\nDVBErrors.BASE_URL_CHANGED =             'F00';\nDVBErrors.BECAME_REPORTER =              'S00';\n\nexport default DVBErrors;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Metrics {\n    constructor() {\n\n        this.metrics = '';\n        this.Range = [];\n        this.Reporting = [];\n    }\n}\n\nexport default Metrics;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Range {\n    constructor() {\n\n        // as defined in ISO23009-1\n        this.starttime = 0;\n        this.duration = Infinity;\n\n        // for internal use\n        this._useWallClockTime = false;\n    }\n}\n\nexport default Range;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Reporting {\n    constructor() {\n        // Reporting is a DescriptorType and doesn't have any additional fields\n        this.schemeIdUri = '';\n        this.value = '';\n    }\n}\n\nexport default Reporting;\n","/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction CustomTimeRanges(/*config*/) {\n    let customTimeRangeArray = [];\n    let length = 0;\n\n    function add(start, end) {\n        let i = 0;\n\n        for (i = 0; (i < this.customTimeRangeArray.length) && (start > this.customTimeRangeArray[i].start); i++);\n\n        this.customTimeRangeArray.splice(i, 0, {start: start,end: end});\n\n        for (i = 0; i < this.customTimeRangeArray.length - 1; i++) {\n            if (this.mergeRanges(i,i + 1)) {\n                i--;\n            }\n        }\n        this.length = this.customTimeRangeArray.length;\n    }\n\n    function clear() {\n        this.customTimeRangeArray = [];\n        this.length = 0;\n    }\n\n    function remove(start, end) {\n        for (let i = 0; i < this.customTimeRangeArray.length; i++) {\n            if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) {\n                //      |--------------Range i-------|\n                //|---------------Range to remove ---------------|\n                //    or\n                //|--------------Range i-------|\n                //|--------------Range to remove ---------------|\n                //    or\n                //                 |--------------Range i-------|\n                //|--------------Range to remove ---------------|\n                this.customTimeRangeArray.splice(i,1);\n                i--;\n\n            }else if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\n                //|-----------------Range i----------------|\n                //        |-------Range to remove -----|\n                this.customTimeRangeArray.splice(i + 1, 0, {start: end,end: this.customTimeRangeArray[i].end});\n                this.customTimeRangeArray[i].end = start;\n                break;\n            }else if ( start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end) {\n                //|-----------Range i----------|\n                //                    |---------Range to remove --------|\n                //    or\n                //|-----------------Range i----------------|\n                //            |-------Range to remove -----|\n                this.customTimeRangeArray[i].end = start;\n            }else if ( end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\n                //                     |-----------Range i----------|\n                //|---------Range to remove --------|\n                //            or\n                //|-----------------Range i----------------|\n                //|-------Range to remove -----|\n                this.customTimeRangeArray[i].start = end;\n            }\n        }\n\n        this.length = this.customTimeRangeArray.length;\n    }\n\n    function mergeRanges(rangeIndex1, rangeIndex2) {\n        let range1 = this.customTimeRangeArray[rangeIndex1];\n        let range2 = this.customTimeRangeArray[rangeIndex2];\n\n        if (range1.start <=  range2.start && range2.start <= range1.end && range1.end <= range2.end) {\n            //|-----------Range1----------|\n            //                    |-----------Range2----------|\n            range1.end = range2.end;\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end) {\n            //                |-----------Range1----------|\n            //|-----------Range2----------|\n            range1.start = range2.start;\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end) {\n            //      |--------Range1-------|\n            //|---------------Range2--------------|\n            this.customTimeRangeArray.splice(rangeIndex1,1);\n            return true;\n        } else if (range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end) {\n            //|-----------------Range1--------------|\n            //        |-----------Range2----------|\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n        }\n        return false;\n    }\n\n    function checkIndex(index) {\n        const isInt = index !== null && !isNaN(index) && (index % 1 === 0);\n\n        if (!isInt) {\n            throw new Error('index argument is not an integer');\n        }\n    }\n\n    function start(index) {\n        checkIndex(index);\n\n        if (index >= this.customTimeRangeArray.length || index < 0) {\n            return NaN;\n        }\n\n        return this.customTimeRangeArray[index].start;\n    }\n\n    function end(index) {\n        checkIndex(index);\n\n        if (index >= this.customTimeRangeArray.length || index < 0) {\n            return NaN;\n        }\n\n        return this.customTimeRangeArray[index].end;\n    }\n\n    return {\n        customTimeRangeArray: customTimeRangeArray,\n        length: length,\n        add: add,\n        clear: clear,\n        remove: remove,\n        mergeRanges: mergeRanges,\n        start: start,\n        end: end\n    };\n}\nCustomTimeRanges.__dashjs_factory_name = 'CustomTimeRanges';\nexport default FactoryMaker.getClassFactory(CustomTimeRanges);\n"]}