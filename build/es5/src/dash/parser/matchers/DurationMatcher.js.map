{"version":3,"sources":["../../../../../../src/dash/parser/matchers/DurationMatcher.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAiCwB,eAAe;;;;AAEvC,IAAM,aAAa,GAAG,oFAAoF,CAAC;;AAE3G,IAAM,eAAe,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAC3C,IAAM,gBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAC3C,IAAM,cAAc,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACpC,IAAM,eAAe,GAAG,EAAE,GAAG,EAAE,CAAC;AAChC,IAAM,cAAc,GAAG,EAAE,CAAC;;IAEpB,eAAe;cAAf,eAAe;;AACN,aADT,eAAe,GACH;8BADZ,eAAe;;AAEb,mCAFF,eAAe,6CAGT,UAAA,IAAI,EAAI;AACJ,gBAAM,aAAa,GAAG,CAClB,eAAe,EAAE,2BAA2B,EAC5C,qBAAqB,EAAE,sBAAsB,EAAE,oBAAoB,EACnE,uBAAuB,EAAE,4BAA4B,EAAE,OAAO,EAC9D,WAAW,EAAE,UAAU,CAC1B,CAAC;AACF,gBAAM,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;;AAEjC,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC1B,oBAAI,IAAI,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,EAAE;AACpC,2BAAO,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACzC;aACJ;;AAED,mBAAO,KAAK,CAAC;SAChB,EACD,UAAA,GAAG,EAAI;;AAEH,gBAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACtC,gBAAI,MAAM,GAAI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,eAAe,GACrD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,gBAAgB,GAC5C,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,cAAc,GAC1C,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,eAAe,GAC3C,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,cAAc,GAC3C,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,AAAC,CAAC;;AAEhC,gBAAI,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;AACxB,sBAAM,GAAG,CAAC,MAAM,CAAC;aACpB;;AAED,mBAAO,MAAM,CAAC;SACjB,EACH;KACL;;WArCC,eAAe;;;qBAwCN,eAAe","file":"DurationMatcher.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc matches and converts xs:duration to seconds\n */\nimport BaseMatcher from './BaseMatcher';\n\nconst durationRegex = /^([-])?P(([\\d.]*)Y)?(([\\d.]*)M)?(([\\d.]*)D)?T?(([\\d.]*)H)?(([\\d.]*)M)?(([\\d.]*)S)?/;\n\nconst SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\nconst SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\nconst SECONDS_IN_DAY = 24 * 60 * 60;\nconst SECONDS_IN_HOUR = 60 * 60;\nconst SECONDS_IN_MIN = 60;\n\nclass DurationMatcher extends BaseMatcher {\n    constructor() {\n        super(\n            attr => {\n                const attributeList = [\n                    'minBufferTime', 'mediaPresentationDuration',\n                    'minimumUpdatePeriod', 'timeShiftBufferDepth', 'maxSegmentDuration',\n                    'maxSubsegmentDuration', 'suggestedPresentationDelay', 'start',\n                    'starttime', 'duration'\n                ];\n                const len = attributeList.length;\n\n                for (let i = 0; i < len; i++) {\n                    if (attr.nodeName === attributeList[i]) {\n                        return durationRegex.test(attr.value);\n                    }\n                }\n\n                return false;\n            },\n            str => {\n                //str = \"P10Y10M10DT10H10M10.1S\";\n                const match = durationRegex.exec(str);\n                let result = (parseFloat(match[2] || 0) * SECONDS_IN_YEAR +\n                    parseFloat(match[4] || 0) * SECONDS_IN_MONTH +\n                    parseFloat(match[6] || 0) * SECONDS_IN_DAY +\n                    parseFloat(match[8] || 0) * SECONDS_IN_HOUR +\n                    parseFloat(match[10] || 0) * SECONDS_IN_MIN +\n                    parseFloat(match[12] || 0));\n\n                if (match[1] !== undefined) {\n                    result = -result;\n                }\n\n                return result;\n            }\n        );\n    }\n}\n\nexport default DurationMatcher;\n"]}