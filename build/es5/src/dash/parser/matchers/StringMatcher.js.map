{"version":3,"sources":["../../../../../../src/dash/parser/matchers/StringMatcher.js"],"names":[],"mappings":"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","file":"StringMatcher.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Matches and converts xs:string to string, but only for specific attributes on specific nodes\n */\nimport BaseMatcher from './BaseMatcher';\nimport DashConstants from '../../constants/DashConstants';\n\nclass StringMatcher extends BaseMatcher {\n    constructor() {\n        super(\n            (attr, nodeName) => {\n                const stringAttrsInElements = {\n                    [DashConstants.MPD]:                            [ DashConstants.ID, DashConstants.PROFILES ],\n                    [DashConstants.PERIOD]:                         [ DashConstants.ID ],\n                    [DashConstants.BASE_URL]:                       [ DashConstants.SERVICE_LOCATION, DashConstants.BYTE_RANGE ],\n                    [DashConstants.SEGMENT_BASE]:                   [ DashConstants.INDEX_RANGE ],\n                    [DashConstants.INITIALIZATION]:                 [ DashConstants.RANGE ],\n                    [DashConstants.REPRESENTATION_INDEX]:           [ DashConstants.RANGE ],\n                    [DashConstants.SEGMENT_LIST]:                   [ DashConstants.INDEX_RANGE ],\n                    [DashConstants.BITSTREAM_SWITCHING]:            [ DashConstants.RANGE ],\n                    [DashConstants.SEGMENT_URL]:                    [ DashConstants.MEDIA_RANGE, DashConstants.INDEX_RANGE ],\n                    [DashConstants.SEGMENT_TEMPLATE]:               [ DashConstants.INDEX_RANGE, DashConstants.MEDIA, DashConstants.INDEX, DashConstants.INITIALIZATION_MINUS, DashConstants.BITSTREAM_SWITCHING_MINUS ],\n                    [DashConstants.ASSET_IDENTIFIER]:               [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.EVENT_STREAM]:                   [ DashConstants.VALUE ],\n                    [DashConstants.ADAPTATION_SET]:                 [ DashConstants.PROFILES, DashConstants.MIME_TYPE, DashConstants.SEGMENT_PROFILES, DashConstants.CODECS, DashConstants.CONTENT_TYPE ],\n                    [DashConstants.FRAME_PACKING]:                  [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.AUDIO_CHANNEL_CONFIGURATION]:    [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.CONTENT_PROTECTION]:             [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.ESSENTIAL_PROPERTY]:             [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.SUPPLEMENTAL_PROPERTY]:          [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.INBAND_EVENT_STREAM]:            [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.ACCESSIBILITY]:                  [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.ROLE]:                           [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.RATING]:                         [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.VIEWPOINT]:                      [ DashConstants.VALUE, DashConstants.ID ],\n                    [DashConstants.CONTENT_COMPONENT]:              [ DashConstants.CONTENT_TYPE ],\n                    [DashConstants.REPRESENTATION]:                 [ DashConstants.ID, DashConstants.DEPENDENCY_ID, DashConstants.MEDIA_STREAM_STRUCTURE_ID ],\n                    [DashConstants.SUBSET]:                         [ DashConstants.ID ],\n                    [DashConstants.METRICS]:                        [ DashConstants.METRICS_MINUS ],\n                    [DashConstants.REPORTING]:                      [ DashConstants.VALUE, DashConstants.ID ]\n                };\n                if (stringAttrsInElements.hasOwnProperty(nodeName)) {\n                    let attrNames = stringAttrsInElements[nodeName];\n                    if (attrNames !== undefined) {\n                        return attrNames.indexOf(attr.name) >= 0;\n                    } else {\n                        return false;\n                    }\n                }\n                return false;\n            },\n            str => String(str)\n        );\n    }\n}\n\nexport default StringMatcher;\n"]}