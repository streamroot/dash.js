{"version":3,"sources":["../../../../../../src/dash/parser/matchers/StringMatcher.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAiCwB,eAAe;;;;IAEjC,aAAa;cAAb,aAAa;;AACJ,aADT,aAAa,GACD;8BADZ,aAAa;;AAEX,mCAFF,aAAa,6CAGP,UAAC,IAAI,EAAE,QAAQ,EAAK;AAChB,gBAAM,qBAAqB,GAAG;AAC1B,qBAAK,EAAyB,CAAE,IAAI,EAAE,UAAU,CAAE;AAClD,wBAAQ,EAAsB,CAAE,IAAI,CAAG;AACvC,yBAAS,EAAqB,CAAE,iBAAiB,EAAE,WAAW,CAAE;AAChE,6BAAa,EAAiB,CAAE,YAAY,CAAE;AAC9C,gCAAgB,EAAc,CAAE,OAAO,CAAE;AACzC,qCAAqB,EAAS,CAAE,OAAO,CAAE;AACzC,6BAAa,EAAiB,CAAE,YAAY,CAAE;AAC9C,oCAAoB,EAAU,CAAE,OAAO,CAAE;AACzC,4BAAY,EAAkB,CAAE,YAAY,EAAE,YAAY,CAAE;AAC5D,iCAAiB,EAAa,CAAE,YAAY,EAAE,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,oBAAoB,CAAE;AACxG,iCAAiB,EAAa,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,6BAAa,EAAiB,CAAE,OAAO,CAAE;AACzC,+BAAe,EAAe,CAAE,UAAU,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ,EAAE,aAAa,CAAE;AACpG,8BAAc,EAAgB,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,2CAA2B,EAAG,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,mCAAmB,EAAW,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,mCAAmB,EAAW,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,sCAAsB,EAAQ,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,mCAAmB,EAAW,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,+BAAe,EAAe,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,sBAAM,EAAwB,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,wBAAQ,EAAsB,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,2BAAW,EAAmB,CAAE,OAAO,EAAE,IAAI,CAAE;AAC/C,kCAAkB,EAAY,CAAE,aAAa,CAAE;AAC/C,gCAAgB,EAAc,CAAE,IAAI,EAAE,cAAc,EAAE,wBAAwB,CAAE;AAChF,wBAAQ,EAAsB,CAAE,IAAI,CAAE;AACtC,yBAAS,EAAqB,CAAE,SAAS,CAAE;AAC3C,2BAAW,EAAmB,CAAE,OAAO,EAAE,IAAI,CAAE;aAClD,CAAC;AACF,gBAAI,qBAAqB,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AAChD,oBAAI,SAAS,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AAChD,oBAAI,SAAS,KAAK,SAAS,EAAE;AACzB,2BAAO,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC5C,MAAM;AACH,2BAAO,KAAK,CAAC;iBAChB;aACJ;AACD,mBAAO,KAAK,CAAC;SAChB,EACD,UAAA,GAAG;mBAAI,MAAM,CAAC,GAAG,CAAC;SAAA,EACpB;KACL;;WA9CC,aAAa;;;qBAiDJ,aAAa","file":"StringMatcher.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Matches and converts xs:string to string, but only for specific attributes on specific nodes\n */\nimport BaseMatcher from './BaseMatcher';\n\nclass StringMatcher extends BaseMatcher {\n    constructor() {\n        super(\n            (attr, nodeName) => {\n                const stringAttrsInElements = {\n                    'MPD':                        [ 'id', 'profiles' ],\n                    'Period':                     [ 'id', ],\n                    'BaseURL':                    [ 'serviceLocation', 'byteRange' ],\n                    'SegmentBase':                [ 'indexRange' ],\n                    'Initialization':             [ 'range' ],\n                    'RepresentationIndex':        [ 'range' ],\n                    'SegmentList':                [ 'indexRange' ],\n                    'BitstreamSwitching':         [ 'range' ],\n                    'SegmentURL':                 [ 'mediaRange', 'indexRange' ],\n                    'SegmentTemplate':            [ 'indexRange', 'media', 'index', 'initialization', 'bitstreamSwitching' ],\n                    'AssetIdentifier':            [ 'value', 'id' ],\n                    'EventStream':                [ 'value' ],\n                    'AdaptationSet':              [ 'profiles', 'mimeType', 'segmentProfiles', 'codecs', 'contentType' ],\n                    'FramePacking':               [ 'value', 'id' ],\n                    'AudioChannelConfiguration':  [ 'value', 'id' ],\n                    'ContentProtection':          [ 'value', 'id' ],\n                    'EssentialProperty':          [ 'value', 'id' ],\n                    'SupplementalProperty':       [ 'value', 'id' ],\n                    'InbandEventStream':          [ 'value', 'id' ],\n                    'Accessibility':              [ 'value', 'id' ],\n                    'Role':                       [ 'value', 'id' ],\n                    'Rating':                     [ 'value', 'id' ],\n                    'Viewpoint':                  [ 'value', 'id' ],\n                    'ContentComponent':           [ 'contentType' ],\n                    'Representation':             [ 'id', 'dependencyId', 'mediaStreamStructureId' ],\n                    'Subset':                     [ 'id' ],\n                    'Metrics':                    [ 'metrics' ],\n                    'Reporting':                  [ 'value', 'id' ]\n                };\n                if (stringAttrsInElements.hasOwnProperty(nodeName)) {\n                    var attrNames = stringAttrsInElements[nodeName];\n                    if (attrNames !== undefined) {\n                        return attrNames.indexOf(attr.name) >= 0;\n                    } else {\n                        return false;\n                    }\n                }\n                return false;\n            },\n            str => String(str)\n        );\n    }\n}\n\nexport default StringMatcher;\n"]}