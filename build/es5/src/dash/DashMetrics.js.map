{"version":3,"sources":["../../../../src/dash/DashMetrics.js"],"names":[],"mappings":"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","file":"DashMetrics.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\nimport ManifestModel from '../streaming/models/ManifestModel';\nimport DashManifestModel from './models/DashManifestModel';\nimport FactoryMaker from '../core/FactoryMaker';\nimport * as MetricsList from './constants/DashMetricsList';\nimport { round10 } from 'round10';\n\n/**\n * @module DashMetrics\n */\nfunction DashMetrics() {\n\n    let instance;\n    let context = this.context;\n    let manifestModel = ManifestModel(context).getInstance();//TODO Need to pass this in not bake in\n\n    function getBandwidthForRepresentation(representationId, periodId) {\n        var representation;\n        var manifest = manifestModel.getValue();\n        var period = manifest.Period_asArray[periodId];\n\n        representation = findRepresentation(period, representationId);\n\n        if (representation === null) {\n            return null;\n        }\n\n        return representation.bandwidth;\n    }\n\n\n    /**\n     *\n     * @param {string} representationId\n     * @param {number} periodIdx\n     * @returns {*}\n     */\n    function getIndexForRepresentation(representationId, periodIdx) {\n        var representationIndex;\n        var manifest = manifestModel.getValue();\n        var period = manifest.Period_asArray[periodIdx];\n\n        representationIndex = findRepresentationIndex(period, representationId);\n        return representationIndex;\n    }\n\n    /**\n     * This method returns the current max index based on what is defined in the MPD.\n     *\n     * @param {string} bufferType - String 'audio' or 'video',\n     * @param {number} periodIdx - Make sure this is the period index not id\n     * @return {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getMaxIndexForBufferType(bufferType, periodIdx) {\n        var maxIndex;\n        var manifest = manifestModel.getValue();\n        var period = manifest.Period_asArray[periodIdx];\n\n        maxIndex = findMaxBufferIndex(period, bufferType);\n        return maxIndex;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentRepresentationSwitch(metrics) {\n        return getCurrent(metrics, MetricsList.TRACK_SWITCH);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestBufferLevelVO(metrics) {\n        return getCurrent(metrics, MetricsList.BUFFER_LEVEL);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentBufferLevel(metrics) {\n        const vo = getLatestBufferLevelVO(metrics);\n\n        if (vo) {\n            return round10(vo.level / 1000, -3);\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {null|*|vo}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getRequestsQueue(metrics) {\n        return metrics.RequestsQueue;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentHttpRequest(metrics) {\n        if (metrics === null) {\n            return null;\n        }\n\n        var httpList = metrics.HttpList;\n        var currentHttpList = null;\n\n        var httpListLength,\n            httpListLastIndex;\n\n        if (httpList === null || httpList.length <= 0) {\n            return null;\n        }\n\n        httpListLength = httpList.length;\n        httpListLastIndex = httpListLength - 1;\n\n        while (httpListLastIndex >= 0) {\n            if (httpList[httpListLastIndex].responsecode) {\n                currentHttpList = httpList[httpListLastIndex];\n                break;\n            }\n            httpListLastIndex--;\n        }\n        return currentHttpList;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getHttpRequests(metrics) {\n        if (metrics === null) {\n            return [];\n        }\n\n        return !!metrics.HttpList ? metrics.HttpList : [];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} metricName\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrent(metrics, metricName) {\n        if (metrics === null) {\n            return null;\n        }\n\n        const list = metrics[metricName];\n\n        if (list === null) {\n            return null;\n        }\n\n        const length = list.length;\n\n        if (length <= 0) {\n            return null;\n        }\n\n        return list[length - 1];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDroppedFrames(metrics) {\n        return getCurrent(metrics, MetricsList.DROPPED_FRAMES);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentSchedulingInfo(metrics) {\n        return getCurrent(metrics, MetricsList.SCHEDULING_INFO);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentManifestUpdate(metrics) {\n        return getCurrent(metrics, MetricsList.MANIFEST_UPDATE);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDVRInfo(metrics) {\n        return getCurrent(metrics, MetricsList.DVR_INFO);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestMPDRequestHeaderValueByID(metrics, id) {\n        var headers = {};\n        var httpRequestList,\n            httpRequest,\n            i;\n\n        if (metrics === null) {\n            return null;\n        }\n\n        httpRequestList = getHttpRequests(metrics);\n\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\n            httpRequest = httpRequestList[i];\n\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\n                headers = parseResponseHeaders(httpRequest._responseHeaders);\n                break;\n            }\n        }\n\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestFragmentRequestHeaderValueByID(metrics, id) {\n\n        if (metrics === null) return null;\n\n        var httpRequest = getCurrentHttpRequest(metrics);\n        var headers;\n\n        if (httpRequest === null || httpRequest._responseHeaders === null) return null;\n\n        headers = parseResponseHeaders(httpRequest._responseHeaders);\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    function parseResponseHeaders(headerStr) {\n        var headers = {};\n        if (!headerStr) {\n            return headers;\n        }\n\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\n        // which send a string starting with a \"\\n\" character\n        var headerPairs = headerStr.trim().split('\\u000d\\u000a');\n        for (var i = 0, ilen = headerPairs.length; i < ilen; i++) {\n            var headerPair = headerPairs[i];\n            var index = headerPair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\n            }\n        }\n        return headers;\n    }\n\n    function findRepresentationIndex(period, representationId) {\n        const index = findRepresentation(period, representationId, true);\n\n        if (index !== null) {\n            return index;\n        }\n\n        return -1;\n    }\n\n    function findRepresentation(period, representationId, returnIndex) {\n        var adaptationSet,\n            adaptationSetArray,\n            representation,\n            representationArray,\n            adaptationSetArrayIndex,\n            representationArrayIndex;\n\n        adaptationSetArray = period.AdaptationSet_asArray;\n        for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n            adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n            representationArray = adaptationSet.Representation_asArray;\n            for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\n                representation = representationArray[representationArrayIndex];\n                if (representationId === representation.id) {\n                    if (returnIndex) {\n                        return representationArrayIndex;\n                    } else {\n                        return representation;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function adaptationIsType(adaptation, bufferType) {\n        return DashManifestModel(context).getInstance().getIsTypeOf(adaptation, bufferType);\n    }\n\n    function findMaxBufferIndex(period, bufferType) {\n        var adaptationSet,\n            adaptationSetArray,\n            representationArray,\n            adaptationSetArrayIndex;\n\n        if (!period || !bufferType) return -1;\n\n        adaptationSetArray = period.AdaptationSet_asArray;\n        for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n            adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n            representationArray = adaptationSet.Representation_asArray;\n            if (adaptationIsType(adaptationSet, bufferType)) {\n                return representationArray.length;\n            }\n        }\n\n        return -1;\n    }\n\n    instance = {\n        getBandwidthForRepresentation: getBandwidthForRepresentation,\n        getIndexForRepresentation: getIndexForRepresentation,\n        getMaxIndexForBufferType: getMaxIndexForBufferType,\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n        getLatestBufferLevelVO: getLatestBufferLevelVO,\n        getCurrentBufferLevel: getCurrentBufferLevel,\n        getCurrentHttpRequest: getCurrentHttpRequest,\n        getHttpRequests: getHttpRequests,\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\n        getCurrentDVRInfo: getCurrentDVRInfo,\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\n        getRequestsQueue: getRequestsQueue\n    };\n\n    return instance;\n}\n\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\n"]}