{"version":3,"sources":["../../../../../src/dash/controllers/RepresentationController.js"],"names":[],"mappings":"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","file":"RepresentationController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../streaming/constants/Constants';\nimport DashConstants from '../constants/DashConstants';\nimport DashJSError from '../../streaming/vo/DashJSError';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport MediaPlayerEvents from '../../streaming/MediaPlayerEvents';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Representation from '../vo/Representation';\n\nfunction RepresentationController() {\n\n    const SEGMENTS_UPDATE_FAILED_ERROR_CODE = 1;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        realAdaptation,\n        realAdaptationIndex,\n        updating,\n        voAvailableRepresentations,\n        currentVoRepresentation,\n        abrController,\n        indexHandler,\n        playbackController,\n        metricsModel,\n        domStorage,\n        timelineConverter,\n        dashManifestModel,\n        dashMetrics,\n        streamProcessor,\n        manifestModel;\n\n    function setup() {\n        resetInitialSettings();\n\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.on(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.on(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n    }\n\n    function setConfig(config) {\n        // allow the abrController created in setup to be overidden\n        if (config.abrController) {\n            abrController = config.abrController;\n        }\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n        if (config.metricsModel) {\n            metricsModel = config.metricsModel;\n        }\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n        if (config.timelineConverter) {\n            timelineConverter = config.timelineConverter;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.streamProcessor) {\n            streamProcessor = config.streamProcessor;\n        }\n    }\n\n    function initialize() {\n        indexHandler = streamProcessor.getIndexHandler();\n    }\n\n    function getStreamProcessor() {\n        return streamProcessor;\n    }\n\n    function getData() {\n        return realAdaptation;\n    }\n\n    function getDataIndex() {\n        return realAdaptationIndex;\n    }\n\n    function isUpdating() {\n        return updating;\n    }\n\n    function getCurrentRepresentation() {\n        return currentVoRepresentation;\n    }\n\n    function resetInitialSettings() {\n        realAdaptation = null;\n        realAdaptationIndex = -1;\n        updating = true;\n        voAvailableRepresentations = [];\n        abrController = null;\n        playbackController = null;\n        metricsModel = null;\n        domStorage = null;\n        timelineConverter = null;\n        dashManifestModel = null;\n        dashMetrics = null;\n    }\n\n    function reset() {\n\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.off(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.off(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n\n        resetInitialSettings();\n    }\n\n    function updateData(newRealAdaptation, voAdaptation, type) {\n        let quality,\n            averageThroughput;\n\n        let bitrate = null;\n        let streamInfo = streamProcessor.getStreamInfo();\n        let maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\n\n        updating = true;\n        eventBus.trigger(Events.DATA_UPDATE_STARTED, {sender: this});\n\n        voAvailableRepresentations = updateRepresentations(voAdaptation);\n\n        if (realAdaptation === null && type !== Constants.FRAGMENTED_TEXT) {\n            averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\n            bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo);\n            quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate);\n        } else {\n            quality = abrController.getQualityFor(type, streamInfo);\n        }\n\n        if (quality > maxQuality) {\n            quality = maxQuality;\n        }\n\n        currentVoRepresentation = getRepresentationForQuality(quality);\n        realAdaptation = newRealAdaptation;\n\n        if (type !== Constants.VIDEO && type !== Constants.AUDIO && type !== Constants.FRAGMENTED_TEXT) {\n            updating = false;\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\n            return;\n        }\n\n        for (let i = 0; i < voAvailableRepresentations.length; i++) {\n            indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\n        }\n    }\n\n    function addRepresentationSwitch() {\n        let now = new Date();\n        let currentRepresentation = getCurrentRepresentation();\n        let currentVideoTimeMs = playbackController.getTime() * 1000;\n\n        metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);\n    }\n\n    function addDVRMetric() {\n        let streamInfo = streamProcessor.getStreamInfo();\n        let manifestInfo = streamInfo ? streamInfo.manifestInfo : null;\n        let isDynamic = manifestInfo ? manifestInfo.isDynamic : null;\n        let range = timelineConverter.calcSegmentAvailabilityRange(currentVoRepresentation, isDynamic);\n        metricsModel.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), manifestInfo, range);\n    }\n\n    function getRepresentationForQuality(quality) {\n        return voAvailableRepresentations[quality];\n    }\n\n    function getQualityForRepresentation(voRepresentation) {\n        return voAvailableRepresentations.indexOf(voRepresentation);\n    }\n\n    function isAllRepresentationsUpdated() {\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\n            let segmentInfoType = voAvailableRepresentations[i].segmentInfoType;\n            if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !Representation.hasInitialization(voAvailableRepresentations[i]) ||\n                ((segmentInfoType === DashConstants.SEGMENT_BASE || segmentInfoType === DashConstants.BASE_URL) && !voAvailableRepresentations[i].segments)\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function updateRepresentations(voAdaptation) {\n        let voReps;\n\n        realAdaptationIndex = dashManifestModel.getIndexForAdaptation(realAdaptation, voAdaptation.period.mpd.manifest, voAdaptation.period.index);\n        voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\n\n        return voReps;\n    }\n\n    function updateAvailabilityWindow(isDynamic) {\n        let voRepresentation;\n\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\n            voRepresentation = voAvailableRepresentations[i];\n            voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic);\n        }\n    }\n\n    function resetAvailabilityWindow() {\n        voAvailableRepresentations.forEach(rep => {\n            rep.segmentAvailabilityRange = null;\n        });\n    }\n\n    function postponeUpdate(postponeTimePeriod) {\n        let delay = postponeTimePeriod;\n        let update = function () {\n            if (isUpdating()) return;\n\n            updating = true;\n            eventBus.trigger(Events.DATA_UPDATE_STARTED, { sender: instance });\n\n            // clear the segmentAvailabilityRange for all reps.\n            // this ensures all are updated before the live edge search starts\n            resetAvailabilityWindow();\n\n            for (let i = 0; i < voAvailableRepresentations.length; i++) {\n                indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\n            }\n        };\n\n        updating = false;\n        eventBus.trigger(MediaPlayerEvents.AST_IN_FUTURE, { delay: delay });\n        setTimeout(update, delay);\n    }\n\n    function onRepresentationUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor || !isUpdating()) return;\n\n        let r = e.representation;\n        let streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\n        var metrics = metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type);\n        let manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(streamMetrics);\n        let alreadyAdded = false;\n        let postponeTimePeriod = 0;\n        let repInfo,\n            err,\n            repSwitch;\n\n        if (r.adaptation.period.mpd.manifest.type === DashConstants.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod)\n        {\n            let segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;\n            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start\n            let liveDelay = playbackController.computeLiveDelay(currentVoRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize);\n            postponeTimePeriod = (liveDelay - segmentAvailabilityTimePeriod) * 1000;\n        }\n\n        if (postponeTimePeriod > 0) {\n            addDVRMetric();\n            postponeUpdate(postponeTimePeriod);\n            err = new DashJSError(SEGMENTS_UPDATE_FAILED_ERROR_CODE, 'Segments update failed', null);\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation, error: err});\n\n            return;\n        }\n\n        if (manifestUpdateInfo) {\n            for (let i = 0; i < manifestUpdateInfo.trackInfo.length; i++) {\n                repInfo = manifestUpdateInfo.trackInfo[i];\n                if (repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {\n                    alreadyAdded = true;\n                    break;\n                }\n            }\n\n            if (!alreadyAdded) {\n                metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, r.id, r.index, r.adaptation.period.index,\n                        streamProcessor.getType(),r.presentationTimeOffset, r.startNumber, r.segmentInfoType);\n            }\n        }\n\n        if (isAllRepresentationsUpdated()) {\n            updating = false;\n            abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentVoRepresentation));\n            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});\n\n            repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics);\n\n            if (!repSwitch) {\n                addRepresentationSwitch();\n            }\n\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\n        }\n    }\n\n    function onWallclockTimeUpdated(e) {\n        if (e.isDynamic) {\n            updateAvailabilityWindow(e.isDynamic);\n        }\n    }\n\n    function onBufferLevelUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) return;\n        let manifest = manifestModel.getValue();\n        if (!manifest.doNotUpdateDVRWindowOnBufferUpdated) {\n            addDVRMetric();\n        }\n    }\n\n    function onQualityChanged(e) {\n        if (e.mediaType !== streamProcessor.getType() || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;\n\n        if (e.oldQuality !== e.newQuality) {\n            currentVoRepresentation = getRepresentationForQuality(e.newQuality);\n            const bitrate = abrController.getThroughputHistory().getAverageThroughput(e.mediaType);\n            if (!isNaN(bitrate)) {\n                domStorage.setSavedBitrateSettings(e.mediaType, bitrate);\n            }\n            addRepresentationSwitch();\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setConfig: setConfig,\n        getData: getData,\n        getDataIndex: getDataIndex,\n        isUpdating: isUpdating,\n        updateData: updateData,\n        getStreamProcessor: getStreamProcessor,\n        getCurrentRepresentation: getCurrentRepresentation,\n        getRepresentationForQuality: getRepresentationForQuality,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nRepresentationController.__dashjs_factory_name = 'RepresentationController';\nexport default FactoryMaker.getClassFactory(RepresentationController);\n"]}