{"version":3,"sources":["../../../../../src/dash/controllers/RepresentationController.js"],"names":[],"mappings":"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","file":"RepresentationController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashManifestModel from '../models/DashManifestModel';\nimport DashMetrics from '../DashMetrics';\nimport TimelineConverter from '../utils/TimelineConverter';\nimport AbrController from '../../streaming/controllers/AbrController';\nimport PlaybackController from '../../streaming/controllers/PlaybackController';\nimport StreamController from '../../streaming/controllers/StreamController';\nimport ManifestModel from '../../streaming/models/ManifestModel';\nimport MetricsModel from '../../streaming/models/MetricsModel';\nimport MediaPlayerModel from '../../streaming/models/MediaPlayerModel';\nimport DOMStorage from '../../streaming/utils/DOMStorage';\nimport Error from '../../streaming/vo/Error';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport MediaPlayerEvents from '../../streaming/MediaPlayerEvents';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Representation from '../vo/Representation';\n\nfunction RepresentationController() {\n\n    const SEGMENTS_UPDATE_FAILED_ERROR_CODE = 1;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        data,\n        dataIndex,\n        updating,\n        availableRepresentations,\n        currentRepresentation,\n        streamProcessor,\n        abrController,\n        indexHandler,\n        streamController,\n        playbackController,\n        manifestModel,\n        metricsModel,\n        domStorage,\n        timelineConverter,\n        dashManifestModel,\n        dashMetrics,\n        mediaPlayerModel;\n\n    function setup() {\n        data = null;\n        dataIndex = -1;\n        updating = true;\n        availableRepresentations = [];\n\n        abrController = AbrController(context).getInstance();\n        streamController = StreamController(context).getInstance();\n        playbackController = PlaybackController(context).getInstance();\n        manifestModel = ManifestModel(context).getInstance();\n        metricsModel = MetricsModel(context).getInstance();\n        domStorage = DOMStorage(context).getInstance();\n        timelineConverter = TimelineConverter(context).getInstance();\n        dashManifestModel = DashManifestModel(context).getInstance();\n        dashMetrics = DashMetrics(context).getInstance();\n        mediaPlayerModel = MediaPlayerModel(context).getInstance();\n\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.on(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.on(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n\n    }\n\n    function setConfig(config) {\n        // allow the abrController created in setup to be overidden\n        if (config.abrController) {\n            abrController = config.abrController;\n        }\n    }\n\n    function initialize(StreamProcessor) {\n        streamProcessor = StreamProcessor;\n        indexHandler = streamProcessor.getIndexHandler();\n    }\n\n    function getStreamProcessor() {\n        return streamProcessor;\n    }\n\n    function getData() {\n        return data;\n    }\n\n    function getDataIndex() {\n        return dataIndex;\n    }\n\n    function isUpdating() {\n        return updating;\n    }\n\n    function getCurrentRepresentation() {\n        return currentRepresentation;\n    }\n\n    function reset() {\n\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.off(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.off(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n\n\n        data = null;\n        dataIndex = -1;\n        updating = true;\n        availableRepresentations = [];\n        abrController = null;\n        streamController = null;\n        playbackController = null;\n        manifestModel = null;\n        metricsModel = null;\n        domStorage = null;\n        timelineConverter = null;\n        dashManifestModel = null;\n        dashMetrics = null;\n        mediaPlayerModel = null;\n\n    }\n\n    function updateData(dataValue, adaptation, type) {\n        var quality,\n            averageThroughput;\n\n        var bitrate = null;\n        var streamInfo = streamProcessor.getStreamInfo();\n        var maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\n\n        updating = true;\n        eventBus.trigger(Events.DATA_UPDATE_STARTED, {sender: this});\n\n        availableRepresentations = updateRepresentations(adaptation);\n\n        if (data === null && type !== 'fragmentedText') {\n            averageThroughput = abrController.getAverageThroughput(type);\n            bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo);\n            quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate);\n        } else {\n            quality = abrController.getQualityFor(type, streamInfo);\n        }\n\n        if (quality > maxQuality) {\n            quality = maxQuality;\n        }\n\n        currentRepresentation = getRepresentationForQuality(quality);\n        data = dataValue;\n\n        if (type !== 'video' && type !== 'audio' && type !== 'fragmentedText') {\n            updating = false;\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: data, currentRepresentation: currentRepresentation});\n            return;\n        }\n\n        for (var i = 0; i < availableRepresentations.length; i++) {\n            indexHandler.updateRepresentation(availableRepresentations[i], true);\n        }\n    }\n\n    function addRepresentationSwitch() {\n        var now = new Date();\n        var currentRepresentation = getCurrentRepresentation();\n        var currentVideoTimeMs = playbackController.getTime() * 1000;\n\n        metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);\n    }\n\n    function addDVRMetric() {\n        var range = timelineConverter.calcSegmentAvailabilityRange(currentRepresentation, streamProcessor.isDynamic());\n        metricsModel.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), streamProcessor.getStreamInfo().manifestInfo, range);\n    }\n\n    function getRepresentationForQuality(quality) {\n        return availableRepresentations[quality];\n    }\n\n    function getQualityForRepresentation(representation) {\n        return availableRepresentations.indexOf(representation);\n    }\n\n    function isAllRepresentationsUpdated() {\n        for (var i = 0, ln = availableRepresentations.length; i < ln; i++) {\n            var segmentInfoType = availableRepresentations[i].segmentInfoType;\n            if (availableRepresentations[i].segmentAvailabilityRange === null || !Representation.hasInitialization(availableRepresentations[i]) ||\n                    ((segmentInfoType === 'SegmentBase' || segmentInfoType === 'BaseURL') && !availableRepresentations[i].segments)\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function updateRepresentations(adaptation) {\n        var reps;\n        var manifest = manifestModel.getValue();\n\n        dataIndex = dashManifestModel.getIndexForAdaptation(data, manifest, adaptation.period.index);\n        reps = dashManifestModel.getRepresentationsForAdaptation(manifest, adaptation);\n\n        return reps;\n    }\n\n    function updateAvailabilityWindow(isDynamic) {\n        var rep;\n\n        for (var i = 0, ln = availableRepresentations.length; i < ln; i++) {\n            rep = availableRepresentations[i];\n            rep.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(rep, isDynamic);\n        }\n    }\n\n    function resetAvailabilityWindow() {\n        availableRepresentations.forEach(rep => {\n            rep.segmentAvailabilityRange = null;\n        });\n    }\n\n    function postponeUpdate(postponeTimePeriod) {\n        var delay = postponeTimePeriod;\n        var update = function () {\n            if (isUpdating()) return;\n\n            updating = true;\n            eventBus.trigger(Events.DATA_UPDATE_STARTED, { sender: instance });\n\n            // clear the segmentAvailabilityRange for all reps.\n            // this ensures all are updated before the live edge search starts\n            resetAvailabilityWindow();\n\n            for (var i = 0; i < availableRepresentations.length; i++) {\n                indexHandler.updateRepresentation(availableRepresentations[i], true);\n            }\n        };\n\n        updating = false;\n        eventBus.trigger(MediaPlayerEvents.AST_IN_FUTURE, { delay: delay });\n        setTimeout(update, delay);\n    }\n\n    function onRepresentationUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor || !isUpdating()) return;\n\n        var r = e.representation;\n        var streamMetrics = metricsModel.getMetricsFor('stream');\n        var metrics = metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type);\n        var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(streamMetrics);\n        var alreadyAdded = false;\n        var postponeTimePeriod = 0;\n        var repInfo;\n        var err;\n        var repSwitch;\n\n        if (r.adaptation.period.mpd.manifest.type === 'dynamic')\n        {\n            let segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;\n            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start\n            let liveDelay = playbackController.computeLiveDelay(currentRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize);\n            postponeTimePeriod = (liveDelay - segmentAvailabilityTimePeriod) * 1000;\n        }\n\n        if (postponeTimePeriod > 0) {\n            addDVRMetric();\n            postponeUpdate(postponeTimePeriod);\n            err = new Error(SEGMENTS_UPDATE_FAILED_ERROR_CODE, 'Segments update failed', null);\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: data, currentRepresentation: currentRepresentation, error: err});\n\n            return;\n        }\n\n        if (manifestUpdateInfo) {\n            for (var i = 0; i < manifestUpdateInfo.trackInfo.length; i++) {\n                repInfo = manifestUpdateInfo.trackInfo[i];\n                if (repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {\n                    alreadyAdded = true;\n                    break;\n                }\n            }\n\n            if (!alreadyAdded) {\n                metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, r.id, r.index, r.adaptation.period.index,\n                        streamProcessor.getType(),r.presentationTimeOffset, r.startNumber, r.segmentInfoType);\n            }\n        }\n\n        if (isAllRepresentationsUpdated()) {\n            updating = false;\n            abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentRepresentation));\n            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {latency: currentRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});\n\n            repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics);\n\n            if (!repSwitch) {\n                addRepresentationSwitch();\n            }\n\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: data, currentRepresentation: currentRepresentation});\n        }\n    }\n\n    function onWallclockTimeUpdated(e) {\n        if (e.isDynamic) {\n            updateAvailabilityWindow(e.isDynamic);\n        }\n    }\n\n    function onBufferLevelUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) return;\n        addDVRMetric();\n    }\n\n    function onQualityChanged(e) {\n        if (e.mediaType !== streamProcessor.getType() || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;\n\n        if (e.oldQuality !== e.newQuality) {\n            currentRepresentation = getRepresentationForQuality(e.newQuality);\n            domStorage.setSavedBitrateSettings(e.mediaType, currentRepresentation.bandwidth);\n            addRepresentationSwitch();\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setConfig: setConfig,\n        getData: getData,\n        getDataIndex: getDataIndex,\n        isUpdating: isUpdating,\n        updateData: updateData,\n        getStreamProcessor: getStreamProcessor,\n        getCurrentRepresentation: getCurrentRepresentation,\n        getRepresentationForQuality: getRepresentationForQuality,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nRepresentationController.__dashjs_factory_name = 'RepresentationController';\nexport default FactoryMaker.getClassFactory(RepresentationController);\n"]}