{"version":3,"sources":["../../../../../src/dash/utils/TimelineSegmentsGetter.js"],"names":[],"mappings":"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","file":"TimelineSegmentsGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\nimport {getTimeBasedSegment} from './SegmentsUtils';\n\nfunction TimelineSegmentsGetter(config, isDynamic) {\n\n    let timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function getSegmentsFromTimeline(representation, requestedTime, index, availabilityUpperLimit) {\n\n        if (requestedTime === undefined) {\n            requestedTime = null;\n        }\n\n        var base = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate ||\n            representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\n        var timeline = base.SegmentTimeline;\n        var list = base.SegmentURL_asArray;\n        var isAvailableSegmentNumberCalculated = representation.availableSegmentsNumber > 0;\n\n        let maxSegmentsAhead;\n        if (availabilityUpperLimit) {\n            maxSegmentsAhead = availabilityUpperLimit;\n        } else {\n            maxSegmentsAhead = (index > -1 || requestedTime !== null) ? 10 : Infinity;\n        }\n\n        var time = 0;\n        var scaledTime = 0;\n        var availabilityIdx = -1;\n        var segments = [];\n        var requiredMediaTime = null;\n\n        var fragments,\n            frag,\n            i,\n            len,\n            j,\n            repeat,\n            repeatEndTime,\n            nextFrag,\n            hasEnoughSegments,\n            startIdx,\n            fTimescale;\n\n        var createSegment = function (s, i) {\n            var media = base.media;\n            var mediaRange = s.mediaRange;\n\n            if (list) {\n                media = list[i].media || '';\n                mediaRange = list[i].mediaRange;\n            }\n\n            return getTimeBasedSegment(\n                timelineConverter,\n                isDynamic,\n                representation,\n                time,\n                s.d,\n                fTimescale,\n                media,\n                mediaRange,\n                availabilityIdx);\n        };\n\n        fTimescale = representation.timescale;\n\n        fragments = timeline.S_asArray;\n\n        startIdx = index;\n\n        if (requestedTime !== null) {\n            requiredMediaTime = timelineConverter.calcMediaTimeFromPresentationTime(requestedTime, representation);\n        }\n\n        for (i = 0, len = fragments.length; i < len; i++) {\n            frag = fragments[i];\n            repeat = 0;\n            if (frag.hasOwnProperty('r')) {\n                repeat = frag.r;\n            }\n\n            //For a repeated S element, t belongs only to the first segment\n            if (frag.hasOwnProperty('t')) {\n                time = frag.t;\n                scaledTime = time / fTimescale;\n            }\n\n            //This is a special case: \"A negative value of the @r attribute of the S element indicates that the duration indicated in @d attribute repeats until the start of the next S element, the end of the Period or until the\n            // next MPD update.\"\n            if (repeat < 0) {\n                nextFrag = fragments[i + 1];\n\n                if (nextFrag && nextFrag.hasOwnProperty('t')) {\n                    repeatEndTime = nextFrag.t / fTimescale;\n                } else {\n                    var availabilityEnd = representation.segmentAvailabilityRange ? representation.segmentAvailabilityRange.end : (timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic).end);\n                    repeatEndTime = timelineConverter.calcMediaTimeFromPresentationTime(availabilityEnd, representation);\n                    representation.segmentDuration = frag.d / fTimescale;\n                }\n\n                repeat = Math.ceil((repeatEndTime - scaledTime) / (frag.d / fTimescale)) - 1;\n            }\n\n            // if we have enough segments in the list, but we have not calculated the total number of the segments yet we\n            // should continue the loop and calc the number. Once it is calculated, we can break the loop.\n            if (hasEnoughSegments) {\n                if (isAvailableSegmentNumberCalculated) break;\n                availabilityIdx += repeat + 1;\n                continue;\n            }\n\n            for (j = 0; j <= repeat; j++) {\n                availabilityIdx++;\n\n                if (segments.length > maxSegmentsAhead) {\n                    hasEnoughSegments = true;\n                    if (isAvailableSegmentNumberCalculated) break;\n                    continue;\n                }\n\n                if (requiredMediaTime !== null) {\n                    // In some cases when requiredMediaTime = actual end time of the last segment\n                    // it is possible that this time a bit exceeds the declared end time of the last segment.\n                    // in this case we still need to include the last segment in the segment list. to do this we\n                    // use a correction factor = 1.5. This number is used because the largest possible deviation is\n                    // is 50% of segment duration.\n                    if (scaledTime >= (requiredMediaTime - (frag.d / fTimescale) * 1.5)) {\n                        segments.push(createSegment(frag, availabilityIdx));\n                    }\n                } else if (availabilityIdx >= startIdx) {\n                    segments.push(createSegment(frag, availabilityIdx));\n                }\n\n                time += frag.d;\n                scaledTime = time / fTimescale;\n            }\n        }\n\n        if (!isAvailableSegmentNumberCalculated) {\n            representation.availableSegmentsNumber = availabilityIdx + 1;\n        }\n\n        return segments;\n    }\n\n    instance = {\n        getSegments: getSegmentsFromTimeline\n    };\n\n    return instance;\n}\n\nTimelineSegmentsGetter.__dashjs_factory_name = 'TimelineSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(TimelineSegmentsGetter);\nexport default factory;\n"]}