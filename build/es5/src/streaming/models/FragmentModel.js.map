{"version":3,"sources":["../../../../../src/streaming/models/FragmentModel.js"],"names":[],"mappings":"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","file":"FragmentModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport FragmentRequest from '../vo/FragmentRequest';\nimport Debug from '../../core/Debug';\n\nconst FRAGMENT_MODEL_LOADING = 'loading';\nconst FRAGMENT_MODEL_EXECUTED = 'executed';\nconst FRAGMENT_MODEL_CANCELED = 'canceled';\nconst FRAGMENT_MODEL_FAILED = 'failed';\n\nfunction FragmentModel(config) {\n\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n    const eventBus = EventBus(context).getInstance();\n    const metricsModel = config.metricsModel;\n    const fragmentLoader = config.fragmentLoader;\n\n    let instance,\n        streamProcessor,\n        executedRequests,\n        loadingRequests;\n\n    function setup() {\n        resetInitialSettings();\n        eventBus.on(Events.LOADING_COMPLETED, onLoadingCompleted, instance);\n\n    }\n\n    function setStreamProcessor(value) {\n        streamProcessor = value;\n    }\n\n    function getStreamProcessor() {\n        return streamProcessor;\n    }\n\n    function isFragmentLoaded(request) {\n        const isEqualComplete = function (req1, req2) {\n            return ((req1.action === FragmentRequest.ACTION_COMPLETE) && (req1.action === req2.action));\n        };\n\n        const isEqualMedia = function (req1, req2) {\n            return !isNaN(req1.index) && (req1.startTime === req2.startTime) && (req1.adaptationIndex === req2.adaptationIndex);\n        };\n\n        const isEqualInit = function (req1, req2) {\n            return isNaN(req1.index) && isNaN(req2.index) && (req1.quality === req2.quality);\n        };\n\n        const check = function (requests) {\n            let isLoaded = false;\n            requests.some(req => {\n                if (isEqualMedia(request, req) || isEqualInit(request, req) || isEqualComplete(request, req)) {\n                    isLoaded = true;\n                    return isLoaded;\n                }\n            });\n            return isLoaded;\n        };\n\n        if (!request) {\n            return false;\n        }\n\n        return check(executedRequests);\n    }\n\n    function isFragmentLoadedOrPending(request) {\n        let isLoaded = false;\n        let i = 0;\n        let req;\n\n        // First, check if the fragment has already been loaded\n        isLoaded = isFragmentLoaded(request);\n\n        // Then, check if the fragment is about to be loeaded\n        if (!isLoaded) {\n            for (i = 0; i < loadingRequests.length; i++) {\n                req = loadingRequests[i];\n                if ((request.url === req.url) && (request.startTime === req.startTime)) {\n                    isLoaded = true;\n                }\n            }\n        }\n\n        return isLoaded;\n    }\n\n    /**\n     *\n     * Gets an array of {@link FragmentRequest} objects\n     *\n     * @param {Object} filter The object with properties by which the method filters the requests to be returned.\n     *  the only mandatory property is state, which must be a value from\n     *  other properties should match the properties of {@link FragmentRequest}. E.g.:\n     *  getRequests({state: FragmentModel.FRAGMENT_MODEL_EXECUTED, quality: 0}) - returns\n     *  all the requests from executedRequests array where requests.quality = filter.quality\n     *\n     * @returns {Array}\n     * @memberof FragmentModel#\n     */\n    function getRequests(filter) {\n\n        const states = filter ? filter.state instanceof Array ? filter.state : [filter.state] : [];\n\n        let filteredRequests = [];\n        states.forEach(state => {\n            const requests = getRequestsForState(state);\n            filteredRequests = filteredRequests.concat(filterRequests(requests, filter));\n        });\n\n        return filteredRequests;\n    }\n\n    function removeExecutedRequestsBeforeTime(time) {\n        executedRequests = executedRequests.filter(req => isNaN(req.startTime) || req.startTime >= time);\n    }\n\n    function abortRequests() {\n        fragmentLoader.abort();\n        loadingRequests = [];\n    }\n\n    function executeRequest(request) {\n\n        switch (request.action) {\n            case FragmentRequest.ACTION_COMPLETE:\n                executedRequests.push(request);\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_EXECUTED);\n                eventBus.trigger(Events.STREAM_COMPLETED, {\n                    request: request,\n                    fragmentModel: this\n                });\n                break;\n            case FragmentRequest.ACTION_DOWNLOAD:\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_LOADING);\n                loadingRequests.push(request);\n                loadCurrentFragment(request);\n                break;\n            default:\n                log('Unknown request action.');\n        }\n    }\n\n    function loadCurrentFragment(request) {\n        eventBus.trigger(Events.FRAGMENT_LOADING_STARTED, {\n            sender: instance,\n            request: request\n        });\n        fragmentLoader.load(request);\n    }\n\n    function getRequestForTime(arr, time, threshold) {\n        // loop through the executed requests and pick the one for which the playback interval matches the given time\n        const lastIdx = arr.length - 1;\n        for (let i = lastIdx; i >= 0; i--) {\n            const req = arr[i];\n            const start = req.startTime;\n            const end = start + req.duration;\n            threshold = threshold !== undefined ? threshold : (req.duration / 2);\n            if ((!isNaN(start) && !isNaN(end) && ((time + threshold) >= start) && ((time - threshold) < end)) || (isNaN(start) && isNaN(time))) {\n                return req;\n            }\n        }\n        return null;\n    }\n\n    function filterRequests(arr, filter) {\n        // for time use a specific filtration function\n        if (filter.hasOwnProperty('time')) {\n            return [getRequestForTime(arr, filter.time, filter.threshold)];\n        }\n\n        return arr.filter(request => {\n            for (const prop in filter) {\n                if (prop === 'state') continue;\n                if (filter.hasOwnProperty(prop) && request[prop] != filter[prop]) return false;\n            }\n\n            return true;\n        });\n    }\n\n    function getRequestsForState(state) {\n\n        let requests;\n        switch (state) {\n            case FRAGMENT_MODEL_LOADING:\n                requests = loadingRequests;\n                break;\n            case FRAGMENT_MODEL_EXECUTED:\n                requests = executedRequests;\n                break;\n            default:\n                requests = [];\n        }\n        return requests;\n    }\n\n    function addSchedulingInfoMetrics(request, state) {\n\n        metricsModel.addSchedulingInfo(\n            request.mediaType,\n            new Date(),\n            request.type,\n            request.startTime,\n            request.availabilityStartTime,\n            request.duration,\n            request.quality,\n            request.range,\n            state);\n\n        metricsModel.addRequestsQueue(request.mediaType, loadingRequests, executedRequests);\n    }\n\n    function onLoadingCompleted(e) {\n        if (e.sender !== fragmentLoader) return;\n\n        loadingRequests.splice(loadingRequests.indexOf(e.request), 1);\n\n        if (e.response && !e.error) {\n            executedRequests.push(e.request);\n        }\n\n        addSchedulingInfoMetrics(e.request, e.error ? FRAGMENT_MODEL_FAILED : FRAGMENT_MODEL_EXECUTED);\n\n        eventBus.trigger(Events.FRAGMENT_LOADING_COMPLETED, {\n            request: e.request,\n            response: e.response,\n            error: e.error,\n            sender: this\n        });\n    }\n\n    function resetInitialSettings() {\n        executedRequests = [];\n        loadingRequests = [];\n    }\n\n    function reset() {\n        eventBus.off(Events.LOADING_COMPLETED, onLoadingCompleted, this);\n\n        if (fragmentLoader) {\n            fragmentLoader.reset();\n        }\n        resetInitialSettings();\n    }\n\n    instance = {\n        setStreamProcessor: setStreamProcessor,\n        getStreamProcessor: getStreamProcessor,\n        getRequests: getRequests,\n        isFragmentLoaded: isFragmentLoaded,\n        isFragmentLoadedOrPending: isFragmentLoadedOrPending,\n        removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,\n        abortRequests: abortRequests,\n        executeRequest: executeRequest,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nFragmentModel.__dashjs_factory_name = 'FragmentModel';\nconst factory = FactoryMaker.getClassFactory(FragmentModel);\nfactory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING;\nfactory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED;\nfactory.FRAGMENT_MODEL_CANCELED = FRAGMENT_MODEL_CANCELED;\nfactory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED;\nFactoryMaker.updateClassFactory(FragmentModel.__dashjs_factory_name, factory);\nexport default factory;\n"]}