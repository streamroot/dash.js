{"version":3,"sources":["../../../../../src/streaming/utils/BaseURLSelector.js"],"names":[],"mappings":"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","file":"BaseURLSelector.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport DashManifestModel from '../../dash/models/DashManifestModel';\nimport BlacklistController from '../controllers/BlacklistController';\nimport DVBSelector from '../rules/baseUrlResolution/DVBSelector';\nimport BasicSelector from '../rules/baseUrlResolution/BasicSelector';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nconst URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 1;\nconst URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = 'Failed to resolve a valid URL';\n\nfunction BaseURLSelector() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const dashManifestModel = DashManifestModel(context).getInstance();\n\n    let instance,\n        serviceLocationBlacklistController,\n        basicSelector,\n        dvbSelector,\n        selector;\n\n    function setup() {\n        serviceLocationBlacklistController = BlacklistController(context).create({\n            updateEventName:        Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            loadFailedEventName:    Events.FRAGMENT_LOADING_COMPLETED\n        });\n\n        basicSelector = BasicSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        dvbSelector = DVBSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        selector = basicSelector;\n    }\n\n    function setConfig(config) {\n        if (config.selector) {\n            selector = config.selector;\n        }\n    }\n\n    function chooseSelectorFromManifest(manifest) {\n        if (dashManifestModel.getIsDVB(manifest)) {\n            selector = dvbSelector;\n        } else {\n            selector = basicSelector;\n        }\n    }\n\n    function select(data) {\n        const baseUrls = data.baseUrls;\n        const selectedIdx = data.selectedIdx;\n\n        // Once a random selection has been carried out amongst a group of BaseURLs with the same\n        // @priority attribute value, then that choice should be re-used if the selection needs to be made again\n        // unless the blacklist has been modified or the available BaseURLs have changed.\n        if (!isNaN(selectedIdx)) {\n            return baseUrls[selectedIdx];\n        }\n\n        let selectedBaseUrl = selector.select(baseUrls);\n\n        if (!selectedBaseUrl) {\n            eventBus.trigger(\n                Events.URL_RESOLUTION_FAILED,\n                {\n                    error: new Error(\n                        URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE,\n                        URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE\n                    )\n                }\n            );\n\n            return;\n        }\n\n        data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);\n\n        return selectedBaseUrl;\n    }\n\n    function reset() {\n        serviceLocationBlacklistController.reset();\n    }\n\n    instance = {\n        chooseSelectorFromManifest: chooseSelectorFromManifest,\n        select: select,\n        reset: reset,\n        setConfig: setConfig\n    };\n\n    setup();\n\n    return instance;\n}\n\nBaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';\nlet factory = FactoryMaker.getClassFactory(BaseURLSelector);\nfactory.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE;\nfactory.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE;\nexport default factory;\n"]}