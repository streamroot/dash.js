{"version":3,"sources":["../../../../../src/streaming/utils/TTMLParser.js"],"names":[],"mappings":"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","file":"TTMLParser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport { fromXML, generateISD } from 'imsc';\n\nfunction TTMLParser() {\n\n    let context = this.context;\n    let log = Debug(context).getInstance().log;\n\n    /*\n     * This TTML parser follows \"EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380\" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.\n     * */\n    let instance;\n\n    let cueCounter = 0; // Used to give every cue a unique ID.\n\n    function getCueID() {\n        let id = 'cue_TTML_' + cueCounter;\n        cueCounter++;\n        return id;\n    }\n\n\n    /**\n     * Parse the raw data and process it to return the HTML element representing the cue.\n     * Return the region to be processed and controlled (hide/show) by the caption controller.\n     * @param {string} data - raw data received from the TextSourceBuffer\n     * @param {number} offsetTime - offset time to apply to cue time\n     * @param {integer} startTimeSegment - startTime for the current segment\n     * @param {integer} endTimeSegment - endTime for the current segment\n     * @param {Array} images - images array referenced by subs MP4 box\n     */\n    function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {\n        let i,\n            j;\n\n        let errorMsg = '';\n        let captionArray = [];\n        let startTime,\n            endTime;\n\n        let embeddedImages = {};\n        let currentImageId = '';\n        let accumulated_image_data = '';\n        let metadataHandler = {\n\n            onOpenTag: function (ns, name, attrs) {\n                if (name === 'image' && ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt') {\n                    if (!attrs[' imagetype'] || attrs[' imagetype'].value !== 'PNG') {\n                        log('Warning: smpte-tt imagetype != PNG. Discarded');\n                        return;\n                    }\n                    currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;\n                }\n            },\n\n            onCloseTag: function () {\n                if (currentImageId) {\n                    embeddedImages[currentImageId] = accumulated_image_data.trim();\n                }\n                accumulated_image_data = '';\n                currentImageId = '';\n            },\n\n            onText: function (contents) {\n                if (currentImageId) {\n                    accumulated_image_data = accumulated_image_data + contents;\n                }\n            }\n        };\n\n        if (!data) {\n            errorMsg = 'no ttml data to parse';\n            throw new Error(errorMsg);\n        }\n\n        let imsc1doc = fromXML(data, function (msg) {\n            errorMsg = msg;\n        },\n            metadataHandler);\n        let mediaTimeEvents = imsc1doc.getMediaTimeEvents();\n\n        for (i = 0; i < mediaTimeEvents.length; i++) {\n            let isd = generateISD(imsc1doc, mediaTimeEvents[i], function (error) {\n                errorMsg = error;\n            });\n            for (j = 0; j < isd.contents.length; j++) {\n                if (isd.contents[j].contents.length >= 1) {\n                    //be sure that mediaTimeEvents values are in the mp4 segment time ranges.\n                    startTime = (mediaTimeEvents[i] + offsetTime) < startTimeSegment ? startTimeSegment : (mediaTimeEvents[i] + offsetTime);\n                    endTime = (mediaTimeEvents[i + 1] + offsetTime) > endTimeSegment ? endTimeSegment : (mediaTimeEvents[i + 1] + offsetTime);\n\n                    captionArray.push({\n                        start: startTime,\n                        end: endTime,\n                        type: 'html',\n                        cueID: getCueID(),\n                        isd: isd,\n                        images: images,\n                        embeddedImages: embeddedImages\n                    });\n                }\n            }\n        }\n\n        if (errorMsg !== '') {\n            log(errorMsg);\n        }\n\n        if (captionArray.length > 0) {\n            return captionArray;\n        } else { // This seems too strong given that there are segments with no TTML subtitles\n            throw new Error(errorMsg);\n        }\n    }\n\n    function setup() {\n    }\n\n    instance = {\n        parse: parse\n    };\n\n    setup();\n    return instance;\n}\nTTMLParser.__dashjs_factory_name = 'TTMLParser';\nexport\ndefault FactoryMaker.getSingletonFactory(TTMLParser);\n"]}