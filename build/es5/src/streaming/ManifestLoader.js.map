{"version":3,"sources":["../../../../src/streaming/ManifestLoader.js"],"names":[],"mappings":"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","file":"ManifestLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport XlinkController from './controllers/XlinkController';\nimport XHRLoader from './XHRLoader';\nimport URLUtils from './utils/URLUtils';\nimport TextRequest from './vo/TextRequest';\nimport DashJSError from './vo/DashJSError';\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DashParser from '../dash/parser/DashParser';\nimport Debug from '../core/Debug';\n\nconst MANIFEST_LOADER_ERROR_PARSING_FAILURE = 1;\nconst MANIFEST_LOADER_ERROR_LOADING_FAILURE = 2;\nconst MANIFEST_LOADER_MESSAGE_PARSING_FAILURE = 'parsing failed';\n\nfunction ManifestLoader(config) {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n    const debug = Debug(context).getInstance();\n    const log = debug.log;\n\n    let instance,\n        xhrLoader,\n        xlinkController,\n        parser;\n    let mssHandler = config.mssHandler;\n    let errHandler = config.errHandler;\n\n    function setup() {\n        eventBus.on(Events.XLINK_READY, onXlinkReady, instance);\n\n        xhrLoader = XHRLoader(context).create({\n            errHandler: errHandler,\n            metricsModel: config.metricsModel,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier\n        });\n\n        xlinkController = XlinkController(context).create({\n            errHandler: errHandler,\n            metricsModel: config.metricsModel,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier\n        });\n\n        parser = null;\n    }\n\n    function onXlinkReady(event) {\n        eventBus.trigger(\n            Events.INTERNAL_MANIFEST_LOADED, {\n                manifest: event.manifest\n            }\n        );\n    }\n\n    function createParser(data) {\n        let parser = null;\n        // Analyze manifest content to detect protocol and select appropriate parser\n        if (data.indexOf('SmoothStreamingMedia') > -1) {\n            //do some business to transform it into a Dash Manifest\n            if (mssHandler) {\n                parser = mssHandler.createMssParser();\n                mssHandler.registerEvents();\n            }else {\n                errHandler.manifestError('manifest type unsupported', 'createParser');\n            }\n            return parser;\n        } else if (data.indexOf('MPD') > -1) {\n            return DashParser(context).create({\n                errorHandler: errHandler\n            });\n        } else {\n            return parser;\n        }\n    }\n\n    function load(url) {\n        const request = new TextRequest(url, HTTPRequest.MPD_TYPE);\n\n        xhrLoader.load({\n            request: request,\n            success: function (data, textStatus, xhr) {\n                let actualUrl,\n                    baseUri;\n\n                // Handle redirects for the MPD - as per RFC3986 Section 5.1.3\n                // also handily resolves relative MPD URLs to absolute\n                if (xhr.responseURL && xhr.responseURL !== url) {\n                    baseUri = urlUtils.parseBaseUrl(xhr.responseURL);\n                    actualUrl = xhr.responseURL;\n                } else {\n                    // usually this case will be caught and resolved by\n                    // xhr.responseURL above but it is not available for IE11 and Edge/12 and Edge/13\n                    // baseUri must be absolute for BaseURL resolution later\n                    if (urlUtils.isRelative(url)) {\n                        url = urlUtils.resolve(url, window.location.href);\n                    }\n\n                    baseUri = urlUtils.parseBaseUrl(url);\n                }\n\n                // Create parser according to manifest type\n                if (parser === null) {\n                    parser = createParser(data);\n                }\n\n                if (parser === null) {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                MANIFEST_LOADER_ERROR_PARSING_FAILURE,\n                                `Failed detecting manifest type: ${url}`\n                            )\n                        }\n                    );\n                    return;\n                }\n\n                const manifest = parser.parse(data, xlinkController);\n\n                if (manifest) {\n                    manifest.url = actualUrl || url;\n\n                    // URL from which the MPD was originally retrieved (MPD updates will not change this value)\n                    if (!manifest.originalUrl) {\n                        manifest.originalUrl = manifest.url;\n                    }\n\n                    // In the following, we only use the first Location entry even if many are available\n                    // Compare with ManifestUpdater/DashManifestModel\n                    if (manifest.hasOwnProperty(Constants.LOCATION)) {\n                        baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);\n                        log('BaseURI set by Location to: ' + baseUri);\n                    }\n\n                    manifest.baseUri = baseUri;\n                    manifest.loadedTime = new Date();\n                    xlinkController.resolveManifestOnLoad(manifest);\n                } else {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                MANIFEST_LOADER_ERROR_PARSING_FAILURE,\n                                MANIFEST_LOADER_MESSAGE_PARSING_FAILURE\n                            )\n                        }\n                    );\n                }\n            },\n            error: function (xhr, statusText, errorText) {\n                eventBus.trigger(\n                    Events.INTERNAL_MANIFEST_LOADED, {\n                        manifest: null,\n                        error: new DashJSError(\n                            MANIFEST_LOADER_ERROR_LOADING_FAILURE,\n                            `Failed loading manifest: ${url}, ${errorText}`\n                        )\n                    }\n                );\n            }\n        });\n    }\n\n    function reset() {\n        eventBus.off(Events.XLINK_READY, onXlinkReady, instance);\n\n        if (xlinkController) {\n            xlinkController.reset();\n            xlinkController = null;\n        }\n\n        if (xhrLoader) {\n            xhrLoader.abort();\n            xhrLoader = null;\n        }\n\n        if (mssHandler) {\n            mssHandler.reset();\n        }\n    }\n\n    instance = {\n        load: load,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nManifestLoader.__dashjs_factory_name = 'ManifestLoader';\n\nconst factory = FactoryMaker.getClassFactory(ManifestLoader);\nfactory.MANIFEST_LOADER_ERROR_PARSING_FAILURE = MANIFEST_LOADER_ERROR_PARSING_FAILURE;\nfactory.MANIFEST_LOADER_ERROR_LOADING_FAILURE = MANIFEST_LOADER_ERROR_LOADING_FAILURE;\nFactoryMaker.updateClassFactory(ManifestLoader.__dashjs_factory_name, factory);\nexport default factory;\n"]}