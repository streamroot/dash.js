{"version":3,"sources":["../../../../../../src/streaming/metrics/metrics/MetricsHandlerFactory.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA+ByB,4BAA4B;;;;0CAC7B,+BAA+B;;;;wCACjC,6BAA6B;;;;uCAC9B,4BAA4B;;;;4CAChB,iCAAiC;;;;AAElE,SAAS,qBAAqB,CAAC,MAAM,EAAE;;AAEnC,QAAI,QAAQ,YAAA,CAAC;AACb,QAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;;;AAGrB,QAAI,QAAQ,GAAG,+CAA+C,CAAC;;AAE/D,QAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC3B,QAAI,oBAAoB,GAAG;AACvB,mBAAW,yCAAgB;AAC3B,iBAAS,uCAAgB;AACzB,gBAAQ,sCAAgB;AACxB,gBAAQ,2CAA4B;AACpC,qBAAa,2CAAuB;AACpC,eAAO,2CAA6B;KACvC,CAAC;;AAEF,aAAS,MAAM,CAAC,QAAQ,EAAE,mBAAmB,EAAE;AAC3C,YAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACvC,YAAI,OAAO,CAAC;;AAEZ,YAAI,CAAC,OAAO,EAAE;AACV,mBAAO;SACV;;AAED,YAAI;AACA,mBAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;AACvD,wBAAQ,EAAE,MAAM,CAAC,QAAQ;aAC5B,CAAC,CAAC;;AAEH,mBAAO,CAAC,UAAU,CACd,OAAO,CAAC,CAAC,CAAC,EACV,mBAAmB,EACnB,OAAO,CAAC,CAAC,CAAC,EACV,OAAO,CAAC,CAAC,CAAC,CACb,CAAC;SACL,CAAC,OAAO,CAAC,EAAE;AACR,mBAAO,GAAG,IAAI,CAAC;;AAEf,eAAG,+DAA6D,OAAO,CAAC,CAAC,CAAC,mBAAc,OAAO,CAAC,CAAC,CAAC,UAAK,OAAO,CAAC,CAAC,CAAC,UAAK,CAAC,CAAC,OAAO,OAAI,CAAC;SACvI;;AAED,eAAO,OAAO,CAAC;KAClB;;AAED,aAAS,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE;AAC5B,4BAAoB,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;KACvC;;AAED,aAAS,UAAU,CAAC,GAAG,EAAE;AACrB,eAAO,oBAAoB,CAAC,GAAG,CAAC,CAAC;KACpC;;AAED,YAAQ,GAAG;AACP,cAAM,EAAM,MAAM;AAClB,gBAAQ,EAAI,QAAQ;AACpB,kBAAU,EAAE,UAAU;KACzB,CAAC;;AAEF,WAAO,QAAQ,CAAC;CACnB;;AAED,qBAAqB,CAAC,qBAAqB,GAAG,uBAAuB,CAAC;qBACvD,8BAAa,mBAAmB,CAAC,qBAAqB,CAAC","file":"MetricsHandlerFactory.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport BufferLevel from './handlers/BufferLevelHandler';\nimport DVBErrors from './handlers/DVBErrorsHandler';\nimport HttpList from './handlers/HttpListHandler';\nimport GenericMetricHandler from './handlers/GenericMetricHandler';\n\nfunction MetricsHandlerFactory(config) {\n\n    let instance;\n    let log = config.log;\n\n    // group 1: key, [group 3: n [, group 5: type]]\n    let keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\n\n    let context = this.context;\n    let knownFactoryProducts = {\n        BufferLevel:    BufferLevel,\n        DVBErrors:      DVBErrors,\n        HttpList:       HttpList,\n        PlayList:       GenericMetricHandler,\n        RepSwitchList:  GenericMetricHandler,\n        TcpList:        GenericMetricHandler\n    };\n\n    function create(listType, reportingController) {\n        var matches = listType.match(keyRegex);\n        var handler;\n\n        if (!matches) {\n            return;\n        }\n\n        try {\n            handler = knownFactoryProducts[matches[1]](context).create({\n                eventBus: config.eventBus\n            });\n\n            handler.initialize(\n                matches[1],\n                reportingController,\n                matches[3],\n                matches[5]\n            );\n        } catch (e) {\n            handler = null;\n\n            log(`MetricsHandlerFactory: Could not create handler for type ${matches[1]} with args ${matches[3]}, ${matches[5]} (${e.message})`);\n        }\n\n        return handler;\n    }\n\n    function register(key, handler) {\n        knownFactoryProducts[key] = handler;\n    }\n\n    function unregister(key) {\n        delete knownFactoryProducts[key];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\nexport default FactoryMaker.getSingletonFactory(MetricsHandlerFactory);\n"]}