{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsCollectionController.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCA+B8B,qBAAqB;;;;oCACvB,0BAA0B;;;;gCAC7B,4BAA4B;;;;sCAClB,2BAA2B;;;;gCAC3C,6BAA6B;;;;AAEhD,SAAS,2BAA2B,CAAC,MAAM,EAAE;;AAEzC,QAAI,kBAAkB,GAAG,EAAE,CAAC;;AAE5B,QAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC3B,QAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;;AAE/B,aAAS,MAAM,CAAC,CAAC,EAAE;AACf,YAAI,CAAC,CAAC,KAAK,EAAE;AACT,mBAAO;SACV;;;AAGD,YAAI,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;;AAE1D,YAAM,OAAO,GAAG,uCAAgB,OAAO,CAAC,CAAC,WAAW,CAAC;AACjD,6BAAiB,EAAE,MAAM,CAAC,iBAAiB;SAC9C,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;;AAE1B,eAAO,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AACjB,gBAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;;AAE9B,gBAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AACzC,oBAAI;AACA,wBAAI,UAAU,GAAG,oCAAkB,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC3D,8BAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACzB,sCAAkB,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;iBACxC,CAAC,OAAO,CAAC,EAAE;;iBAEX;aACJ,MAAM;;AAEH,uCAAmB,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBACtC;SACJ,CAAC,CAAC;;;AAGH,2BAAmB,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AAC7B,8BAAkB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AAC9B,mBAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;SAChC,CAAC,CAAC;;AAEH,gBAAQ,CAAC,OAAO,CACZ,oCAAuB,+BAA+B,CACzD,CAAC;KACL;;AAED,aAAS,KAAK,GAAG;AACb,cAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AAC3C,8BAAkB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;SACnC,CAAC,CAAC;;AAEH,0BAAkB,GAAG,EAAE,CAAC;KAC3B;;AAED,aAAS,KAAK,GAAG;;AAGb,gBAAQ,CAAC,EAAE,CAAC,8BAAO,gBAAgB,EAAE,MAAM,CAAC,CAAC;AAC7C,gBAAQ,CAAC,EAAE,CAAC,8BAAO,wBAAwB,EAAE,KAAK,CAAC,CAAC;KACvD;;AAED,SAAK,EAAE,CAAC;;;AAGR,WAAO,EAAE,CAAC;CACb;;AAED,2BAA2B,CAAC,qBAAqB,GAAG,6BAA6B,CAAC;qBACnE,8BAAa,eAAe,CAAC,2BAA2B,CAAC","file":"MetricsCollectionController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsController from './MetricsController';\nimport ManifestParsing from '../utils/ManifestParsing';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\nimport Events from '../../../core/events/Events';\n\nfunction MetricsCollectionController(config) {\n\n    let metricsControllers = {};\n\n    let context = this.context;\n    let eventBus = config.eventBus;\n\n    function update(e) {\n        if (e.error) {\n            return;\n        }\n\n        // start by assuming all existing controllers need removing\n        let controllersToRemove = Object.keys(metricsControllers);\n\n        const metrics = ManifestParsing(context).getInstance({\n            dashManifestModel: config.dashManifestModel\n        }).getMetrics(e.manifest);\n\n        metrics.forEach(m => {\n            const key = JSON.stringify(m);\n\n            if (!metricsControllers.hasOwnProperty(key)) {\n                try {\n                    var controller = MetricsController(context).create(config);\n                    controller.initialize(m);\n                    metricsControllers[key] = controller;\n                } catch (e) {\n                    // fail quietly\n                }\n            } else {\n                // we still need this controller - delete from removal list\n                controllersToRemove.splice(key, 1);\n            }\n        });\n\n        // now remove the unwanted controllers\n        controllersToRemove.forEach(c => {\n            metricsControllers[c].reset();\n            delete metricsControllers[c];\n        });\n\n        eventBus.trigger(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE\n        );\n    }\n\n    function reset() {\n        Object.keys(metricsControllers).forEach(key => {\n            metricsControllers[key].reset();\n        });\n\n        metricsControllers = {};\n    }\n\n    function setup() {\n\n\n        eventBus.on(Events.MANIFEST_UPDATED, update);\n        eventBus.on(Events.STREAM_TEARDOWN_COMPLETE, reset);\n    }\n\n    setup();\n\n    // don't export any actual methods\n    return {};\n}\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexport default FactoryMaker.getClassFactory(MetricsCollectionController);\n"]}