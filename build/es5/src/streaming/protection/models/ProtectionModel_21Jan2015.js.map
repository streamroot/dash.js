{"version":3,"sources":["../../../../../../src/streaming/protection/models/ProtectionModel_21Jan2015.js"],"names":[],"mappings":"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","file":"ProtectionModel_21Jan2015.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    let log = config.log;\n\n    var instance,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        var numSessions = sessions.length;\n        var session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            var done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(Events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(Events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (var i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(Events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        var retVal = [];\n        for (var i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n            eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED);\n\n        }).catch(function () {\n            eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            videoElement.setMediaKeys(null);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            log('DRM: License server certificate successfully updated.');\n            eventBus.trigger(Events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(Events.SERVER_CERTIFICATE_UPDATED, {error: 'Error updating server certificate -- ' + error.name});\n        });\n    }\n\n    function createKeySession(initData, sessionType) {\n\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        var session = mediaKeys.createSession(sessionType);\n        var sessionToken = createSessionToken(session, initData, sessionType);\n\n        // Generate initial key request\n        session.generateRequest('cenc', initData).then(function () {\n            log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Error generating key request -- ' + error.name});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        var session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(Events.KEY_ERROR, {data: new KeyError(sessionToken, 'Error sending update() message! ' + error.name)});\n        });\n    }\n\n    function loadKeySession(sessionID) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        var session = mediaKeys.createSession();\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                var sessionToken = createSessionToken(session);\n                log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(Events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session! Invalid Session ID (' + sessionID + ')'});\n            }\n        }).catch(function (error) {\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session (' + sessionID + ')! ' + error.name});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        var session = sessionToken.session;\n\n        session.remove().then(function () {\n            log('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(Events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(Events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(Events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n        (function (i) {\n            var keySystem = ksConfigurations[i].ks;\n            var configs = ksConfigurations[i].configs;\n            navigator.requestMediaKeySystemAccess(keySystem.systemString, configs).then(function (mediaKeySystemAccess) {\n\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                var configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                var keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function () {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied!'});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        var session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case 'encrypted':\n                        if (event.initData) {\n                            var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(Events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (var i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType) {\n\n        var token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(Events.KEY_STATUSES_CHANGED, {data: this});\n                        break;\n\n                    case 'message':\n                        var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(Events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            log('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(Events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default FactoryMaker.getClassFactory(ProtectionModel_21Jan2015);"]}