{"version":3,"sources":["../../../../src/streaming/StreamProcessor.js"],"names":[],"mappings":"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","file":"StreamProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport LiveEdgeFinder from './utils/LiveEdgeFinder';\nimport BufferController from './controllers/BufferController';\nimport TextBufferController from './text/TextBufferController';\nimport ScheduleController from './controllers/ScheduleController';\nimport RepresentationController from '../dash/controllers/RepresentationController';\nimport FactoryMaker from '../core/FactoryMaker';\n\nimport DashHandler from '../dash/DashHandler';\n\nfunction StreamProcessor(config) {\n\n    let context = this.context;\n\n    let indexHandler;\n    let type = config.type;\n    let errHandler = config.errHandler;\n    let mimeType = config.mimeType;\n    let timelineConverter = config.timelineConverter;\n    let adapter = config.adapter;\n    let manifestModel = config.manifestModel;\n    let mediaPlayerModel = config.mediaPlayerModel;\n    let stream = config.stream;\n    let abrController = config.abrController;\n    let playbackController = config.playbackController;\n    let streamController = config.streamController;\n    let mediaController = config.mediaController;\n    let textController = config.textController;\n    let sourceBufferController = config.sourceBufferController;\n    let domStorage = config.domStorage;\n    let metricsModel = config.metricsModel;\n    let dashMetrics = config.dashMetrics;\n    let dashManifestModel = config.dashManifestModel;\n\n    let instance,\n        mediaInfo,\n        mediaInfoArr,\n        bufferController,\n        scheduleController,\n        liveEdgeFinder,\n        representationController,\n        fragmentModel,\n        spExternalControllers;\n\n    function setup() {\n        liveEdgeFinder = LiveEdgeFinder(context).create({\n            timelineConverter: timelineConverter,\n            streamProcessor: instance\n        });\n        resetInitialSettings();\n    }\n\n    function initialize(mediaSource) {\n\n        indexHandler = DashHandler(context).create({\n            mimeType: mimeType,\n            timelineConverter: timelineConverter,\n            dashMetrics: dashMetrics,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            baseURLController: config.baseURLController,\n            errHandler: errHandler\n        });\n\n        // initialize controllers\n        indexHandler.initialize(this);\n        abrController.registerStreamType(type, this);\n\n        fragmentModel = stream.getFragmentController().getModel(type);\n        fragmentModel.setStreamProcessor(instance);\n\n        bufferController = createBufferControllerForType(type);\n        scheduleController = ScheduleController(context).create({\n            type: type,\n            metricsModel: metricsModel,\n            adapter: adapter,\n            dashMetrics: dashMetrics,\n            dashManifestModel: dashManifestModel,\n            timelineConverter: timelineConverter,\n            mediaPlayerModel: mediaPlayerModel,\n            abrController: abrController,\n            playbackController: playbackController,\n            mediaController: mediaController,\n            streamController: streamController,\n            textController: textController,\n            sourceBufferController: sourceBufferController,\n            streamProcessor: this\n        });\n\n        representationController = RepresentationController(context).create();\n\n        representationController.setConfig({\n            abrController: abrController,\n            domStorage: domStorage,\n            metricsModel: metricsModel,\n            dashMetrics: dashMetrics,\n            dashManifestModel: dashManifestModel,\n            manifestModel: manifestModel,\n            playbackController: playbackController,\n            timelineConverter: timelineConverter,\n            streamProcessor: this\n        });\n        bufferController.initialize(mediaSource);\n        scheduleController.initialize();\n        representationController.initialize();\n    }\n\n    function registerExternalController(controller) {\n        spExternalControllers.push(controller);\n    }\n\n    function unregisterExternalController(controller) {\n        var index = spExternalControllers.indexOf(controller);\n\n        if (index !== -1) {\n            spExternalControllers.splice(index, 1);\n        }\n    }\n\n    function unregisterAllExternalController() {\n        spExternalControllers = [];\n    }\n\n    function resetInitialSettings() {\n        mediaInfoArr = [];\n        mediaInfo = null;\n        unregisterAllExternalController();\n    }\n\n    function reset(errored) {\n\n        indexHandler.reset();\n\n        if (bufferController) {\n            bufferController.reset(errored);\n            bufferController = null;\n        }\n\n        if (scheduleController) {\n            scheduleController.reset();\n            scheduleController = null;\n        }\n\n        if (representationController) {\n            representationController.reset();\n            representationController = null;\n        }\n\n        spExternalControllers.forEach(function (controller) {\n            controller.reset();\n        });\n\n        resetInitialSettings();\n        type = null;\n        stream = null;\n        liveEdgeFinder.reset();\n    }\n\n    function isUpdating() {\n        return representationController ? representationController.isUpdating() : false;\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function getRepresentationController() {\n        return representationController;\n    }\n\n    function getIndexHandler() {\n        return indexHandler;\n    }\n\n    function getFragmentController() {\n        return stream ? stream.getFragmentController() : null;\n    }\n\n    function getBuffer() {\n        return bufferController.getBuffer();\n    }\n\n    function setBuffer(buffer) {\n        bufferController.setBuffer(buffer);\n    }\n\n    function getBufferController() {\n        return bufferController;\n    }\n\n    function getFragmentModel() {\n        return fragmentModel;\n    }\n\n    function getLiveEdgeFinder() {\n        return liveEdgeFinder;\n    }\n\n    function getStreamInfo() {\n        return stream ? stream.getStreamInfo() : null;\n    }\n\n    function getEventController() {\n        return stream ? stream.getEventController() : null;\n    }\n\n    function updateMediaInfo(newMediaInfo) {\n        if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || (newMediaInfo.type === mediaInfo.type))) {\n            mediaInfo = newMediaInfo;\n        }\n        if (mediaInfoArr.indexOf(newMediaInfo) === -1) {\n            mediaInfoArr.push(newMediaInfo);\n        }\n        adapter.updateData(this);\n    }\n\n    function getMediaInfoArr() {\n        return mediaInfoArr;\n    }\n\n    function getMediaInfo() {\n        return mediaInfo;\n    }\n\n    function getMediaSource() {\n        return bufferController.getMediaSource();\n    }\n\n    function getScheduleController() {\n        return scheduleController;\n    }\n\n    function getCurrentRepresentationInfo() {\n        return adapter.getCurrentRepresentationInfo(representationController);\n    }\n\n    function getRepresentationInfoForQuality(quality) {\n        return adapter.getRepresentationInfoForQuality(representationController, quality);\n    }\n\n    function isBufferingCompleted() {\n        if (bufferController) {\n            return bufferController.getIsBufferingCompleted();\n        }\n\n        return false;\n    }\n\n    function getBufferLevel() {\n        return bufferController.getBufferLevel();\n    }\n\n    function switchInitData(representationId) {\n        if (bufferController) {\n            bufferController.switchInitData(getStreamInfo().id, representationId);\n        }\n    }\n\n    function createBuffer() {\n        return (bufferController.getBuffer() || bufferController.createBuffer(mediaInfo));\n    }\n\n    function switchTrackAsked() {\n        scheduleController.switchTrackAsked();\n    }\n\n    function createBufferControllerForType(type) {\n        let controller = null;\n\n        if (type === Constants.VIDEO || type === Constants.AUDIO) {\n            controller = BufferController(context).create({\n                type: type,\n                metricsModel: metricsModel,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                sourceBufferController: sourceBufferController,\n                errHandler: errHandler,\n                streamController: streamController,\n                mediaController: mediaController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                streamProcessor: instance\n            });\n        } else {\n            controller = TextBufferController(context).create({\n                type: type,\n                metricsModel: metricsModel,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                sourceBufferController: sourceBufferController,\n                errHandler: errHandler,\n                streamController: streamController,\n                mediaController: mediaController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                streamProcessor: instance\n            });\n        }\n\n        return controller;\n    }\n\n    instance = {\n        initialize: initialize,\n        isUpdating: isUpdating,\n        getType: getType,\n        getBufferController: getBufferController,\n        getFragmentModel: getFragmentModel,\n        getScheduleController: getScheduleController,\n        getLiveEdgeFinder: getLiveEdgeFinder,\n        getEventController: getEventController,\n        getFragmentController: getFragmentController,\n        getRepresentationController: getRepresentationController,\n        getIndexHandler: getIndexHandler,\n        getCurrentRepresentationInfo: getCurrentRepresentationInfo,\n        getRepresentationInfoForQuality: getRepresentationInfoForQuality,\n        getBufferLevel: getBufferLevel,\n        switchInitData: switchInitData,\n        isBufferingCompleted: isBufferingCompleted,\n        createBuffer: createBuffer,\n        getStreamInfo: getStreamInfo,\n        updateMediaInfo: updateMediaInfo,\n        switchTrackAsked: switchTrackAsked,\n        getMediaInfoArr: getMediaInfoArr,\n        getMediaInfo: getMediaInfo,\n        getMediaSource: getMediaSource,\n        getBuffer: getBuffer,\n        setBuffer: setBuffer,\n        registerExternalController: registerExternalController,\n        unregisterExternalController: unregisterExternalController,\n        unregisterAllExternalController: unregisterAllExternalController,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\nStreamProcessor.__dashjs_factory_name = 'StreamProcessor';\nexport default FactoryMaker.getClassFactory(StreamProcessor);\n"]}