{"version":3,"sources":["../../../../../src/streaming/text/TextBufferController.js"],"names":[],"mappings":"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","file":"TextBufferController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport BufferController from './../controllers/BufferController';\nimport NotFragmentedTextBufferController from './NotFragmentedTextBufferController';\n\nfunction TextBufferController(config) {\n\n    let context = this.context;\n\n    let _BufferControllerImpl;\n\n    let instance;\n\n    function setup(config) {\n\n        // according to text type, we create corresponding buffer controller\n        if (config.type === 'fragmentedText') {\n\n            // in this case, internal buffer ocntroller is a classical BufferController object\n            _BufferControllerImpl = BufferController(context).create({\n                metricsModel: config.metricsModel,\n                manifestModel: config.manifestModel,\n                sourceBufferController: config.sourceBufferController,\n                errHandler: config.errHandler,\n                streamController: config.streamController,\n                mediaController: config.mediaController,\n                adapter: config.adapter,\n                textController: config.textController\n            });\n        } else {\n\n            // in this case, internal buffer controller is a not fragmented text controller  object\n            _BufferControllerImpl = NotFragmentedTextBufferController(context).create({\n                errHandler: config.errHandler,\n                sourceBufferController: config.sourceBufferController\n            });\n        }\n    }\n\n    function initialize(Type, source, StreamProcessor) {\n        return _BufferControllerImpl.initialize(Type, source, StreamProcessor);\n    }\n\n    /**\n     * @param {MediaInfo }mediaInfo\n     * @returns {Object} SourceBuffer object\n     * @memberof BufferController#\n     */\n    function createBuffer(mediaInfo) {\n        return _BufferControllerImpl.createBuffer(mediaInfo);\n    }\n\n    function getType() {\n        return _BufferControllerImpl.getType();\n    }\n\n    function getBuffer() {\n        return _BufferControllerImpl.getBuffer();\n    }\n\n    function setBuffer(value) {\n        _BufferControllerImpl.setBuffer(value);\n    }\n\n    function getMediaSource() {\n        return _BufferControllerImpl.getMediaSource();\n    }\n\n    function setMediaSource(value) {\n        _BufferControllerImpl.setMediaSource(value);\n    }\n\n    function setStreamProcessor(streamProcessor) {\n        _BufferControllerImpl.setStreamProcessor(streamProcessor);\n    }\n\n    function getStreamProcessor() {\n        _BufferControllerImpl.getStreamProcessor();\n    }\n\n    function getBufferLevel() {\n        return _BufferControllerImpl.getBufferLevel();\n    }\n\n    function getCriticalBufferLevel() {\n        return _BufferControllerImpl.getCriticalBufferLevel();\n    }\n\n    function reset(errored) {\n        _BufferControllerImpl.reset(errored);\n    }\n\n    function getIsBufferingCompleted() {\n        return _BufferControllerImpl.getIsBufferingCompleted();\n    }\n\n    function switchInitData(streamId, quality) {\n        _BufferControllerImpl.switchInitData(streamId, quality);\n    }\n\n    instance = {\n        initialize: initialize,\n        createBuffer: createBuffer,\n        getType: getType,\n        getStreamProcessor: getStreamProcessor,\n        setStreamProcessor: setStreamProcessor,\n        getBuffer: getBuffer,\n        setBuffer: setBuffer,\n        getBufferLevel: getBufferLevel,\n        getCriticalBufferLevel: getCriticalBufferLevel,\n        setMediaSource: setMediaSource,\n        getMediaSource: getMediaSource,\n        getIsBufferingCompleted: getIsBufferingCompleted,\n        switchInitData: switchInitData,\n        reset: reset\n    };\n\n    setup(config);\n\n    return instance;\n}\n\nTextBufferController.__dashjs_factory_name = 'TextBufferController';\nexport default FactoryMaker.getClassFactory(TextBufferController);\nexport default FactoryMaker.getClassFactory(TextBufferController);\n"]}