{"version":3,"sources":["../../../../../../src/streaming/rules/abr/AbandonRequestsRule.js"],"names":[],"mappings":"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","file":"AbandonRequestsRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport SwitchRequest from '../SwitchRequest';\nimport MediaPlayerModel from '../../models/MediaPlayerModel';\nimport DashMetrics from '../../../dash/DashMetrics';\nimport MetricsModel from '../../models/MetricsModel';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\n\nfunction AbandonRequestsRule() {\n\n    const ABANDON_MULTIPLIER = 1.8;\n    const GRACE_TIME_THRESHOLD = 500;\n    const MIN_LENGTH_TO_AVERAGE = 5;\n\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n\n    let fragmentDict,\n        abandonDict,\n        throughputArray,\n        mediaPlayerModel,\n        dashMetrics,\n        metricsModel;\n\n    function setup() {\n        fragmentDict = {};\n        abandonDict = {};\n        throughputArray = [];\n        mediaPlayerModel = MediaPlayerModel(context).getInstance();\n        dashMetrics = DashMetrics(context).getInstance();\n        metricsModel = MetricsModel(context).getInstance();\n    }\n\n    function setFragmentRequestDict(type, id) {\n        fragmentDict[type] = fragmentDict[type] || {};\n        fragmentDict[type][id] = fragmentDict[type][id] || {};\n    }\n\n    function storeLastRequestThroughputByType(type, throughput) {\n        throughputArray[type] = throughputArray[type] || [];\n        throughputArray[type].push(throughput);\n    }\n\n    function shouldAbandon(rulesContext) {\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = mediaInfo.type;\n        const req = rulesContext.getCurrentRequest();\n        const switchRequest = SwitchRequest(context).create(SwitchRequest.NO_CHANGE, {name: AbandonRequestsRule.__dashjs_factory_name});\n\n        if (!isNaN(req.index)) {\n\n            setFragmentRequestDict(mediaType, req.index);\n\n            const stableBufferTime = mediaPlayerModel.getStableBufferTime();\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));\n            if ( bufferLevel > stableBufferTime ) {\n                return switchRequest;\n            }\n\n            const fragmentInfo = fragmentDict[mediaType][req.index];\n            if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {\n                return switchRequest;\n            }\n\n            //setup some init info based on first progress event\n            if (fragmentInfo.firstByteTime === undefined) {\n                throughputArray[mediaType] = [];\n                fragmentInfo.firstByteTime = req.firstByteDate.getTime();\n                fragmentInfo.segmentDuration = req.duration;\n                fragmentInfo.bytesTotal = req.bytesTotal;\n                fragmentInfo.id = req.index;\n            }\n            fragmentInfo.bytesLoaded = req.bytesLoaded;\n            fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;\n\n            if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {\n                storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));\n            }\n\n            if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE &&\n                fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD &&\n                fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {\n\n                const totalSampledValue = throughputArray[mediaType].reduce((a, b) => a + b, 0);\n                fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);\n                fragmentInfo.estimatedTimeOfDownload = +((fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps) / 1000).toFixed(2);\n                //log(\"id:\",fragmentInfo.id, \"kbps:\", fragmentInfo.measuredBandwidthInKbps, \"etd:\",fragmentInfo.estimatedTimeOfDownload, fragmentInfo.bytesLoaded);\n\n                if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getTrackInfo().quality === 0 ) {\n                    return switchRequest;\n                } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {\n\n                    const abrController = rulesContext.getStreamProcessor().getABRController();\n                    const bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;\n                    const bitrateList = abrController.getBitrateList(mediaInfo);\n                    const newQuality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * mediaPlayerModel.getBandwidthSafetyFactor());\n                    const estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType, mediaInfo.streamInfo)].bitrate;\n\n                    if (bytesRemaining > estimateOtherBytesTotal) {\n                        switchRequest.value = newQuality;\n                        switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;\n                        switchRequest.reason.fragmentID = fragmentInfo.id;\n                        abandonDict[fragmentInfo.id] = fragmentInfo;\n                        log('AbandonRequestsRule ( ', mediaType, 'frag id',fragmentInfo.id,') is asking to abandon and switch to quality to ', newQuality, ' measured bandwidth was', fragmentInfo.measuredBandwidthInKbps);\n                        delete fragmentDict[mediaType][fragmentInfo.id];\n                    }\n                }\n            } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {\n                delete fragmentDict[mediaType][fragmentInfo.id];\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        setup();\n    }\n\n    const instance = {\n        shouldAbandon: shouldAbandon,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nAbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';\nexport default FactoryMaker.getClassFactory(AbandonRequestsRule);"]}