{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ABRRulesCollection.js"],"names":[],"mappings":"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","file":"ABRRulesCollection.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ThroughputRule from './ThroughputRule';\nimport InsufficientBufferRule from './InsufficientBufferRule';\nimport AbandonRequestsRule from './AbandonRequestsRule';\nimport DroppedFramesRule from './DroppedFramesRule.js';\nimport SwitchHistoryRule from './SwitchHistoryRule.js';\nimport BolaRule from './BolaRule';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport SwitchRequest from '../SwitchRequest.js';\n\nconst QUALITY_SWITCH_RULES = 'qualitySwitchRules';\nconst ABANDON_FRAGMENT_RULES = 'abandonFragmentRules';\n\nfunction ABRRulesCollection(config) {\n\n    let context = this.context;\n\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const metricsModel = config.metricsModel;\n    const dashMetrics = config.dashMetrics;\n\n    let instance,\n        qualitySwitchRules,\n        abandonFragmentRules;\n\n    function initialize() {\n        qualitySwitchRules = [];\n        abandonFragmentRules = [];\n\n        if (mediaPlayerModel.getUseDefaultABRRules()) {\n\n            // Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE.\n            // This is controlled by useBufferOccupancyABR mechanism in AbrController.\n            qualitySwitchRules.push(\n                BolaRule(context).create({\n                    metricsModel: metricsModel,\n                    dashMetrics: dashMetrics,\n                    mediaPlayerModel: mediaPlayerModel\n                })\n            );\n            qualitySwitchRules.push(\n                ThroughputRule(context).create({\n                    metricsModel: metricsModel,\n                    dashMetrics: dashMetrics\n                })\n            );\n\n            qualitySwitchRules.push(\n                InsufficientBufferRule(context).create({\n                    metricsModel: metricsModel,\n                    dashMetrics: dashMetrics\n                })\n            );\n            qualitySwitchRules.push(\n                SwitchHistoryRule(context).create()\n            );\n            qualitySwitchRules.push(\n                DroppedFramesRule(context).create()\n            );\n\n            abandonFragmentRules.push(\n                AbandonRequestsRule(context).create({\n                    metricsModel: metricsModel,\n                    dashMetrics: dashMetrics,\n                    mediaPlayerModel: mediaPlayerModel\n                })\n            );\n        }\n\n        // add custom ABR rules if any\n        let customRules = mediaPlayerModel.getABRCustomRules();\n        customRules.forEach(function (rule) {\n            if (rule.type === QUALITY_SWITCH_RULES) {\n                qualitySwitchRules.push(rule.rule(context).create());\n            }\n\n            if (rule.type === ABANDON_FRAGMENT_RULES) {\n                abandonFragmentRules.push(rule.rule(context).create());\n            }\n        });\n    }\n\n    function getActiveRules(srArray) {\n        return srArray.filter(sr => sr.quality > SwitchRequest.NO_CHANGE);\n    }\n\n    function getMinSwitchRequest(srArray) {\n\n        let values = {};\n        let i,\n            len,\n            req,\n            newQuality,\n            quality;\n\n        if (srArray.length === 0) {\n            return;\n        }\n\n        values[SwitchRequest.PRIORITY.STRONG] = SwitchRequest.NO_CHANGE;\n        values[SwitchRequest.PRIORITY.WEAK] = SwitchRequest.NO_CHANGE;\n        values[SwitchRequest.PRIORITY.DEFAULT] = SwitchRequest.NO_CHANGE;\n\n        for (i = 0, len = srArray.length; i < len; i += 1) {\n            req = srArray[i];\n            if (req.quality !== SwitchRequest.NO_CHANGE) {\n                values[req.priority] = values[req.priority] > SwitchRequest.NO_CHANGE ? Math.min(values[req.priority], req.quality) : req.quality;\n            }\n        }\n\n        if (values[SwitchRequest.PRIORITY.WEAK] !== SwitchRequest.NO_CHANGE) {\n            newQuality = values[SwitchRequest.PRIORITY.WEAK];\n        }\n\n        if (values[SwitchRequest.PRIORITY.DEFAULT] !== SwitchRequest.NO_CHANGE) {\n            newQuality = values[SwitchRequest.PRIORITY.DEFAULT];\n        }\n\n        if (values[SwitchRequest.PRIORITY.STRONG] !== SwitchRequest.NO_CHANGE) {\n            newQuality = values[SwitchRequest.PRIORITY.STRONG];\n        }\n\n        if (newQuality !== SwitchRequest.NO_CHANGE) {\n            quality = newQuality;\n        }\n\n        return SwitchRequest(context).create(quality);\n    }\n\n    function getMaxQuality(rulesContext) {\n        let switchRequestArray = qualitySwitchRules.map(rule => rule.getMaxIndex(rulesContext));\n        let activeRules = getActiveRules(switchRequestArray);\n        let maxQuality = getMinSwitchRequest(activeRules);\n\n        return maxQuality || SwitchRequest(context).create();\n    }\n\n    function shouldAbandonFragment(rulesContext) {\n        let abandonRequestArray = abandonFragmentRules.map(rule => rule.shouldAbandon(rulesContext));\n        let activeRules = getActiveRules(abandonRequestArray);\n        let shouldAbandon = getMinSwitchRequest(activeRules);\n\n        return shouldAbandon || SwitchRequest(context).create();\n    }\n\n    function reset() {\n        [qualitySwitchRules, abandonFragmentRules].forEach(rules => {\n            if (rules && rules.length) {\n                rules.forEach(rule => rule.reset && rule.reset());\n            }\n        });\n        qualitySwitchRules = [];\n        abandonFragmentRules = [];\n    }\n\n    instance = {\n        initialize: initialize,\n        reset: reset,\n        getMaxQuality: getMaxQuality,\n        shouldAbandonFragment: shouldAbandonFragment\n    };\n\n    return instance;\n}\n\nABRRulesCollection.__dashjs_factory_name = 'ABRRulesCollection';\nlet factory = FactoryMaker.getClassFactory(ABRRulesCollection);\nfactory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES;\nfactory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES;\nFactoryMaker.updateSingletonFactory(ABRRulesCollection.__dashjs_factory_name, factory);\n\nexport default factory;\n"]}