{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ThroughputRule.js"],"names":[],"mappings":"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","file":"ThroughputRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport BufferController from '../../controllers/BufferController';\nimport AbrController from '../../controllers/AbrController';\nimport MediaPlayerModel from '../../models/MediaPlayerModel';\nimport {HTTPRequest} from '../../vo/metrics/HTTPRequest';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest.js';\n\nfunction ThroughputRule(config) {\n\n    const MAX_MEASUREMENTS_TO_KEEP = 20;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4;\n    const AVERAGE_LATENCY_SAMPLES = AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;\n    const THROUGHPUT_DECREASE_SCALE = 1.3;\n    const THROUGHPUT_INCREASE_SCALE = 1.3;\n\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n    const dashMetrics = config.dashMetrics;\n    const metricsModel = config.metricsModel;\n\n    let throughputArray,\n        latencyArray,\n        mediaPlayerModel;\n\n    function setup() {\n        throughputArray = [];\n        latencyArray = [];\n        mediaPlayerModel = MediaPlayerModel(context).getInstance();\n    }\n\n    function storeLastRequestThroughputByType(type, throughput) {\n        throughputArray[type] = throughputArray[type] || [];\n        throughputArray[type].push(throughput);\n    }\n\n    function storeLatency(mediaType, latency) {\n        if (!latencyArray[mediaType]) {\n            latencyArray[mediaType] = [];\n        }\n        latencyArray[mediaType].push(latency);\n\n        if (latencyArray[mediaType].length > AVERAGE_LATENCY_SAMPLES) {\n            return latencyArray[mediaType].shift();\n        }\n\n        return undefined;\n    }\n\n    function getAverageLatency(mediaType) {\n        let average;\n        if (latencyArray[mediaType] && latencyArray[mediaType].length > 0) {\n            average = latencyArray[mediaType].reduce((a, b) => { return a + b; }) / latencyArray[mediaType].length;\n        }\n\n        return average;\n    }\n\n    function getSample(type, isDynamic) {\n        let size = Math.min(throughputArray[type].length, isDynamic ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD);\n        const sampleArray = throughputArray[type].slice(size * -1, throughputArray[type].length);\n        if (sampleArray.length > 1) {\n            sampleArray.reduce((a, b) => {\n                if (a * THROUGHPUT_INCREASE_SCALE <= b || a >= b * THROUGHPUT_DECREASE_SCALE) {\n                    size++;\n                }\n                return b;\n            });\n        }\n        size = Math.min(throughputArray[type].length, size);\n        return throughputArray[type].slice(size * -1, throughputArray[type].length);\n    }\n\n    function getAverageThroughput(type, isDynamic) {\n        const sample = getSample(type, isDynamic);\n        let averageThroughput = 0;\n        if (sample.length > 0) {\n            const totalSampledValue = sample.reduce((a, b) => a + b, 0);\n            averageThroughput = totalSampledValue / sample.length;\n        }\n        if (throughputArray[type].length >= MAX_MEASUREMENTS_TO_KEEP) {\n            throughputArray[type].shift();\n        }\n        return (averageThroughput / 1000 ) * mediaPlayerModel.getBandwidthSafetyFactor();\n    }\n\n    function isCachedResponse(latency, downloadTime, mediaType) {\n        let cacheLoadThresholdLatency = mediaPlayerModel.getCacheLoadThresholdLatency();\n        let cacheLoadThresholdVideo = mediaPlayerModel.getCacheLoadThresholdVideo();\n        let cacheLoadThresholdAudio = mediaPlayerModel.getCacheLoadThresholdAudio();\n        let ret = false;\n\n        if (latency < cacheLoadThresholdLatency) {\n            ret = true;\n        }\n\n        if (!ret) {\n            switch (mediaType) {\n                case 'video':\n                    ret = downloadTime < cacheLoadThresholdVideo;\n                    break;\n                case 'audio':\n                    ret = downloadTime < cacheLoadThresholdAudio;\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return ret;\n    }\n\n    function getMaxIndex(rulesContext) {\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = mediaInfo.type;\n        const metrics = metricsModel.getReadOnlyMetricsFor(mediaType);\n        const streamProcessor = rulesContext.getStreamProcessor();\n        const abrController = streamProcessor.getABRController();\n        const isDynamic = streamProcessor.isDynamic();\n        const lastRequest = dashMetrics.getCurrentHttpRequest(metrics);\n        const bufferStateVO = (metrics.BufferState.length > 0) ? metrics.BufferState[metrics.BufferState.length - 1] : null;\n        const hasRichBuffer = rulesContext.hasRichBuffer();\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!metrics || !lastRequest || lastRequest.type !== HTTPRequest.MEDIA_SEGMENT_TYPE || !bufferStateVO || hasRichBuffer) {\n            return switchRequest;\n        }\n\n        let downloadTimeInMilliseconds;\n        let latencyTimeInMilliseconds;\n\n        if (lastRequest.trace && lastRequest.trace.length) {\n            const useDeadTimeLatency = abrController.getUseDeadTimeLatency();\n            latencyTimeInMilliseconds = (lastRequest.tresponse.getTime() - lastRequest.trequest.getTime()) || 1;\n            downloadTimeInMilliseconds = (lastRequest._tfinish.getTime() - lastRequest.tresponse.getTime()) || 1; //Make sure never 0 we divide by this value. Avoid infinity!\n\n            const bytes = lastRequest.trace.reduce((a, b) => a + b.b[0], 0);\n\n            const throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds;\n            const lastRequestThroughput = Math.round((bytes * 8) / (throughputMeasureTime / 1000));\n\n            let throughput;\n            let latency;\n            //Prevent cached fragment loads from skewing the average throughput value - allow first even if cached to set allowance for ABR rules..\n            if (isCachedResponse(latencyTimeInMilliseconds, downloadTimeInMilliseconds, mediaType)) {\n                if (!throughputArray[mediaType] || !latencyArray[mediaType]) {\n                    throughput = lastRequestThroughput / 1000;\n                    latency = latencyTimeInMilliseconds;\n                } else {\n                    throughput = getAverageThroughput(mediaType, isDynamic);\n                    latency = getAverageLatency(mediaType);\n                }\n            } else {\n                storeLastRequestThroughputByType(mediaType, lastRequestThroughput);\n                throughput = getAverageThroughput(mediaType, isDynamic);\n                storeLatency(mediaType, latencyTimeInMilliseconds);\n                latency = getAverageLatency(mediaType, isDynamic);\n            }\n\n            abrController.setAverageThroughput(mediaType, throughput);\n\n            if (abrController.getAbandonmentStateFor(mediaType) !== AbrController.ABANDON_LOAD) {\n\n                if (bufferStateVO.state === BufferController.BUFFER_LOADED || isDynamic) {\n                    if (useDeadTimeLatency) {\n                        switchRequest.value = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\n                    } else {\n                        switchRequest.value = abrController.getQualityForBitrate(mediaInfo, throughput);\n                    }\n                    streamProcessor.getScheduleController().setTimeToLoadDelay(0);\n                    log('ThroughputRule requesting switch to index: ', switchRequest.value, 'type: ',mediaType, 'Average throughput', Math.round(throughput), 'kbps');\n                    switchRequest.reason = {throughput: throughput, latency: latency};\n                }\n            }\n        }\n        return switchRequest;\n    }\n\n    function reset() {\n        setup();\n    }\n\n    const instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\nexport default FactoryMaker.getClassFactory(ThroughputRule);\n"]}