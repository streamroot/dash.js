{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ThroughputRule.js"],"names":[],"mappings":"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","file":"ThroughputRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport BufferController from '../../controllers/BufferController';\nimport AbrController from '../../controllers/AbrController';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest.js';\n\nfunction ThroughputRule(config) {\n\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n    const metricsModel = config.metricsModel;\n\n    function checkConfig() {\n        if (!metricsModel || !metricsModel.hasOwnProperty('getReadOnlyMetricsFor')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getMaxIndex(rulesContext) {\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') ||\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getStreamProcessor')) {\n            return switchRequest;\n        }\n\n        checkConfig();\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const metrics = metricsModel.getReadOnlyMetricsFor(mediaType);\n        const streamProcessor = rulesContext.getStreamProcessor();\n        const abrController = rulesContext.getAbrController();\n        const streamInfo = rulesContext.getStreamInfo();\n        const isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\n        const throughputHistory = abrController.getThroughputHistory();\n        const throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\n        const latency = throughputHistory.getAverageLatency(mediaType);\n        const bufferStateVO = (metrics.BufferState.length > 0) ? metrics.BufferState[metrics.BufferState.length - 1] : null;\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\n\n        if (!metrics || isNaN(throughput) || !bufferStateVO || useBufferOccupancyABR) {\n            return switchRequest;\n        }\n\n        if (abrController.getAbandonmentStateFor(mediaType) !== AbrController.ABANDON_LOAD) {\n\n            if (bufferStateVO.state === BufferController.BUFFER_LOADED || isDynamic) {\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\n                streamProcessor.getScheduleController().setTimeToLoadDelay(0);\n                log('ThroughputRule requesting switch to index: ', switchRequest.quality, 'type: ',mediaType, 'Average throughput', Math.round(throughput), 'kbps');\n                switchRequest.reason = {throughput: throughput, latency: latency};\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        // no persistent information to reset\n    }\n\n    const instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    return instance;\n}\n\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\nexport default FactoryMaker.getClassFactory(ThroughputRule);\n"]}