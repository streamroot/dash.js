{"version":3,"sources":["../../../../../src/streaming/rules/ThroughputHistory.js"],"names":[],"mappings":"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","file":"ThroughputHistory.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2017, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker.js';\n\n// throughput generally stored in kbit/s\n// latency generally stored in ms\n\nfunction ThroughputHistory(config) {\n\n    // sliding window constants\n    const MAX_MEASUREMENTS_TO_KEEP = 20;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4;\n    const AVERAGE_LATENCY_SAMPLE_AMOUNT = 4;\n    const THROUGHPUT_DECREASE_SCALE = 1.3;\n    const THROUGHPUT_INCREASE_SCALE = 1.3;\n\n    // EWMA constants\n    const EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS = 8;\n    const EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS = 3;\n    const EWMA_LATENCY_SLOW_HALF_LIFE_COUNT = 2;\n    const EWMA_LATENCY_FAST_HALF_LIFE_COUNT = 1;\n\n    const mediaPlayerModel = config.mediaPlayerModel;\n\n    let throughputDict,\n        latencyDict,\n        ewmaThroughputDict,\n        ewmaLatencyDict,\n        ewmaHalfLife;\n\n    function setup() {\n        ewmaHalfLife = {\n            throughputHalfLife: { fast: EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS, slow: EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS },\n            latencyHalfLife:    { fast: EWMA_LATENCY_FAST_HALF_LIFE_COUNT,      slow: EWMA_LATENCY_SLOW_HALF_LIFE_COUNT }\n        };\n\n        reset();\n    }\n\n    function isCachedResponse(mediaType, latencyMs, downloadTimeMs) {\n        let cacheLoadThresholdVideo = mediaPlayerModel.getCacheLoadThresholdVideo();\n        let cacheLoadThresholdAudio = mediaPlayerModel.getCacheLoadThresholdAudio();\n        if (mediaType === Constants.VIDEO) {\n            return downloadTimeMs < cacheLoadThresholdVideo;\n        } else if (mediaType === Constants.AUDIO) {\n            return downloadTimeMs < cacheLoadThresholdAudio;\n        }\n    }\n\n    function push(mediaType, httpRequest, useDeadTimeLatency) {\n        if (!httpRequest.trace || !httpRequest.trace.length) {\n            return;\n        }\n\n        const latencyTimeInMilliseconds = (httpRequest.tresponse.getTime() - httpRequest.trequest.getTime()) || 1;\n        const downloadTimeInMilliseconds = (httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime()) || 1; //Make sure never 0 we divide by this value. Avoid infinity!\n        const downloadBytes = httpRequest.trace.reduce((a, b) => a + b.b[0], 0);\n        const throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds;\n        let throughput = Math.round((8 * downloadBytes) / throughputMeasureTime); // bits/ms = kbits/s\n\n        checkSettingsForMediaType(mediaType);\n\n        if (isCachedResponse(mediaType, latencyTimeInMilliseconds, downloadTimeInMilliseconds)) {\n            if (throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries) {\n                // already have some entries which are not cached entries\n                // prevent cached fragment loads from skewing the average values\n                return;\n            } else { // have no entries || have cached entries\n                // no uncached entries yet, rely on cached entries because ABR rules need something to go by\n                throughputDict[mediaType].hasCachedEntries = true;\n            }\n        } else if (throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries) {\n            // if we are here then we have some entries already, but they are cached, and now we have a new uncached entry\n            clearSettingsForMediaType(mediaType);\n        }\n\n        throughputDict[mediaType].push(throughput);\n        if (throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n            throughputDict[mediaType].shift();\n        }\n\n        latencyDict[mediaType].push(latencyTimeInMilliseconds);\n        if (latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n            latencyDict[mediaType].shift();\n        }\n\n        updateEwmaEstimate(ewmaThroughputDict[mediaType], throughput, 0.001 * downloadTimeInMilliseconds, ewmaHalfLife.throughputHalfLife);\n        updateEwmaEstimate(ewmaLatencyDict[mediaType], latencyTimeInMilliseconds, 1, ewmaHalfLife.latencyHalfLife);\n    }\n\n    function updateEwmaEstimate(ewmaObj, value, weight, halfLife) {\n        // Note about startup:\n        // Estimates start at 0, so early values are underestimated.\n        // This effect is countered in getAverageEwma() by dividing the estimates by:\n        //     1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n\n        const fastAlpha = Math.pow(0.5, weight / halfLife.fast);\n        ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;\n\n        const slowAlpha = Math.pow(0.5, weight / halfLife.slow);\n        ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate;\n\n        ewmaObj.totalWeight += weight;\n    }\n\n    function getSampleSize(isThroughput, mediaType, isLive) {\n        let arr;\n        let sampleSize;\n\n        if (isThroughput) {\n            arr = throughputDict[mediaType];\n            sampleSize = isLive ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;\n        } else {\n            arr = latencyDict[mediaType];\n            sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT;\n        }\n\n        if (!arr) {\n            sampleSize = 0;\n        } else if (sampleSize >= arr.length) {\n            sampleSize = arr.length;\n        } else if (isThroughput) {\n            // if throughput samples vary a lot, average over a wider sample\n            for (let i = 1; i < sampleSize; ++i) {\n                let ratio = arr[-i] / arr[-i - 1];\n                if (ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE) {\n                    sampleSize += 1;\n                    if (sampleSize === arr.length) { // cannot increase sampleSize beyond arr.length\n                        break;\n                    }\n                }\n            }\n        }\n\n        return sampleSize;\n    }\n\n    function getAverage(isThroughput, mediaType, isDynamic) {\n        // only two moving average methods defined at the moment\n        return mediaPlayerModel.getMovingAverageMethod() !== Constants.MOVING_AVERAGE_SLIDING_WINDOW ?\n            getAverageEwma(isThroughput, mediaType) : getAverageSlidingWindow(isThroughput, mediaType, isDynamic);\n    }\n\n    function getAverageSlidingWindow(isThroughput, mediaType, isDynamic) {\n        let sampleSize = getSampleSize(isThroughput, mediaType, isDynamic);\n        let dict = isThroughput ? throughputDict : latencyDict;\n        let arr = dict[mediaType];\n\n        if (sampleSize === 0 || !arr || arr.length === 0) {\n            return NaN;\n        }\n\n        arr = arr.slice(-sampleSize); // still works if sampleSize too large\n        // arr.length >= 1\n        return arr.reduce((total, elem) => total + elem) / arr.length;\n    }\n\n    function getAverageEwma(isThroughput, mediaType) {\n        let halfLife = isThroughput ? ewmaHalfLife.throughputHalfLife : ewmaHalfLife.latencyHalfLife;\n        let ewmaObj = isThroughput ? ewmaThroughputDict[mediaType] : ewmaLatencyDict[mediaType];\n\n        if (!ewmaObj || ewmaObj.totalWeight <= 0) {\n            return NaN;\n        }\n\n        // to correct for startup, divide by zero factor = 1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n        const fastEstimate = ewmaObj.fastEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.fast));\n        const slowEstimate = ewmaObj.slowEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.slow));\n        return isThroughput ? Math.min(fastEstimate, slowEstimate) : Math.max(fastEstimate, slowEstimate);\n    }\n\n    function getAverageThroughput(mediaType, isDynamic) {\n        return getAverage(true, mediaType, isDynamic);\n    }\n\n    function getSafeAverageThroughput(mediaType, isDynamic) {\n        let average = getAverageThroughput(mediaType, isDynamic);\n        if (!isNaN(average)) {\n            average *= mediaPlayerModel.getBandwidthSafetyFactor();\n        }\n        return average;\n    }\n\n    function getAverageLatency(mediaType) {\n        return getAverage(false, mediaType);\n    }\n\n    function checkSettingsForMediaType(mediaType) {\n        throughputDict[mediaType] = throughputDict[mediaType] || [];\n        latencyDict[mediaType] = latencyDict[mediaType] || [];\n        ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\n        ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\n    }\n\n    function clearSettingsForMediaType(mediaType) {\n        delete throughputDict[mediaType];\n        delete latencyDict[mediaType];\n        delete ewmaThroughputDict[mediaType];\n        delete ewmaLatencyDict[mediaType];\n        checkSettingsForMediaType(mediaType);\n    }\n\n    function reset() {\n        throughputDict = {};\n        latencyDict = {};\n        ewmaThroughputDict = {};\n        ewmaLatencyDict = {};\n    }\n\n    const instance = {\n        push: push,\n        getAverageThroughput: getAverageThroughput,\n        getSafeAverageThroughput: getSafeAverageThroughput,\n        getAverageLatency: getAverageLatency,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nThroughputHistory.__dashjs_factory_name = 'ThroughputHistory';\nexport default FactoryMaker.getClassFactory(ThroughputHistory);\n"]}