{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/NextFragmentRequestRule.js"],"names":[],"mappings":"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","file":"NextFragmentRequestRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Debug from '../../../core/Debug';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction NextFragmentRequestRule(config) {\n\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n    const adapter = config.adapter;\n    const sourceBufferController = config.sourceBufferController;\n    const textSourceBuffer = config.textSourceBuffer;\n\n    function execute(streamProcessor, requestToReplace) {\n\n        const representationInfo = streamProcessor.getCurrentRepresentationInfo();\n        const mediaInfo = representationInfo.mediaInfo;\n        const mediaType = mediaInfo.type;\n        const scheduleController = streamProcessor.getScheduleController();\n        const seekTarget = scheduleController.getSeekTarget();\n        const hasSeekTarget = !isNaN(seekTarget);\n        const buffer = streamProcessor.getBuffer();\n\n        let time = hasSeekTarget ? seekTarget : adapter.getIndexHandlerTime(streamProcessor);\n\n        if (isNaN(time) || (mediaType === 'fragmentedText' && textSourceBuffer.getAllTracksAreDisabled())) {\n            return null;\n        }\n\n        if (hasSeekTarget) {\n            scheduleController.setSeekTarget(NaN);\n        }\n\n        /**\n         * This is critical for IE/Safari/EDGE\n         * */\n        if (buffer) {\n            const range = sourceBufferController.getBufferRange(streamProcessor.getBuffer(), time);\n            if (range !== null) {\n                log('Prior to making a request for time, NextFragmentRequestRule is aligning index handler\\'s currentTime with bufferedRange.end.', time, ' was changed to ', range.end);\n                time = range.end;\n            }\n        }\n\n        let request;\n        if (requestToReplace) {\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\n            request = adapter.getFragmentRequestForTime(streamProcessor, representationInfo, time, {timeThreshold: 0, ignoreIsFinished: true});\n        } else {\n            request = adapter.getFragmentRequestForTime(streamProcessor, representationInfo, time, {keepIdx: !hasSeekTarget});\n            if (request && streamProcessor.getFragmentModel().isFragmentLoaded(request)) {\n                request = adapter.getNextFragmentRequest(streamProcessor, representationInfo);\n            }\n            if (request) {\n                adapter.setIndexHandlerTime(streamProcessor, request.startTime + request.duration);\n                request.delayLoadingTime = new Date().getTime() + scheduleController.getTimeToLoadDelay();\n                scheduleController.setTimeToLoadDelay(0);\n            }\n        }\n\n        return request;\n    }\n\n    const instance = {\n        execute: execute\n    };\n\n    return instance;\n}\n\nNextFragmentRequestRule.__dashjs_factory_name = 'NextFragmentRequestRule';\nexport default FactoryMaker.getClassFactory(NextFragmentRequestRule);\n"]}