{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/BufferLevelRule.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCA8BsB,2BAA2B;;;;gCACxB,4BAA4B;;;;AAErD,SAAS,eAAe,CAAC,MAAM,EAAE;;AAE7B,QAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;AACvC,QAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;AACzC,QAAM,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;AACjD,QAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;AAC7C,QAAM,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;;AAE3C,aAAS,KAAK,GAAG,EAChB;;AAED,aAAS,OAAO,CAAC,eAAe,EAAE,IAAI,EAAE,iBAAiB,EAAE;AACvD,YAAM,WAAW,GAAG,WAAW,CAAC,qBAAqB,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;AAChG,eAAO,WAAW,GAAG,eAAe,CAAC,eAAe,EAAE,IAAI,EAAE,iBAAiB,CAAC,CAAC;KAClF;;AAED,aAAS,eAAe,CAAC,eAAe,EAAE,IAAI,EAAE,iBAAiB,EAAE;AAC/D,YAAI,YAAY,GAAG,GAAG,CAAC;AACvB,YAAM,kBAAkB,GAAG,eAAe,CAAC,4BAA4B,EAAE,CAAC;AAC1E,YAAI,IAAI,KAAK,gCAAU,eAAe,EAAE;AACpC,wBAAY,GAAG,cAAc,CAAC,uBAAuB,EAAE,GAAG,CAAC,GAAG,kBAAkB,CAAC,gBAAgB,CAAC;SACrG,MAAM,IAAI,IAAI,KAAK,gCAAU,KAAK,IAAI,iBAAiB,EAAE;AACtD,gBAAM,gBAAgB,GAAG,WAAW,CAAC,qBAAqB,CAAC,YAAY,CAAC,qBAAqB,CAAC,gCAAU,KAAK,CAAC,CAAC,CAAC;AAChH,gBAAI,KAAK,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE;AAC5C,4BAAY,GAAG,gBAAgB,CAAC;aACnC,MAAM;AACH,4BAAY,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;aAClF;;SAEJ,MAAM;AACH,oBAAM,UAAU,GAAG,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC;AAC3D,oBAAI,aAAa,CAAC,qBAAqB,CAAC,UAAU,CAAC,EAAE;AACjD,wBAAM,iBAAiB,GAAG,UAAU,CAAC,YAAY,CAAC,QAAQ,IAAI,gBAAgB,CAAC,mCAAmC,EAAE,CAAC;AACrH,gCAAY,GAAG,iBAAiB,GAAG,gBAAgB,CAAC,iCAAiC,EAAE,GAAG,gBAAgB,CAAC,yBAAyB,EAAE,CAAC;iBAC1I,MAAK;AACF,gCAAY,GAAG,gBAAgB,CAAC,mBAAmB,EAAE,CAAC;iBACzD;aACJ;;AAED,eAAO,YAAY,CAAC;KACvB;;AAED,QAAM,QAAQ,GAAG;AACb,eAAO,EAAE,OAAO;AAChB,uBAAe,EAAE,eAAe;KACnC,CAAC;;AAEF,SAAK,EAAE,CAAC;AACR,WAAO,QAAQ,CAAC;CACnB;;AAED,eAAe,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;qBAC3C,8BAAa,eAAe,CAAC,eAAe,CAAC","file":"BufferLevelRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../constants/Constants';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction BufferLevelRule(config) {\n\n    const dashMetrics = config.dashMetrics;\n    const metricsModel = config.metricsModel;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const textController = config.textController;\n    const abrController = config.abrController;\n\n    function setup() {\n    }\n\n    function execute(streamProcessor, type, videoTrackPresent) {\n        const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));\n        return bufferLevel < getBufferTarget(streamProcessor, type, videoTrackPresent);\n    }\n\n    function getBufferTarget(streamProcessor, type, videoTrackPresent) {\n        let bufferTarget = NaN;\n        const representationInfo = streamProcessor.getCurrentRepresentationInfo();\n        if (type === Constants.FRAGMENTED_TEXT) {\n            bufferTarget = textController.getAllTracksAreDisabled() ? 0 : representationInfo.fragmentDuration;\n        } else if (type === Constants.AUDIO && videoTrackPresent) {\n            const videoBufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(Constants.VIDEO));\n            if (isNaN(representationInfo.fragmentDuration)) {\n                bufferTarget = videoBufferLevel;\n            } else {\n                bufferTarget = Math.max(videoBufferLevel, representationInfo.fragmentDuration);\n            }\n            // console.log('videoBufferLevel  - ' + videoBufferLevel + ' target : ' + bufferTarget);\n        } else {\n            const streamInfo = representationInfo.mediaInfo.streamInfo;\n            if (abrController.isPlayingAtTopQuality(streamInfo)) {\n                const isLongFormContent = streamInfo.manifestInfo.duration >= mediaPlayerModel.getLongFormContentDurationThreshold();\n                bufferTarget = isLongFormContent ? mediaPlayerModel.getBufferTimeAtTopQualityLongForm() : mediaPlayerModel.getBufferTimeAtTopQuality();\n            }else {\n                bufferTarget = mediaPlayerModel.getStableBufferTime();\n            }\n        }\n\n        return bufferTarget;\n    }\n\n    const instance = {\n        execute: execute,\n        getBufferTarget: getBufferTarget\n    };\n\n    setup();\n    return instance;\n}\n\nBufferLevelRule.__dashjs_factory_name = 'BufferLevelRule';\nexport default FactoryMaker.getClassFactory(BufferLevelRule);\n"]}