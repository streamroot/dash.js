{"version":3,"sources":["../../../../../src/streaming/controllers/PlaybackController.js"],"names":[],"mappings":"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","file":"PlaybackController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport BufferController from './BufferController';\nimport URIQueryAndFragmentModel from '../models/URIQueryAndFragmentModel';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction PlaybackController() {\n\n    let context = this.context;\n    let log = Debug(context).getInstance().log;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        streamController,\n        timelineConverter,\n        metricsModel,\n        dashMetrics,\n        manifestModel,\n        dashManifestModel,\n        adapter,\n        videoModel,\n        currentTime,\n        liveStartTime,\n        wallclockTimeIntervalId,\n        commonEarliestTime,\n        bufferedRange,\n        streamInfo,\n        isDynamic,\n        mediaPlayerModel,\n        playOnceInitialized;\n\n    function setup() {\n        reset();\n    }\n\n    function initialize(StreamInfo) {\n        streamInfo = StreamInfo;\n        addAllListeners();\n        isDynamic = streamInfo.manifestInfo.isDynamic;\n        liveStartTime = streamInfo.start;\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.on(Events.BYTES_APPENDED, onBytesAppended, this);\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.on(Events.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, this);\n\n        if (playOnceInitialized) {\n            playOnceInitialized = false;\n            play();\n        }\n    }\n\n    function onPeriodSwitchStarted(e) {\n        if (!isDynamic && e.fromStreamInfo && commonEarliestTime[e.fromStreamInfo.id] !== undefined) {\n            delete bufferedRange[e.fromStreamInfo.id];\n            delete commonEarliestTime[e.fromStreamInfo.id];\n        }\n    }\n\n    function getTimeToStreamEnd() {\n        const startTime = getStreamStartTime(true);\n        const offset = isDynamic ? startTime - streamInfo.start : 0;\n        return startTime + (streamInfo.duration - offset) - getTime();\n    }\n\n    function play() {\n        if (videoModel && videoModel.getElement()) {\n            videoModel.play();\n        } else {\n            playOnceInitialized = true;\n        }\n    }\n\n    function isPaused() {\n        return videoModel ? videoModel.isPaused() : null;\n    }\n\n    function pause() {\n        if (videoModel) {\n            videoModel.pause();\n        }\n    }\n\n    function isSeeking() {\n        return videoModel ? videoModel.isSeeking() : null;\n    }\n\n    function seek(time) {\n        if (videoModel) {\n            eventBus.trigger(Events.PLAYBACK_SEEK_ASKED);\n            log('Requesting seek to time: ' + time);\n            videoModel.setCurrentTime(time);\n        }\n    }\n\n    function getTime() {\n        return videoModel ? videoModel.getTime() : null;\n    }\n\n    function getPlaybackRate() {\n        return videoModel ? videoModel.getPlaybackRate() : null;\n    }\n\n    function getPlayedRanges() {\n        return videoModel ? videoModel.getPlayedRanges() : null;\n    }\n\n    function getEnded() {\n        return videoModel ? videoModel.getEnded() : null;\n    }\n\n    function getIsDynamic() {\n        return isDynamic;\n    }\n\n    function getStreamController() {\n        return streamController;\n    }\n\n    function setLiveStartTime(value) {\n        liveStartTime = value;\n    }\n\n    function getLiveStartTime() {\n        return liveStartTime;\n    }\n\n    /**\n     * Computes the desirable delay for the live edge to avoid a risk of getting 404 when playing at the bleeding edge\n     * @param {number} fragmentDuration - seconds?\n     * @param {number} dvrWindowSize - seconds?\n     * @returns {number} object\n     * @memberof PlaybackController#\n     */\n    function computeLiveDelay(fragmentDuration, dvrWindowSize) {\n        let mpd = dashManifestModel.getMpd(manifestModel.getValue());\n\n        let delay;\n        const END_OF_PLAYLIST_PADDING = 10;\n\n        if (mediaPlayerModel.getUseSuggestedPresentationDelay() && mpd.hasOwnProperty(Constants.SUGGESTED_PRESENTATION_DELAY)) {\n            delay = mpd.suggestedPresentationDelay;\n        } else if (mediaPlayerModel.getLiveDelay()) {\n            delay = mediaPlayerModel.getLiveDelay(); // If set by user, this value takes precedence\n        } else if (!isNaN(fragmentDuration)) {\n            delay = fragmentDuration * mediaPlayerModel.getLiveDelayFragmentCount();\n        } else {\n            delay = streamInfo.manifestInfo.minBufferTime * 2;\n        }\n\n        if (dvrWindowSize > 0) {\n            // cap target latency to:\n            // - dvrWindowSize / 2 for short playlists\n            // - dvrWindowSize - END_OF_PLAYLIST_PADDING for longer playlists\n            let targetDelayCapping = Math.max(dvrWindowSize - END_OF_PLAYLIST_PADDING, dvrWindowSize / 2);\n\n            return Math.min(delay, targetDelayCapping);\n        } else {\n            return delay;\n        }\n    }\n\n    function reset() {\n        currentTime = 0;\n        liveStartTime = NaN;\n        wallclockTimeIntervalId = null;\n        playOnceInitialized = false;\n        commonEarliestTime = {};\n        bufferedRange = {};\n        if (videoModel) {\n            eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n            eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n            eventBus.off(Events.BYTES_APPENDED, onBytesAppended, this);\n            stopUpdatingWallclockTime();\n            removeAllListeners();\n        }\n        videoModel = null;\n        streamInfo = null;\n        isDynamic = null;\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.timelineConverter) {\n            timelineConverter = config.timelineConverter;\n        }\n        if (config.metricsModel) {\n            metricsModel = config.metricsModel;\n        }\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.mediaPlayerModel) {\n            mediaPlayerModel = config.mediaPlayerModel;\n        }\n        if (config.adapter) {\n            adapter = config.adapter;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n    }\n\n    /**\n     * @param {boolean} ignoreStartOffset - ignore URL fragment start offset if true\n     * @returns {number} object\n     * @memberof PlaybackController#\n     */\n    function getStreamStartTime(ignoreStartOffset) {\n        let presentationStartTime;\n        let fragData = URIQueryAndFragmentModel(context).getInstance().getURIFragmentData();\n        let startTimeOffset = NaN;\n\n        if (fragData) {\n            let fragS = parseInt(fragData.s, 10);\n            let fragT = parseInt(fragData.t, 10);\n            if (!ignoreStartOffset) {\n                startTimeOffset = !isNaN(fragS) ? fragS : fragT;\n            }\n        } else {\n            // handle case where no media fragments are parsed from the manifest URL\n            startTimeOffset = 0;\n        }\n\n        if (isDynamic) {\n            if (!isNaN(startTimeOffset) && startTimeOffset > 1262304000) {\n\n                presentationStartTime = startTimeOffset - (streamInfo.manifestInfo.availableFrom.getTime() / 1000);\n\n                if (presentationStartTime > liveStartTime ||\n                    presentationStartTime < (liveStartTime - streamInfo.manifestInfo.DVRWindowSize)) {\n                    presentationStartTime = null;\n                }\n            }\n            presentationStartTime = presentationStartTime || liveStartTime;\n\n        } else {\n            if (!isNaN(startTimeOffset) && startTimeOffset < Math.max(streamInfo.manifestInfo.duration, streamInfo.duration) && startTimeOffset >= 0) {\n                presentationStartTime = startTimeOffset;\n            } else {\n                let earliestTime = commonEarliestTime[streamInfo.id]; //set by ready bufferStart after first onBytesAppended\n                if (earliestTime === undefined) {\n                    earliestTime = streamController.getActiveStreamCommonEarliestTime(); //deal with calculated PST that is none 0 when streamInfo.start is 0\n                }\n                presentationStartTime = Math.max(earliestTime, streamInfo.start);\n            }\n        }\n\n        return presentationStartTime;\n    }\n\n    function getActualPresentationTime(currentTime) {\n        let metrics = metricsModel.getReadOnlyMetricsFor(Constants.VIDEO) || metricsModel.getReadOnlyMetricsFor(Constants.AUDIO);\n        let DVRMetrics = dashMetrics.getCurrentDVRInfo(metrics);\n        let DVRWindow = DVRMetrics ? DVRMetrics.range : null;\n        let actualTime;\n\n        if (!DVRWindow) return NaN;\n        if (currentTime > DVRWindow.end) {\n            actualTime = Math.max(DVRWindow.end - streamInfo.manifestInfo.minBufferTime * 2, DVRWindow.start);\n        } else if (currentTime < DVRWindow.start) {\n            actualTime = DVRWindow.start;\n        } else {\n            return currentTime;\n        }\n\n        return actualTime;\n    }\n\n    function startUpdatingWallclockTime() {\n        if (wallclockTimeIntervalId !== null) return;\n\n        const tick = function () {\n            onWallclockTime();\n        };\n\n        wallclockTimeIntervalId = setInterval(tick, mediaPlayerModel.getWallclockTimeUpdateInterval());\n    }\n\n    function stopUpdatingWallclockTime() {\n        clearInterval(wallclockTimeIntervalId);\n        wallclockTimeIntervalId = null;\n    }\n\n    function updateCurrentTime() {\n\n        if (isPaused() || !isDynamic || videoModel.getReadyState() === 0) return;\n        let currentTime = getTime();\n        let actualTime = getActualPresentationTime(currentTime);\n        let timeChanged = (!isNaN(actualTime) && actualTime !== currentTime);\n        if (timeChanged) {\n            seek(actualTime);\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.error) return;\n\n        let representationInfo = adapter.convertDataToTrack(e.currentRepresentation);\n        let info = representationInfo.mediaInfo.streamInfo;\n\n        if (streamInfo.id !== info.id) return;\n        streamInfo = info;\n\n        updateCurrentTime();\n    }\n\n    function onCanPlay() {\n        eventBus.trigger(Events.CAN_PLAY);\n    }\n\n    function onPlaybackStart() {\n        log('Native video element event: play');\n        updateCurrentTime();\n        startUpdatingWallclockTime();\n        eventBus.trigger(Events.PLAYBACK_STARTED, {\n            startTime: getTime()\n        });\n    }\n\n    function onPlaybackPlaying() {\n        log('Native video element event: playing');\n        eventBus.trigger(Events.PLAYBACK_PLAYING, {\n            playingTime: getTime()\n        });\n    }\n\n    function onPlaybackPaused() {\n        log('Native video element event: pause');\n        eventBus.trigger(Events.PLAYBACK_PAUSED, {\n            ended: getEnded()\n        });\n    }\n\n    function onPlaybackSeeking() {\n        let seekTime = getTime();\n        log('Seeking to: ' + seekTime);\n        startUpdatingWallclockTime();\n        eventBus.trigger(Events.PLAYBACK_SEEKING, {\n            seekTime: seekTime\n        });\n    }\n\n    function onPlaybackSeeked() {\n        log('Native video element event: seeked');\n        eventBus.trigger(Events.PLAYBACK_SEEKED);\n    }\n\n    function onPlaybackTimeUpdated() {\n        //log(\"Native video element event: timeupdate\");\n        let time = getTime();\n        if (time === currentTime) return;\n        currentTime = time;\n        eventBus.trigger(Events.PLAYBACK_TIME_UPDATED, {\n            timeToEnd: getTimeToStreamEnd(),\n            time: time\n        });\n    }\n\n    function onPlaybackProgress() {\n        //log(\"Native video element event: progress\");\n        eventBus.trigger(Events.PLAYBACK_PROGRESS);\n    }\n\n    function onPlaybackRateChanged() {\n        let rate = getPlaybackRate();\n        log('Native video element event: ratechange: ', rate);\n        eventBus.trigger(Events.PLAYBACK_RATE_CHANGED, {\n            playbackRate: rate\n        });\n    }\n\n    function onPlaybackMetaDataLoaded() {\n        log('Native video element event: loadedmetadata');\n        eventBus.trigger(Events.PLAYBACK_METADATA_LOADED);\n        startUpdatingWallclockTime();\n    }\n\n    function onPlaybackEnded() {\n        log('Native video element event: ended');\n        pause();\n        stopUpdatingWallclockTime();\n        eventBus.trigger(Events.PLAYBACK_ENDED);\n    }\n\n    function onPlaybackError(event) {\n        let target = event.target || event.srcElement;\n        eventBus.trigger(Events.PLAYBACK_ERROR, {\n            error: target.error\n        });\n    }\n\n    function onWallclockTime() {\n        eventBus.trigger(Events.WALLCLOCK_TIME_UPDATED, {\n            isDynamic: isDynamic,\n            time: new Date()\n        });\n    }\n\n    function checkTimeInRanges(time, ranges) {\n        if (ranges && ranges.length > 0) {\n            for (let i = 0, len = ranges.length; i < len; i++) {\n                if (time >= ranges.start(i) && time < ranges.end(i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    function onBytesAppended(e) {\n        let ranges = e.bufferedRanges;\n        if (!ranges || !ranges.length) return;\n        if (commonEarliestTime[streamInfo.id] === false) {\n            //stream has already been started.\n            return;\n        }\n\n        let type = e.sender.getType();\n\n        if (bufferedRange[streamInfo.id] === undefined) {\n            bufferedRange[streamInfo.id] = [];\n        }\n\n        bufferedRange[streamInfo.id][type] = ranges;\n\n        if (commonEarliestTime[streamInfo.id] === undefined) {\n            commonEarliestTime[streamInfo.id] = [];\n        }\n\n        if (commonEarliestTime[streamInfo.id][type] === undefined) {\n            commonEarliestTime[streamInfo.id][type] = Math.max(ranges.start(0), streamInfo.start);\n        }\n\n        const hasVideoTrack = streamController.isVideoTrackPresent();\n        const hasAudioTrack = streamController.isAudioTrackPresent();\n\n        if (hasAudioTrack && hasVideoTrack) {\n            if (commonEarliestTime[streamInfo.id].audio && commonEarliestTime[streamInfo.id].video) {\n\n                let earliestTime;\n                let ranges;\n                if (commonEarliestTime[streamInfo.id].audio < commonEarliestTime[streamInfo.id].video) {\n                    // common earliest is video time\n                    // check buffered audio range has video time, if ok, we seek, otherwise, we wait some other data\n                    earliestTime = commonEarliestTime[streamInfo.id].video;\n                    ranges = bufferedRange[streamInfo.id].audio;\n                } else {\n                    // common earliest is audio time\n                    // check buffered video range has audio time, if ok, we seek, otherwise, we wait some other data\n                    earliestTime = commonEarliestTime[streamInfo.id].audio;\n                    ranges = bufferedRange[streamInfo.id].video;\n                }\n                if (checkTimeInRanges(earliestTime, ranges)) {\n                    seek(earliestTime);\n                    commonEarliestTime[streamInfo.id] = false;\n                }\n            }\n        } else {\n            if (commonEarliestTime[streamInfo.id][type]) {\n                seek(commonEarliestTime[streamInfo.id][type]);\n                commonEarliestTime[streamInfo.id] = false;\n            }\n        }\n    }\n\n    function onBufferLevelStateChanged(e) {\n        // do not stall playback when get an event from Stream that is not active\n        if (e.streamInfo.id !== streamInfo.id) return;\n        videoModel.setStallState(e.mediaType, e.state === BufferController.BUFFER_EMPTY);\n    }\n\n    function addAllListeners() {\n        videoModel.addEventListener('canplay', onCanPlay);\n        videoModel.addEventListener('play', onPlaybackStart);\n        videoModel.addEventListener('playing', onPlaybackPlaying);\n        videoModel.addEventListener('pause', onPlaybackPaused);\n        videoModel.addEventListener('error', onPlaybackError);\n        videoModel.addEventListener('seeking', onPlaybackSeeking);\n        videoModel.addEventListener('seeked', onPlaybackSeeked);\n        videoModel.addEventListener('timeupdate', onPlaybackTimeUpdated);\n        videoModel.addEventListener('progress', onPlaybackProgress);\n        videoModel.addEventListener('ratechange', onPlaybackRateChanged);\n        videoModel.addEventListener('loadedmetadata', onPlaybackMetaDataLoaded);\n        videoModel.addEventListener('ended', onPlaybackEnded);\n    }\n\n    function removeAllListeners() {\n        videoModel.removeEventListener('canplay', onCanPlay);\n        videoModel.removeEventListener('play', onPlaybackStart);\n        videoModel.removeEventListener('playing', onPlaybackPlaying);\n        videoModel.removeEventListener('pause', onPlaybackPaused);\n        videoModel.removeEventListener('error', onPlaybackError);\n        videoModel.removeEventListener('seeking', onPlaybackSeeking);\n        videoModel.removeEventListener('seeked', onPlaybackSeeked);\n        videoModel.removeEventListener('timeupdate', onPlaybackTimeUpdated);\n        videoModel.removeEventListener('progress', onPlaybackProgress);\n        videoModel.removeEventListener('ratechange', onPlaybackRateChanged);\n        videoModel.removeEventListener('loadedmetadata', onPlaybackMetaDataLoaded);\n        videoModel.removeEventListener('ended', onPlaybackEnded);\n    }\n\n    instance = {\n        initialize: initialize,\n        setConfig: setConfig,\n        getStreamStartTime: getStreamStartTime,\n        getTimeToStreamEnd: getTimeToStreamEnd,\n        getTime: getTime,\n        getPlaybackRate: getPlaybackRate,\n        getPlayedRanges: getPlayedRanges,\n        getEnded: getEnded,\n        getIsDynamic: getIsDynamic,\n        getStreamController: getStreamController,\n        setLiveStartTime: setLiveStartTime,\n        getLiveStartTime: getLiveStartTime,\n        computeLiveDelay: computeLiveDelay,\n        play: play,\n        isPaused: isPaused,\n        pause: pause,\n        isSeeking: isSeeking,\n        seek: seek,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nPlaybackController.__dashjs_factory_name = 'PlaybackController';\nexport default FactoryMaker.getSingletonFactory(PlaybackController);\n"]}