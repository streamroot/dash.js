{"version":3,"sources":["../../../../../src/streaming/controllers/FragmentController.js"],"names":[],"mappings":"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","file":"FragmentController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport DataChunk from '../vo/DataChunk';\nimport FragmentModel from '../models/FragmentModel';\nimport MetricsModel from '../models/MetricsModel';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction FragmentController(/*config*/) {\n\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        fragmentModels;\n\n    function setup() {\n        fragmentModels = {};\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\n    }\n\n    function getModel(type) {\n        let model = fragmentModels[type];\n        if (!model) {\n            model = FragmentModel(context).create({metricsModel: MetricsModel(context).getInstance()});\n            fragmentModels[type] = model;\n        }\n\n        return model;\n    }\n\n    function isInitializationRequest(request) {\n        return (request && request.type && request.type === HTTPRequest.INIT_SEGMENT_TYPE);\n    }\n\n    function reset() {\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        for (let model in fragmentModels) {\n            fragmentModels[model].reset();\n        }\n        fragmentModels = {};\n    }\n\n    function createDataChunk(bytes, request, streamId) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.bytes = bytes;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n\n        return chunk;\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        if (fragmentModels[e.request.mediaType] !== e.sender) return;\n\n        const scheduleController = e.sender.getScheduleController();\n        const request = e.request;\n        const bytes = e.response;\n        const isInit = isInitializationRequest(request);\n        const streamInfo = scheduleController.getStreamProcessor().getStreamInfo();\n\n        if (!bytes || !streamInfo) {\n            log('No ' + request.mediaType + ' bytes to push or stream is inactive.');\n            return;\n        }\n\n        const chunk = createDataChunk(bytes, request, streamInfo.id);\n        eventBus.trigger(isInit ? Events.INIT_FRAGMENT_LOADED : Events.MEDIA_FRAGMENT_LOADED, {chunk: chunk, fragmentModel: e.sender});\n    }\n\n    instance = {\n        getModel: getModel,\n        isInitializationRequest: isInitializationRequest,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentController.__dashjs_factory_name = 'FragmentController';\nexport default FactoryMaker.getClassFactory(FragmentController);\n"]}