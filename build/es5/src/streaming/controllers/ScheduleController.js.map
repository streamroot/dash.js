{"version":3,"sources":["../../../../../src/streaming/controllers/ScheduleController.js"],"names":[],"mappings":"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","file":"ScheduleController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport {PlayListTrace} from '../vo/metrics/PlayList';\nimport AbrController from './AbrController';\nimport BufferController from './BufferController';\nimport BufferLevelRule from '../rules/scheduling/BufferLevelRule';\nimport NextFragmentRequestRule from '../rules/scheduling/NextFragmentRequestRule';\nimport FragmentModel from '../models/FragmentModel';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction ScheduleController(config) {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const metricsModel = config.metricsModel;\n    const adapter = config.adapter;\n    const dashMetrics = config.dashMetrics;\n    const dashManifestModel = config.dashManifestModel;\n    const timelineConverter = config.timelineConverter;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const abrController = config.abrController;\n    const playbackController = config.playbackController;\n    const mediaController = config.mediaController;\n    const streamController = config.streamController;\n    const textController = config.textController;\n    const sourceBufferController = config.sourceBufferController;\n    const type = config.type;\n    let streamProcessor = config.streamProcessor;\n\n    let instance,\n        log,\n        fragmentModel,\n        currentRepresentationInfo,\n        initialRequest,\n        isStopped,\n        playListMetrics,\n        playListTraceMetrics,\n        playListTraceMetricsClosed,\n        isFragmentProcessingInProgress,\n        timeToLoadDelay,\n        scheduleTimeout,\n        seekTarget,\n        bufferLevelRule,\n        nextFragmentRequestRule,\n        scheduleWhilePaused,\n        lastQualityIndex,\n        topQualityIndex,\n        lastInitQuality,\n        replaceRequestArray,\n        switchTrack;\n\n    function setup() {\n        log = Debug(context).getInstance().log.bind(instance);\n\n        reset();\n    }\n\n\n    function initialize() {\n        fragmentModel = streamProcessor.getFragmentModel();\n        scheduleWhilePaused = mediaPlayerModel.getScheduleWhilePaused();\n\n        bufferLevelRule = BufferLevelRule(context).create({\n            abrController: abrController,\n            dashMetrics: dashMetrics,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            textController: textController\n        });\n\n        nextFragmentRequestRule = NextFragmentRequestRule(context).create({\n            adapter: adapter,\n            sourceBufferController: sourceBufferController,\n            textController: textController\n        });\n\n        if (dashManifestModel.getIsTextTrack(type)) {\n            eventBus.on(Events.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);\n        }\n\n        //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\n        eventBus.on(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.on(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.on(Events.BYTES_APPENDED, onBytesAppended, this);\n        eventBus.on(Events.INIT_REQUESTED, onInitRequested, this);\n        eventBus.on(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.on(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.on(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.on(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n    }\n\n    function isStarted() {\n        return (isStopped === false);\n    }\n\n    function start() {\n        if (!currentRepresentationInfo || streamProcessor.isBufferingCompleted()) {\n            return;\n        }\n\n        addPlaylistTraceMetrics();\n        isStopped = false;\n\n        if (initialRequest) {\n            initialRequest = false;\n        }\n\n        startScheduleTimer(0);\n\n        log('Schedule controller starting for ' + type);\n    }\n\n    function stop() {\n        if (isStopped) {\n            return;\n        }\n\n        isStopped = true;\n        clearTimeout(scheduleTimeout);\n        log('Schedule controller stopping for ' + type);\n    }\n\n    function hasTopQualityChanged(type, id) {\n\n        topQualityIndex[id] = topQualityIndex[id] || {};\n        const newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);\n\n        if (topQualityIndex[id][type] != newTopQualityIndex) {\n            log('Top quality' + type + ' index has changed from ' + topQualityIndex[id][type] + ' to ' + newTopQualityIndex);\n            topQualityIndex[id][type] = newTopQualityIndex;\n            return true;\n        }\n        return false;\n\n    }\n\n    function schedule() {\n\n        if (isStopped || isFragmentProcessingInProgress || !streamProcessor.getBufferController() || playbackController.isPaused() && !scheduleWhilePaused) {\n            return;\n        }\n\n        validateExecutedFragmentRequest();\n\n        const isReplacement = replaceRequestArray.length > 0;\n        if (switchTrack || isReplacement ||\n            hasTopQualityChanged(currentRepresentationInfo.mediaInfo.type, streamProcessor.getStreamInfo().id) ||\n            bufferLevelRule.execute(streamProcessor, type, streamController.isVideoTrackPresent())\n        ) {\n\n            const getNextFragment = function () {\n                log('ScheduleController - getNextFragment');\n                let fragmentController = streamProcessor.getFragmentController();\n                if (switchTrack) {\n                    log('ScheduleController - switch track has been asked, get init request');\n                    streamProcessor.switchInitData(streamProcessor.getStreamInfo().id, currentRepresentationInfo.id);\n                    switchTrack = false;\n                } else if (currentRepresentationInfo.quality !== lastInitQuality) {\n                    log('ScheduleController - quality has changed, get init request');\n                    lastInitQuality = currentRepresentationInfo.quality;\n\n                    streamProcessor.switchInitData(currentRepresentationInfo.id);\n                } else {\n                    const replacement = replaceRequestArray.shift();\n\n                    if (fragmentController.isInitializationRequest(replacement)) {\n                        //to be sure the specific init segment had not already been loaded.\n                        streamProcessor.switchInitData(replacement.representationId);\n                    } else {\n                        const request = nextFragmentRequestRule.execute(streamProcessor, replacement);\n                        if (request) {\n                            log('ScheduleController - getNextFragment - request is ' + request.url);\n                            fragmentModel.executeRequest(request);\n                        } else { //Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.\n                            log('getNextFragment - Playing at the bleeding live edge and frag is not available yet');\n                            isFragmentProcessingInProgress = false;\n                            startScheduleTimer(500);\n                        }\n                    }\n                }\n            };\n\n            isFragmentProcessingInProgress = true;\n            if (isReplacement || switchTrack) {\n                getNextFragment();\n            } else {\n                abrController.checkPlaybackQuality(type);\n                getNextFragment();\n            }\n\n        } else {\n            startScheduleTimer(500);\n        }\n    }\n\n    function validateExecutedFragmentRequest() {\n        //Validate that the fragment request executed and appended into the source buffer is as\n        // good of quality as the current quality and is the correct media track.\n        const safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;\n        const request = fragmentModel.getRequests({\n            state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n            time: playbackController.getTime() + safeBufferLevel,\n            threshold: 0\n        })[0];\n\n        if (request && replaceRequestArray.indexOf(request) === -1 && !dashManifestModel.getIsTextTrack(type)) {\n            const isCurrentTrack = mediaController.isCurrentTrack(request.mediaInfo);\n            const fastSwitchModeEnabled = mediaPlayerModel.getFastSwitchEnabled();\n            const bufferLevel = streamProcessor.getBufferLevel();\n            const abandonmentState = abrController.getAbandonmentStateFor(type);\n\n            if (!isCurrentTrack ||\n                fastSwitchModeEnabled && request.quality < currentRepresentationInfo.quality && bufferLevel >= safeBufferLevel && abandonmentState !== AbrController.ABANDON_LOAD) {\n                replaceRequest(request);\n                log('Reloading outdated fragment at index: ', request.index);\n            } else if (request.quality > currentRepresentationInfo.quality) {\n                //The buffer has better quality it in then what we would request so set append point to end of buffer!!\n                setSeekTarget(playbackController.getTime() + streamProcessor.getBufferLevel());\n            }\n        }\n    }\n\n    function startScheduleTimer(value) {\n        clearTimeout(scheduleTimeout);\n        scheduleTimeout = setTimeout(schedule, value);\n    }\n\n    function onInitRequested(e) {\n        if (!e.sender || e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        getInitRequest(currentRepresentationInfo.quality);\n    }\n\n    function getInitRequest(quality) {\n        lastInitQuality = quality;\n\n        const request = adapter.getInitRequest(streamProcessor, quality);\n        if (request) {\n            isFragmentProcessingInProgress = true;\n            fragmentModel.executeRequest(request);\n        }\n    }\n\n    function switchTrackAsked() {\n        switchTrack = true;\n    }\n\n    function replaceRequest(request) {\n        replaceRequestArray.push(request);\n    }\n\n    function onQualityChanged(e) {\n        if (type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {\n            return;\n        }\n\n        currentRepresentationInfo = streamProcessor.getRepresentationInfoForQuality(e.newQuality);\n\n        if (currentRepresentationInfo === null || currentRepresentationInfo === undefined) {\n            throw new Error('Unexpected error! - currentRepresentationInfo is null or undefined');\n        }\n\n        clearPlayListTraceMetrics(new Date(), PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);\n        addPlaylistTraceMetrics();\n    }\n\n    function completeQualityChange(trigger) {\n        if (playbackController && fragmentModel) {\n            const item = fragmentModel.getRequests({\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n                time: playbackController.getTime(),\n                threshold: 0\n            })[0];\n            if (item && playbackController.getTime() >= item.startTime) {\n                if (item.quality !== lastQualityIndex && trigger) {\n                    eventBus.trigger(Events.QUALITY_CHANGE_RENDERED, {\n                        mediaType: type,\n                        oldQuality: lastQualityIndex,\n                        newQuality: item.quality\n                    });\n                }\n                lastQualityIndex = item.quality;\n            }\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.error || e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        currentRepresentationInfo = adapter.convertDataToTrack(e.currentRepresentation);\n    }\n\n    function onStreamInitialized(e) {\n        if (e.error || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {\n            return;\n        }\n\n        currentRepresentationInfo = streamProcessor.getCurrentRepresentationInfo();\n\n        if (initialRequest) {\n            if (playbackController.getIsDynamic()) {\n                timelineConverter.setTimeSyncCompleted(true);\n                setLiveEdgeSeekTarget();\n            } else {\n                seekTarget = playbackController.getStreamStartTime(false);\n                streamProcessor.getBufferController().setSeekStartTime(seekTarget);\n            }\n        }\n\n        if (isStopped) {\n            start();\n        }\n    }\n\n    function setLiveEdgeSeekTarget() {\n        let liveEdgeFinder = streamProcessor.getLiveEdgeFinder();\n        if (liveEdgeFinder) {\n            const liveEdge = liveEdgeFinder.getLiveEdge();\n            const dvrWindowSize = currentRepresentationInfo.mediaInfo.streamInfo.manifestInfo.DVRWindowSize / 2;\n            const startTime = liveEdge - playbackController.computeLiveDelay(currentRepresentationInfo.fragmentDuration, dvrWindowSize);\n            const request = adapter.getFragmentRequestForTime(streamProcessor, currentRepresentationInfo, startTime, {\n                ignoreIsFinished: true\n            });\n            seekTarget = playbackController.getLiveStartTime();\n            if (isNaN(seekTarget) || request.startTime > seekTarget) {\n                //special use case for multi period stream. If the startTime is out of the current period, send a seek command.\n                //in onPlaybackSeeking callback (StreamController), the detection of switch stream is done.\n                if (request.startTime > (currentRepresentationInfo.mediaInfo.streamInfo.start + currentRepresentationInfo.mediaInfo.streamInfo.duration)) {\n                    playbackController.seek(request.startTime);\n                }\n                playbackController.setLiveStartTime(request.startTime);\n                seekTarget = request.startTime;\n            }\n\n            const manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(Constants.STREAM));\n            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {\n                currentTime: seekTarget,\n                presentationStartTime: liveEdge,\n                latency: liveEdge - seekTarget,\n                clientTimeOffset: timelineConverter.getClientTimeOffset()\n            });\n        }\n    }\n\n    function onStreamCompleted(e) {\n        if (e.fragmentModel !== fragmentModel) {\n            return;\n        }\n\n        stop();\n        isFragmentProcessingInProgress = false;\n        log('Stream is complete');\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        if (e.sender !== fragmentModel) {\n            return;\n        }\n\n        if (dashManifestModel.getIsTextTrack(type)) {\n            isFragmentProcessingInProgress = false;\n        }\n\n        if (e.error && e.request.serviceLocation && !isStopped) {\n            replaceRequest(e.request);\n            isFragmentProcessingInProgress = false;\n            startScheduleTimer(0);\n        }\n    }\n\n    function onPlaybackTimeUpdated() {\n        completeQualityChange(true);\n    }\n\n    function onBytesAppended(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        isFragmentProcessingInProgress = false;\n        startScheduleTimer(0);\n    }\n\n    function onFragmentLoadingAbandoned(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n\n        replaceRequest(e.request);\n        isFragmentProcessingInProgress = false;\n        startScheduleTimer(0);\n    }\n\n    function onDataUpdateStarted(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        stop();\n    }\n\n    function onBufferCleared(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        // after the data has been removed from the buffer we should remove the requests from the list of\n        // the executed requests for which playback time is inside the time interval that has been removed from the buffer\n        fragmentModel.removeExecutedRequestsBeforeTime(e.to);\n\n        if (e.hasEnoughSpaceToAppend && isStopped) {\n            start();\n        }\n    }\n\n    function onBufferLevelStateChanged(e) {\n        if ((e.sender.getStreamProcessor() === streamProcessor) && e.state === BufferController.BUFFER_EMPTY && !playbackController.isSeeking()) {\n            log('Buffer is empty! Stalling!');\n            clearPlayListTraceMetrics(new Date(), PlayListTrace.REBUFFERING_REASON);\n        }\n    }\n\n    function onQuotaExceeded(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        stop();\n        isFragmentProcessingInProgress = false;\n    }\n\n    function onURLResolutionFailed() {\n        fragmentModel.abortRequests();\n        stop();\n    }\n\n    function onTimedTextRequested(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        getInitRequest(e.index);\n    }\n\n    function onPlaybackStarted() {\n        if (isStopped || !scheduleWhilePaused) {\n            start();\n        }\n    }\n\n    function onPlaybackSeeking(e) {\n\n        seekTarget = e.seekTime;\n        setTimeToLoadDelay(0);\n\n        if (isStopped) {\n            start();\n        }\n\n        const manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(Constants.STREAM));\n        const latency = currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;\n        metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {\n            latency: latency\n        });\n\n        //if, during the seek command, the scheduleController is waiting : stop waiting, request chunk as soon as possible\n        if (!isFragmentProcessingInProgress) {\n            startScheduleTimer(0);\n        }\n    }\n\n    function onPlaybackRateChanged(e) {\n        if (playListTraceMetrics) {\n            playListTraceMetrics.playbackspeed = e.playbackRate.toString();\n        }\n    }\n\n    function getSeekTarget() {\n        return seekTarget;\n    }\n\n    function setSeekTarget(value) {\n        seekTarget = value;\n    }\n\n    function setTimeToLoadDelay(value) {\n        timeToLoadDelay = value;\n    }\n\n    function getTimeToLoadDelay() {\n        return timeToLoadDelay;\n    }\n\n    function getBufferTarget() {\n        return bufferLevelRule.getBufferTarget(streamProcessor, type, streamController.isVideoTrackPresent());\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function setPlayList(playList) {\n        playListMetrics = playList;\n    }\n\n    function finalisePlayList(time, reason) {\n        clearPlayListTraceMetrics(time, reason);\n        playListMetrics = null;\n    }\n\n    function clearPlayListTraceMetrics(endTime, stopreason) {\n        if (playListMetrics && playListTraceMetricsClosed === false) {\n            const startTime = playListTraceMetrics.start;\n            const duration = endTime.getTime() - startTime.getTime();\n            playListTraceMetrics.duration = duration;\n            playListTraceMetrics.stopreason = stopreason;\n            playListMetrics.trace.push(playListTraceMetrics);\n            playListTraceMetricsClosed = true;\n        }\n    }\n\n    function addPlaylistTraceMetrics() {\n        if (playListMetrics && playListTraceMetricsClosed === true && currentRepresentationInfo) {\n            playListTraceMetricsClosed = false;\n            playListTraceMetrics = new PlayListTrace();\n            playListTraceMetrics.representationid = currentRepresentationInfo.id;\n            playListTraceMetrics.start = new Date();\n            playListTraceMetrics.mstart = playbackController.getTime() * 1000;\n            playListTraceMetrics.playbackspeed = playbackController.getPlaybackRate().toString();\n        }\n    }\n\n    function reset() {\n        //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.off(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.off(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n        eventBus.off(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.off(Events.BYTES_APPENDED, onBytesAppended, this);\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.off(Events.INIT_REQUESTED, onInitRequested, this);\n        eventBus.off(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.off(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.off(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n        if (dashManifestModel.getIsTextTrack(type)) {\n            eventBus.off(Events.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);\n        }\n\n        stop();\n        completeQualityChange(false);\n        isFragmentProcessingInProgress = false;\n        timeToLoadDelay = 0;\n        seekTarget = NaN;\n        playListMetrics = null;\n        playListTraceMetrics = null;\n        playListTraceMetricsClosed = true;\n        initialRequest = true;\n        lastInitQuality = NaN;\n        lastQualityIndex = NaN;\n        topQualityIndex = {};\n        replaceRequestArray = [];\n        isStopped = true;\n    }\n\n    instance = {\n        initialize: initialize,\n        getType: getType,\n        getSeekTarget: getSeekTarget,\n        setSeekTarget: setSeekTarget,\n        setTimeToLoadDelay: setTimeToLoadDelay,\n        getTimeToLoadDelay: getTimeToLoadDelay,\n        replaceRequest: replaceRequest,\n        switchTrackAsked: switchTrackAsked,\n        isStarted: isStarted,\n        start: start,\n        stop: stop,\n        reset: reset,\n        setPlayList: setPlayList,\n        getBufferTarget: getBufferTarget,\n        finalisePlayList: finalisePlayList\n    };\n\n    setup();\n\n    return instance;\n}\n\nScheduleController.__dashjs_factory_name = 'ScheduleController';\nexport default FactoryMaker.getClassFactory(ScheduleController);\n"]}