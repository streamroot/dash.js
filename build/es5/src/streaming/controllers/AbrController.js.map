{"version":3,"sources":["../../../../../src/streaming/controllers/AbrController.js"],"names":[],"mappings":"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","file":"AbrController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport ABRRulesCollection from '../rules/abr/ABRRulesCollection';\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport BitrateInfo from '../vo/BitrateInfo';\nimport FragmentModel from '../models/FragmentModel';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport RulesContext from '../rules/RulesContext.js';\nimport SwitchRequest from '../rules/SwitchRequest.js';\nimport SwitchRequestHistory from '../rules/SwitchRequestHistory.js';\nimport DroppedFramesHistory from '../rules/DroppedFramesHistory.js';\nimport ThroughputHistory from '../rules/ThroughputHistory.js';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport Debug from '../../core/Debug';\n\nconst ABANDON_LOAD = 'abandonload';\nconst ALLOW_LOAD = 'allowload';\nconst DEFAULT_VIDEO_BITRATE = 1000;\nconst DEFAULT_AUDIO_BITRATE = 100;\nconst QUALITY_DEFAULT = 0;\n\nfunction AbrController() {\n\n    let context = this.context;\n    let debug = Debug(context).getInstance();\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        log,\n        abrRulesCollection,\n        streamController,\n        autoSwitchBitrate,\n        topQualities,\n        qualityDict,\n        bitrateDict,\n        ratioDict,\n        streamProcessorDict,\n        abandonmentStateDict,\n        abandonmentTimeout,\n        limitBitrateByPortal,\n        usePixelRatioInLimitBitrateByPortal,\n        windowResizeEventCalled,\n        elementWidth,\n        elementHeight,\n        manifestModel,\n        dashManifestModel,\n        adapter,\n        videoModel,\n        mediaPlayerModel,\n        domStorage,\n        playbackIndex,\n        switchHistoryDict,\n        droppedFramesHistory,\n        throughputHistory,\n        isUsingBufferOccupancyABRDict,\n        metricsModel,\n        dashMetrics,\n        useDeadTimeLatency;\n\n    function setup() {\n        log = debug.log.bind(instance);\n\n        reset();\n    }\n\n    function registerStreamType(type, streamProcessor) {\n        switchHistoryDict[type] = SwitchRequestHistory(context).create();\n        streamProcessorDict[type] = streamProcessor;\n        abandonmentStateDict[type] = abandonmentStateDict[type] || {};\n        abandonmentStateDict[type].state = ALLOW_LOAD;\n        isUsingBufferOccupancyABRDict[type] = false;\n        eventBus.on(Events.LOADING_PROGRESS, onFragmentLoadProgress, this);\n        if (type == Constants.VIDEO) {\n            eventBus.on(Events.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this);\n            droppedFramesHistory = DroppedFramesHistory(context).create();\n            setElementSize();\n        }\n        eventBus.on(Events.METRIC_ADDED, onMetricAdded, this);\n        throughputHistory = ThroughputHistory(context).create({\n            mediaPlayerModel: mediaPlayerModel\n        });\n    }\n\n    function createAbrRulesCollection() {\n        abrRulesCollection = ABRRulesCollection(context).create({\n            metricsModel: metricsModel,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            adapter: adapter\n        });\n\n        abrRulesCollection.initialize();\n    }\n\n    function reset() {\n        autoSwitchBitrate = {video: true, audio: true};\n        topQualities = {};\n        qualityDict = {};\n        bitrateDict = {};\n        ratioDict = {};\n        abandonmentStateDict = {};\n        streamProcessorDict = {};\n        switchHistoryDict = {};\n        isUsingBufferOccupancyABRDict = {};\n        limitBitrateByPortal = false;\n        useDeadTimeLatency = true;\n        usePixelRatioInLimitBitrateByPortal = false;\n        if (windowResizeEventCalled === undefined) {\n            windowResizeEventCalled = false;\n        }\n        eventBus.off(Events.LOADING_PROGRESS, onFragmentLoadProgress, this);\n        eventBus.off(Events.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this);\n        eventBus.off(Events.METRIC_ADDED, onMetricAdded, this);\n        playbackIndex = undefined;\n        droppedFramesHistory = undefined;\n        throughputHistory = undefined;\n        clearTimeout(abandonmentTimeout);\n        abandonmentTimeout = null;\n        if (abrRulesCollection) {\n            abrRulesCollection.reset();\n        }\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n        if (config.mediaPlayerModel) {\n            mediaPlayerModel = config.mediaPlayerModel;\n        }\n        if (config.metricsModel) {\n            metricsModel = config.metricsModel;\n        }\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.adapter) {\n            adapter = config.adapter;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n    }\n\n    function onQualityChangeRendered(e) {\n        if (e.mediaType === Constants.VIDEO) {\n            playbackIndex = e.oldQuality;\n            droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality());\n        }\n    }\n\n    function onMetricAdded(e) {\n        if (e.metric === MetricsConstants.HTTP_REQUEST && e.value && e.value.type === HTTPRequest.MEDIA_SEGMENT_TYPE && (e.mediaType === Constants.AUDIO || e.mediaType === Constants.VIDEO)) {\n            throughputHistory.push(e.mediaType, e.value, useDeadTimeLatency);\n        }\n\n        if (e.metric === MetricsConstants.BUFFER_LEVEL && (e.mediaType === Constants.AUDIO || e.mediaType === Constants.VIDEO)) {\n            updateIsUsingBufferOccupancyABR(e.mediaType, 0.001 * e.value.level);\n        }\n    }\n\n    function getTopQualityIndexFor(type, id) {\n        let idx;\n        topQualities[id] = topQualities[id] || {};\n\n        if (!topQualities[id].hasOwnProperty(type)) {\n            topQualities[id][type] = 0;\n        }\n\n        idx = checkMaxBitrate(topQualities[id][type], type);\n        idx = checkMaxRepresentationRatio(idx, type, topQualities[id][type]);\n        idx = checkPortalSize(idx, type);\n        return idx;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {number} A value of the initial bitrate, kbps\n     * @memberof AbrController#\n     */\n    function getInitialBitrateFor(type) {\n\n        let savedBitrate = domStorage.getSavedBitrateSettings(type);\n\n        if (!bitrateDict.hasOwnProperty(type)) {\n            if (ratioDict.hasOwnProperty(type)) {\n                let manifest = manifestModel.getValue();\n                let representation = dashManifestModel.getAdaptationForType(manifest, 0, type).Representation;\n\n                if (Array.isArray(representation)) {\n                    let repIdx = Math.max(Math.round(representation.length * ratioDict[type]) - 1, 0);\n                    bitrateDict[type] = representation[repIdx].bandwidth;\n                } else {\n                    bitrateDict[type] = 0;\n                }\n            } else if (!isNaN(savedBitrate)) {\n                bitrateDict[type] = savedBitrate;\n            } else {\n                bitrateDict[type] = (type === Constants.VIDEO) ? DEFAULT_VIDEO_BITRATE : DEFAULT_AUDIO_BITRATE;\n            }\n        }\n\n        return bitrateDict[type];\n    }\n\n    /**\n     * @param {string} type\n     * @param {number} value A value of the initial bitrate, kbps\n     * @memberof AbrController#\n     */\n    function setInitialBitrateFor(type, value) {\n        bitrateDict[type] = value;\n    }\n\n    function getInitialRepresentationRatioFor(type) {\n        if (!ratioDict.hasOwnProperty(type)) {\n            return null;\n        }\n\n        return ratioDict[type];\n    }\n\n    function setInitialRepresentationRatioFor(type, value) {\n        ratioDict[type] = value;\n    }\n\n    function getMaxAllowedBitrateFor(type) {\n        if (bitrateDict.hasOwnProperty('max') && bitrateDict.max.hasOwnProperty(type)) {\n            return bitrateDict.max[type];\n        }\n        return NaN;\n    }\n\n    function getMinAllowedBitrateFor(type) {\n        if (bitrateDict.hasOwnProperty('min') && bitrateDict.min.hasOwnProperty(type)) {\n            return bitrateDict.min[type];\n        }\n        return NaN;\n    }\n\n    //TODO  change bitrateDict structure to hold one object for video and audio with initial and max values internal.\n    // This means you need to update all the logic around initial bitrate DOMStorage, RebController etc...\n    function setMaxAllowedBitrateFor(type, value) {\n        bitrateDict.max = bitrateDict.max || {};\n        bitrateDict.max[type] = value;\n    }\n\n    function setMinAllowedBitrateFor(type, value) {\n        bitrateDict.min = bitrateDict.min || {};\n        bitrateDict.min[type] = value;\n    }\n\n    function getMaxAllowedRepresentationRatioFor(type) {\n        if (ratioDict.hasOwnProperty('max') && ratioDict.max.hasOwnProperty(type)) {\n            return ratioDict.max[type];\n        }\n        return 1;\n    }\n\n    function setMaxAllowedRepresentationRatioFor(type, value) {\n        ratioDict.max = ratioDict.max || {};\n        ratioDict.max[type] = value;\n    }\n\n    function getAutoSwitchBitrateFor(type) {\n        return autoSwitchBitrate[type];\n    }\n\n    function setAutoSwitchBitrateFor(type, value) {\n        autoSwitchBitrate[type] = value;\n    }\n\n    function getLimitBitrateByPortal() {\n        return limitBitrateByPortal;\n    }\n\n    function setLimitBitrateByPortal(value) {\n        limitBitrateByPortal = value;\n    }\n\n    function getUsePixelRatioInLimitBitrateByPortal() {\n        return usePixelRatioInLimitBitrateByPortal;\n    }\n\n    function setUsePixelRatioInLimitBitrateByPortal(value) {\n        usePixelRatioInLimitBitrateByPortal = value;\n    }\n\n    function getUseDeadTimeLatency() {\n        return useDeadTimeLatency;\n    }\n\n    function setUseDeadTimeLatency(value) {\n        useDeadTimeLatency = value;\n    }\n\n    function checkPlaybackQuality(type) {\n        if (type  && streamProcessorDict && streamProcessorDict[type]) {\n            const streamInfo = streamProcessorDict[type].getStreamInfo();\n            const streamId = streamInfo ? streamInfo.id : null;\n            const oldQuality = getQualityFor(type);\n            const rulesContext = RulesContext(context).create({\n                abrController: instance,\n                streamProcessor: streamProcessorDict[type],\n                currentValue: oldQuality,\n                switchHistory: switchHistoryDict[type],\n                droppedFramesHistory: droppedFramesHistory,\n                useBufferOccupancyABR: useBufferOccupancyABR(type)\n            });\n\n            if (droppedFramesHistory) {\n                droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality());\n            }\n\n            //log(\"ABR enabled? (\" + autoSwitchBitrate + \")\");\n            if (getAutoSwitchBitrateFor(type)) {\n                const topQualityIdx = getTopQualityIndexFor(type, streamId);\n                const switchRequest = abrRulesCollection.getMaxQuality(rulesContext);\n                let newQuality = switchRequest.quality;\n                if (newQuality > topQualityIdx) {\n                    newQuality = topQualityIdx;\n                }\n                switchHistoryDict[type].push({oldValue: oldQuality, newValue: newQuality});\n\n                if (newQuality > SwitchRequest.NO_CHANGE && newQuality != oldQuality) {\n                    if (abandonmentStateDict[type].state === ALLOW_LOAD || newQuality > oldQuality) {\n                        changeQuality(type, oldQuality, newQuality, topQualityIdx, switchRequest.reason);\n                    }\n                } else if (debug.getLogToBrowserConsole()) {\n                    const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));\n                    log('AbrController (' + type + ') stay on ' + oldQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ')');\n                }\n            }\n        }\n    }\n\n    function setPlaybackQuality(type, streamInfo, newQuality, reason) {\n        const id = streamInfo.id;\n        const oldQuality = getQualityFor(type);\n        const isInt = newQuality !== null && !isNaN(newQuality) && (newQuality % 1 === 0);\n\n        if (!isInt) throw new Error('argument is not an integer');\n\n        const topQualityIdx = getTopQualityIndexFor(type, id);\n        if (newQuality !== oldQuality && newQuality >= 0 && newQuality <= topQualityIdx) {\n            changeQuality(type, oldQuality, newQuality, topQualityIdx, reason);\n        }\n    }\n    function changeQuality(type, oldQuality, newQuality, topQualityIdx, reason) {\n        if (type  && streamProcessorDict[type]) {\n            var streamInfo = streamProcessorDict[type].getStreamInfo();\n            var id = streamInfo ? streamInfo.id : null;\n            if (debug.getLogToBrowserConsole()) {\n                const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));\n                log('AbrController (' + type + ') switch from ' + oldQuality + ' to ' + newQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ')\\n' + JSON.stringify(reason));\n            }\n            setQualityFor(type, id, newQuality);\n            eventBus.trigger(Events.QUALITY_CHANGE_REQUESTED, {mediaType: type, streamInfo: streamInfo, oldQuality: oldQuality, newQuality: newQuality, reason: reason});\n        }\n    }\n\n    function setAbandonmentStateFor(type, state) {\n        abandonmentStateDict[type].state = state;\n    }\n\n    function getAbandonmentStateFor(type) {\n        return abandonmentStateDict[type].state;\n    }\n\n    /**\n     * @param {MediaInfo} mediaInfo\n     * @param {number} bitrate A bitrate value, kbps\n     * @param {number} latency Expected latency of connection, ms\n     * @returns {number} A quality index <= for the given bitrate\n     * @memberof AbrController#\n     */\n    function getQualityForBitrate(mediaInfo, bitrate, latency) {\n        if (useDeadTimeLatency && latency && streamProcessorDict[mediaInfo.type].getCurrentRepresentationInfo() && streamProcessorDict[mediaInfo.type].getCurrentRepresentationInfo().fragmentDuration) {\n            latency = latency / 1000;\n            let fragmentDuration = streamProcessorDict[mediaInfo.type].getCurrentRepresentationInfo().fragmentDuration;\n            if (latency > fragmentDuration) {\n                return 0;\n            } else {\n                let deadTimeRatio = latency / fragmentDuration;\n                bitrate = bitrate * (1 - deadTimeRatio);\n            }\n        }\n\n        const bitrateList = getBitrateList(mediaInfo);\n        if (!bitrateList || bitrateList.length === 0) {\n            return QUALITY_DEFAULT;\n        }\n\n        for (let i = bitrateList.length - 1; i >= 0; i--) {\n            const bitrateInfo = bitrateList[i];\n            if (bitrate * 1000 >= bitrateInfo.bitrate) {\n                return i;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * @param {MediaInfo} mediaInfo\n     * @returns {Array|null} A list of {@link BitrateInfo} objects\n     * @memberof AbrController#\n     */\n    function getBitrateList(mediaInfo) {\n        if (!mediaInfo || !mediaInfo.bitrateList) return null;\n\n        let bitrateList = mediaInfo.bitrateList;\n        let type = mediaInfo.type;\n\n        let infoList = [];\n        let bitrateInfo;\n\n        for (let i = 0, ln = bitrateList.length; i < ln; i++) {\n            bitrateInfo = new BitrateInfo();\n            bitrateInfo.mediaType = type;\n            bitrateInfo.qualityIndex = i;\n            bitrateInfo.bitrate = bitrateList[i].bandwidth;\n            bitrateInfo.width = bitrateList[i].width;\n            bitrateInfo.height = bitrateList[i].height;\n            bitrateInfo.scanType = bitrateList[i].scanType;\n            infoList.push(bitrateInfo);\n        }\n\n        return infoList;\n    }\n\n    function updateIsUsingBufferOccupancyABR(mediaType, bufferLevel) {\n        const strategy = mediaPlayerModel.getABRStrategy();\n\n        if (strategy === Constants.ABR_STRATEGY_BOLA) {\n            isUsingBufferOccupancyABRDict[mediaType] = true;\n            return;\n        } else if (strategy === Constants.ABR_STRATEGY_THROUGHPUT) {\n            isUsingBufferOccupancyABRDict[mediaType] = false;\n            return;\n        }\n        // else ABR_STRATEGY_DYNAMIC\n\n        let stableBufferTime = mediaPlayerModel.getStableBufferTime();\n        let switchOnThreshold = stableBufferTime;\n        let switchOffThreshold = 0.5 * stableBufferTime;\n\n        let useBufferABR = isUsingBufferOccupancyABRDict[mediaType];\n        let newUseBufferABR = bufferLevel > (useBufferABR ? switchOffThreshold : switchOnThreshold); // use hysteresis to avoid oscillating rules\n        isUsingBufferOccupancyABRDict[mediaType] = newUseBufferABR;\n\n        if (newUseBufferABR !== useBufferABR) {\n            if (newUseBufferABR) {\n                log('AbrController (' + mediaType + ') switching from throughput to buffer occupancy ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');\n            } else {\n                log('AbrController (' + mediaType + ') switching from buffer occupancy to throughput ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');\n            }\n        }\n    }\n\n    function useBufferOccupancyABR(mediaType) {\n        return isUsingBufferOccupancyABRDict[mediaType];\n    }\n\n    function getThroughputHistory() {\n        return throughputHistory;\n    }\n\n    function updateTopQualityIndex(mediaInfo) {\n        let type = mediaInfo.type;\n        let streamId = mediaInfo.streamInfo.id;\n        let max = mediaInfo.representationCount - 1;\n\n        setTopQualityIndex(type, streamId, max);\n\n        return max;\n    }\n\n    function isPlayingAtTopQuality(streamInfo) {\n        let isAtTop;\n        let streamId = streamInfo.id;\n        const audioQuality = getQualityFor(Constants.AUDIO);\n        const videoQuality = getQualityFor(Constants.VIDEO);\n\n        isAtTop = (audioQuality === getTopQualityIndexFor(Constants.AUDIO, streamId)) &&\n            (videoQuality === getTopQualityIndexFor(Constants.VIDEO, streamId));\n\n        return isAtTop;\n    }\n\n    function getQualityFor(type) {\n        if (type && streamProcessorDict[type]) {\n            let streamInfo = streamProcessorDict[type].getStreamInfo();\n            const id = streamInfo ? streamInfo.id : null;\n            let quality;\n\n            if (id) {\n                qualityDict[id] = qualityDict[id] || {};\n\n                if (!qualityDict[id].hasOwnProperty(type)) {\n                    qualityDict[id][type] = QUALITY_DEFAULT;\n                }\n\n                quality = qualityDict[id][type];\n                return quality;\n            }\n        }\n        return QUALITY_DEFAULT;\n    }\n\n    function setQualityFor(type, id, value) {\n        qualityDict[id] = qualityDict[id] || {};\n        qualityDict[id][type] = value;\n    }\n\n    function setTopQualityIndex(type, id, value) {\n        topQualities[id] = topQualities[id] || {};\n        topQualities[id][type] = value;\n    }\n\n    function checkMaxBitrate(idx, type) {\n        let newIdx = idx;\n\n        if (!streamProcessorDict[type]) {\n            return newIdx;\n        }\n\n        let minBitrate = getMinAllowedBitrateFor(type);\n        if (minBitrate) {\n            let minIdx = getQualityForBitrate(streamProcessorDict[type].getMediaInfo(), minBitrate);\n            newIdx = Math.max (idx , minIdx);\n        }\n\n        let maxBitrate = getMaxAllowedBitrateFor(type);\n        if (maxBitrate) {\n            let maxIdx = getQualityForBitrate(streamProcessorDict[type].getMediaInfo(), maxBitrate);\n            newIdx = Math.min (newIdx , maxIdx);\n        }\n\n        return newIdx;\n    }\n\n    function checkMaxRepresentationRatio(idx, type, maxIdx) {\n        let maxRepresentationRatio = getMaxAllowedRepresentationRatioFor(type);\n        if (isNaN(maxRepresentationRatio) || maxRepresentationRatio >= 1 || maxRepresentationRatio < 0) {\n            return idx;\n        }\n        return Math.min( idx , Math.round(maxIdx * maxRepresentationRatio) );\n    }\n\n    function setWindowResizeEventCalled(value) {\n        windowResizeEventCalled = value;\n    }\n\n    function setElementSize() {\n        let hasPixelRatio = usePixelRatioInLimitBitrateByPortal && window.hasOwnProperty('devicePixelRatio');\n        let pixelRatio = hasPixelRatio ? window.devicePixelRatio : 1;\n        elementWidth = videoModel.getClientWidth() * pixelRatio;\n        elementHeight = videoModel.getClientHeight() * pixelRatio;\n    }\n\n    function checkPortalSize(idx, type) {\n        if (type !== Constants.VIDEO || !limitBitrateByPortal || !streamProcessorDict[type]) {\n            return idx;\n        }\n\n        if (!windowResizeEventCalled) {\n            setElementSize();\n        }\n\n        let manifest = manifestModel.getValue();\n        let representation = dashManifestModel.getAdaptationForType(manifest, 0, type).Representation;\n        let newIdx = idx;\n\n        if (elementWidth > 0 && elementHeight > 0) {\n            while (\n                newIdx > 0 &&\n                representation[newIdx] &&\n                elementWidth < representation[newIdx].width &&\n                elementWidth - representation[newIdx - 1].width < representation[newIdx].width - elementWidth\n            ) {\n                newIdx = newIdx - 1;\n            }\n\n            if (representation.length - 2 >= newIdx && representation[newIdx].width === representation[newIdx + 1].width) {\n                newIdx = Math.min(idx, newIdx + 1);\n            }\n        }\n\n        return newIdx;\n    }\n\n    function onFragmentLoadProgress(e) {\n        const type = e.request.mediaType;\n        if (getAutoSwitchBitrateFor(type)) {\n            const streamProcessor = streamProcessorDict[type];\n            if (!streamProcessor) return;// There may be a fragment load in progress when we switch periods and recreated some controllers.\n\n            let rulesContext = RulesContext(context).create({\n                abrController: instance,\n                streamProcessor: streamProcessor,\n                currentRequest: e.request,\n                useBufferOccupancyABR: useBufferOccupancyABR(type)\n            });\n            let switchRequest = abrRulesCollection.shouldAbandonFragment(rulesContext);\n            //Removed overrideFunc\n            //    function (currentValue, newValue) {\n            //        return newValue;\n            //    });\n\n            if (switchRequest.quality > SwitchRequest.NO_CHANGE) {\n                const fragmentModel = streamProcessor.getFragmentModel();\n                const request = fragmentModel.getRequests({state: FragmentModel.FRAGMENT_MODEL_LOADING, index: e.request.index})[0];\n                if (request) {\n                    //TODO Check if we should abort or if better to finish download. check bytesLoaded/Total\n                    fragmentModel.abortRequests();\n                    setAbandonmentStateFor(type, ABANDON_LOAD);\n                    switchHistoryDict[type].reset();\n                    switchHistoryDict[type].push({oldValue: getQualityFor(type, streamController.getActiveStreamInfo()), newValue: switchRequest.quality, confidence: 1, reason: switchRequest.reason});\n                    setPlaybackQuality(type, streamController.getActiveStreamInfo(), switchRequest.quality, switchRequest.reason);\n                    eventBus.trigger(Events.FRAGMENT_LOADING_ABANDONED, {streamProcessor: streamProcessorDict[type], request: request, mediaType: type, newQuality: switchRequest.quality});\n\n                    clearTimeout(abandonmentTimeout);\n                    abandonmentTimeout = setTimeout(\n                        () => {setAbandonmentStateFor(type, ALLOW_LOAD); abandonmentTimeout = null;},\n                        mediaPlayerModel.getAbandonLoadTimeout()\n                    );\n                }\n            }\n        }\n    }\n\n    instance = {\n        isPlayingAtTopQuality: isPlayingAtTopQuality,\n        updateTopQualityIndex: updateTopQualityIndex,\n        getThroughputHistory: getThroughputHistory,\n        getBitrateList: getBitrateList,\n        getQualityForBitrate: getQualityForBitrate,\n        getMaxAllowedBitrateFor: getMaxAllowedBitrateFor,\n        getMinAllowedBitrateFor: getMinAllowedBitrateFor,\n        setMaxAllowedBitrateFor: setMaxAllowedBitrateFor,\n        setMinAllowedBitrateFor: setMinAllowedBitrateFor,\n        getMaxAllowedRepresentationRatioFor: getMaxAllowedRepresentationRatioFor,\n        setMaxAllowedRepresentationRatioFor: setMaxAllowedRepresentationRatioFor,\n        getInitialBitrateFor: getInitialBitrateFor,\n        setInitialBitrateFor: setInitialBitrateFor,\n        getInitialRepresentationRatioFor: getInitialRepresentationRatioFor,\n        setInitialRepresentationRatioFor: setInitialRepresentationRatioFor,\n        setAutoSwitchBitrateFor: setAutoSwitchBitrateFor,\n        getAutoSwitchBitrateFor: getAutoSwitchBitrateFor,\n        getUseDeadTimeLatency: getUseDeadTimeLatency,\n        setUseDeadTimeLatency: setUseDeadTimeLatency,\n        setLimitBitrateByPortal: setLimitBitrateByPortal,\n        getLimitBitrateByPortal: getLimitBitrateByPortal,\n        getUsePixelRatioInLimitBitrateByPortal: getUsePixelRatioInLimitBitrateByPortal,\n        setUsePixelRatioInLimitBitrateByPortal: setUsePixelRatioInLimitBitrateByPortal,\n        getQualityFor: getQualityFor,\n        getAbandonmentStateFor: getAbandonmentStateFor,\n        setPlaybackQuality: setPlaybackQuality,\n        checkPlaybackQuality: checkPlaybackQuality,\n        getTopQualityIndexFor: getTopQualityIndexFor,\n        setElementSize: setElementSize,\n        setWindowResizeEventCalled: setWindowResizeEventCalled,\n        createAbrRulesCollection: createAbrRulesCollection,\n        registerStreamType: registerStreamType,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nAbrController.__dashjs_factory_name = 'AbrController';\nlet factory = FactoryMaker.getSingletonFactory(AbrController);\nfactory.ABANDON_LOAD = ABANDON_LOAD;\nfactory.QUALITY_DEFAULT = QUALITY_DEFAULT;\nFactoryMaker.updateSingletonFactory(AbrController.__dashjs_factory_name, factory);\nexport default factory;\n"]}