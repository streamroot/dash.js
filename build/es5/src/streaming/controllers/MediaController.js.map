{"version":3,"sources":["../../../../../src/streaming/controllers/MediaController.js"],"names":[],"mappings":"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","file":"MediaController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Events from '../../core/events/Events';\nimport EventBus from '../../core/EventBus';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport TextSourceBuffer from '../TextSourceBuffer';\nimport DOMStorage from '../utils/DOMStorage';\n\nconst TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\nconst TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\nconst TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\nconst TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\nconst DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\n\nfunction MediaController() {\n\n    let context = this.context;\n    let log = Debug(context).getInstance().log;\n    let eventBus = EventBus(context).getInstance();\n    let textSourceBuffer = TextSourceBuffer(context).getInstance();\n    let domStorage = DOMStorage(context).getInstance();\n\n    let instance,\n        tracks,\n        initialSettings,\n        selectionMode,\n        switchMode,\n        errHandler;\n\n    const validTrackSwitchModes = [\n        TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n        TRACK_SWITCH_MODE_NEVER_REPLACE\n    ];\n\n    const validTrackSelectionModes = [\n        TRACK_SELECTION_MODE_HIGHEST_BITRATE,\n        TRACK_SELECTION_MODE_WIDEST_RANGE\n    ];\n\n    function initialize() {\n        tracks = {};\n        resetInitialSettings();\n        resetSwitchMode();\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @memberof MediaController#\n     */\n    function checkInitialMediaSettingsForType(type, streamInfo) {\n        var settings = getInitialSettings(type);\n        var tracksForType = getTracksFor(type, streamInfo);\n        var tracks = [];\n\n        if (type === 'fragmentedText') {\n            // Choose the first track\n            setTrack(tracksForType[0]);\n            return;\n        }\n\n        if (!settings) {\n            settings = domStorage.getSavedMediaSettings(type);\n            setInitialSettings(type, settings);\n        }\n\n        if (!tracksForType || (tracksForType.length === 0)) return;\n\n        if (settings) {\n            tracksForType.forEach(function (track) {\n                if (matchSettings(settings, track)) {\n                    tracks.push(track);\n                }\n            });\n        }\n\n        if (tracks.length === 0) {\n            setTrack(selectInitialTrack(tracksForType));\n        } else {\n            if (tracks.length > 1) {\n                setTrack(selectInitialTrack(tracks));\n            } else {\n                setTrack(tracks[0]);\n            }\n        }\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function addTrack(track) {\n        var mediaType = track ? track.type : null;\n        var streamId = track ? track.streamInfo.id : null;\n        var initSettings = getInitialSettings(mediaType);\n\n        if (!track || (!isMultiTrackSupportedByType(mediaType))) return false;\n\n        tracks[streamId] = tracks[streamId] || createTrackInfo();\n\n        if (tracks[streamId][mediaType].list.indexOf(track) >= 0) return false;\n\n        tracks[streamId][mediaType].list.push(track);\n\n        if (initSettings && (matchSettings(initSettings, track)) && !getCurrentTrackFor(mediaType, track.streamInfo)) {\n            setTrack(track);\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Array}\n     * @memberof MediaController#\n     */\n    function getTracksFor(type, streamInfo) {\n        if (!type || !streamInfo) return [];\n\n        var id = streamInfo.id;\n\n        if (!tracks[id] || !tracks[id][type]) return [];\n\n        return tracks[id][type].list;\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getCurrentTrackFor(type, streamInfo) {\n        if (!type || !streamInfo || (streamInfo && !tracks[streamInfo.id])) return null;\n        return tracks[streamInfo.id][type].current;\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isCurrentTrack(track) {\n        var type = track.type;\n        var id = track.streamInfo.id;\n\n        return (tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track));\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @memberof MediaController#\n     */\n    function setTrack(track) {\n        if (!track) return;\n\n        var type = track.type;\n        var streamInfo = track.streamInfo;\n        var id = streamInfo.id;\n        var current = getCurrentTrackFor(type, streamInfo);\n\n        if (!tracks[id] || !tracks[id][type] || (current && isTracksEqual(track, current))) return;\n\n        tracks[id][type].current = track;\n\n        if (current) {\n            eventBus.trigger(Events.CURRENT_TRACK_CHANGED, {oldMediaInfo: current, newMediaInfo: track, switchMode: switchMode[type]});\n        }\n\n        var settings = extractSettings(track);\n\n        if (!settings || !tracks[id][type].storeLastSettings) return;\n\n        if (settings.roles) {\n            settings.role = settings.roles[0];\n            delete settings.roles;\n        }\n\n        if (settings.accessibility) {\n            settings.accessibility = settings.accessibility[0];\n        }\n\n        if (settings.audioChannelConfiguration) {\n            settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];\n        }\n\n        domStorage.setSavedMediaSettings(type, settings);\n    }\n\n    /**\n     * @param {string} type\n     * @param {Object} value\n     * @memberof MediaController#\n     */\n    function setInitialSettings(type, value) {\n        if (!type || !value) return;\n\n        initialSettings[type] = value;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getInitialSettings(type) {\n        if (!type) return null;\n\n        return initialSettings[type];\n    }\n\n    /**\n     * @param {string} type\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSwitchMode(type, mode) {\n        const isModeSupported = (validTrackSwitchModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            log('track switch mode is not supported: ' + mode);\n            return;\n        }\n\n        switchMode[type] = mode;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSwitchMode(type) {\n        return switchMode[type];\n    }\n\n    /**\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSelectionModeForInitialTrack(mode) {\n        const isModeSupported = (validTrackSelectionModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            log('track selection mode is not supported: ' + mode);\n            return;\n        }\n        selectionMode = mode;\n    }\n\n    /**\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSelectionModeForInitialTrack() {\n        return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isMultiTrackSupportedByType(type) {\n        return (type === 'audio' || type === 'video' || type === 'text' || type === 'fragmentedText');\n    }\n\n    /**\n     * @param {MediaInfo} t1 - first track to compare\n     * @param {MediaInfo} t2 - second track to compare\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isTracksEqual(t1, t2) {\n        var sameId = t1.id === t2.id;\n        var sameViewpoint = t1.viewpoint === t2.viewpoint;\n        var sameLang = t1.lang === t2.lang;\n        var sameRoles = t1.roles.toString() === t2.roles.toString();\n        var sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();\n        var sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();\n\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n    }\n\n    /**\n     * @memberof MediaController#\n     */\n    function reset() {\n        initialize();\n        textSourceBuffer.resetEmbedded();\n    }\n\n    function extractSettings(mediaInfo) {\n        var settings = {\n            lang: mediaInfo.lang,\n            viewpoint: mediaInfo.viewpoint,\n            roles: mediaInfo.roles,\n            accessibility: mediaInfo.accessibility,\n            audioChannelConfiguration: mediaInfo.audioChannelConfiguration\n        };\n        var notEmpty = settings.lang || settings.viewpoint || (settings.role && settings.role.length > 0) ||\n        (settings.accessibility && settings.accessibility.length > 0) || (settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0);\n\n        return notEmpty ? settings : null;\n    }\n\n    function matchSettings(settings, track) {\n        var matchLang = !settings.lang || (settings.lang === track.lang);\n        var matchViewPoint = !settings.viewpoint || (settings.viewpoint === track.viewpoint);\n        var matchRole = !settings.role || !!track.roles.filter(function (item) {\n            return item === settings.role;\n        })[0];\n        var matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {\n            return item === settings.accessibility;\n        })[0];\n        var matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {\n            return item === settings.audioChannelConfiguration;\n        })[0];\n\n        return (matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration);\n    }\n\n    function resetSwitchMode() {\n        switchMode = {\n            audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n            video: TRACK_SWITCH_MODE_NEVER_REPLACE\n        };\n    }\n\n    function resetInitialSettings() {\n        initialSettings = {\n            audio: null,\n            video: null\n        };\n    }\n\n    function selectInitialTrack(tracks) {\n        var mode = getSelectionModeForInitialTrack();\n        var tmpArr = [];\n        var getTracksWithHighestBitrate = function (trackArr) {\n            var max = 0;\n            var result = [];\n            var tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = Math.max.apply(Math, track.bitrateList.map(function (obj) { return obj.bandwidth; }));\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n        var getTracksWithWidestRange = function (trackArr) {\n            var max = 0;\n            var result = [];\n            var tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = track.representationCount;\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n\n        switch (mode) {\n            case TRACK_SELECTION_MODE_HIGHEST_BITRATE:\n                tmpArr = getTracksWithHighestBitrate(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithWidestRange(tmpArr);\n                }\n                break;\n            case TRACK_SELECTION_MODE_WIDEST_RANGE:\n                tmpArr = getTracksWithWidestRange(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithHighestBitrate(tracks);\n                }\n                break;\n            default:\n                log('track selection mode is not supported: ' + mode);\n                break;\n        }\n\n        return tmpArr[0];\n    }\n\n    function createTrackInfo() {\n        return {\n            audio: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            video: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            text: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            fragmentedText: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            }\n        };\n    }\n\n    instance = {\n        initialize: initialize,\n        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,\n        addTrack: addTrack,\n        getTracksFor: getTracksFor,\n        getCurrentTrackFor: getCurrentTrackFor,\n        isCurrentTrack: isCurrentTrack,\n        setTrack: setTrack,\n        setInitialSettings: setInitialSettings,\n        getInitialSettings: getInitialSettings,\n        setSwitchMode: setSwitchMode,\n        getSwitchMode: getSwitchMode,\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\n        isMultiTrackSupportedByType: isMultiTrackSupportedByType,\n        isTracksEqual: isTracksEqual,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    return instance;\n}\n\nMediaController.__dashjs_factory_name = 'MediaController';\nlet factory = FactoryMaker.getSingletonFactory(MediaController);\nfactory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE;\nfactory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE;\nfactory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\nfactory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE;\nfactory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE;\nexport default factory;\n"]}