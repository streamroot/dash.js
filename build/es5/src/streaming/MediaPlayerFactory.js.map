{"version":3,"sources":["../../../../src/streaming/MediaPlayerFactory.js"],"names":[],"mappings":"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","file":"MediaPlayerFactory.js","sourcesContent":["import MediaPlayer from './MediaPlayer';\n\nfunction MediaPlayerFactory() {\n\n    /**\n     * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.\n     * @type {string}\n     */\n    const SUPPORTED_MIME_TYPE = 'application/dash+xml';\n\n    /**\n     *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,\n     *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose\n     *  type is application/dash+xml.\n     * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n     * @param {HTMLMediaElement} video\n     * @param {HTMLSourceElement} source\n     * @param {Object} context\n     * @returns {MediaPlayer|null}\n     */\n    function create(video, source, context) {\n        if (!video || video.nodeName !== 'VIDEO') return null;\n\n        if (video._dashjs_player) return video._dashjs_player;\n\n        var player;\n        var videoID = (video.id || video.name || 'video element');\n\n        source = source || [].slice.call(video.querySelectorAll('source')).filter(function (s) {\n                return s.type == SUPPORTED_MIME_TYPE;\n            })[0];\n        if (!source && video.src) {\n            source = document.createElement('source');\n            source.src = video.src;\n        } else if (!source && !video.src) {\n            return null;\n        }\n\n        context = context || {};\n        player = MediaPlayer(context).create();\n        player.initialize(video, source.src, video.autoplay);\n        player.getDebug().log('Converted ' + videoID + ' to dash.js player and added content: ' + source.src);\n\n        // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its\n        // already been setup.\n        video._dashjs_player = player;\n\n        return player;\n    }\n\n    /**\n     * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is\n     * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.\n     * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.\n     * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.\n     * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n     * Returns an array holding all the MediaPlayer instances that were added by this method.\n     * @param {string} selector - CSS selector\n     * @param {Object} scope\n     * @returns {Array} an array of MediaPlayer objects\n     */\n    function createAll(selector, scope) {\n        let aPlayers = [];\n        selector = selector || '[data-dashjs-player]';\n        scope = scope || document;\n        let videos = scope.querySelectorAll(selector);\n        for (let i = 0; i < videos.length; i++) {\n            let player = create(videos[i], null);\n            aPlayers.push(player);\n        }\n\n        let sources = scope.querySelectorAll('source[type=\"' + SUPPORTED_MIME_TYPE + '\"]');\n        for (let i = 0; i < sources.length; i++) {\n            let video = findVideo(sources[i]);\n            let player = create(video, null);\n            aPlayers.push(player);\n        }\n\n        return aPlayers;\n    }\n\n    function findVideo(el) {\n        if (el.nodeName.toLowerCase() === 'video') {\n            return el;\n        } else {\n            return findVideo(el.parentNode);\n        }\n    }\n\n    return {\n        create: create,\n        createAll: createAll\n    };\n}\n\nlet instance = MediaPlayerFactory();\nlet loadInterval;\n\nfunction loadHandler() {\n    window.removeEventListener('load', loadHandler);\n    instance.createAll();\n}\n\nfunction loadIntervalHandler() {\n    if (window.dashjs) {\n        window.clearInterval(loadInterval);\n        instance.createAll();\n    }\n}\n\nlet avoidAutoCreate = typeof window !== 'undefined' && window && window.dashjs && window.dashjs.skipAutoCreate;\n\nif (!avoidAutoCreate && typeof window !== 'undefined' && window && window.addEventListener) {\n    if (window.document.readyState === 'complete') {\n        if (window.dashjs) {\n            instance.createAll();\n        } else {\n            // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet\n            loadInterval = window.setInterval(loadIntervalHandler, 500);\n        }\n    } else {\n        window.addEventListener('load', loadHandler);\n    }\n}\n\nexport default instance;\n"]}