{"version":3,"sources":["../../../../src/core/FactoryMaker.js"],"names":[],"mappings":"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","file":"FactoryMaker.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n */\nlet FactoryMaker = (function () {\n\n    let instance;\n    let extensions = [];\n    let singletonContexts = [];\n    let singletonFactories = [];\n    let classFactories = [];\n\n    function extend(name, childInstance, override, context) {\n        let extensionContext = getExtensionContext(context);\n        if (!extensionContext[name] && childInstance) {\n            extensionContext[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function registerFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n        factoriesArray.push({\n            name: name,\n            factory: factory\n        });\n    }\n\n    function getFactoryByName(name, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                return factoriesArray[i].factory;\n            }\n        }\n        return null;\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                            context: context\n                        }, arguments), context, arguments);\n                    }\n                };\n            };\n\n            registerFactory(classConstructor.__dashjs_factory_name, factory, classFactories); // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                                context: context\n                            }, arguments), context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            registerFactory(classConstructor.__dashjs_factory_name, factory, singletonFactories); // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(name, classConstructor, context, args) {\n        // Add getClassName function to class instance prototype (used by Debug)\n        classConstructor.getClassName = function () {return name;};\n\n        let extensionContext = getExtensionContext(context);\n        let extensionObject = extensionContext[name];\n        if (extensionObject) {\n            let extension = extensionObject.instance;\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n                extension = extension.apply({\n                    context: context,\n                    factory: instance,\n                    parent: classConstructor\n                }, args);\n                for (const prop in extension) {\n                    if (classConstructor.hasOwnProperty(prop)) {\n                        classConstructor[prop] = extension[prop];\n                    }\n                }\n            } else { //replace parent object completely with new object. Same as dijon.\n                return extension.apply({\n                    context: context,\n                    factory: instance\n                }, args);\n            }\n        }\n        return classConstructor;\n    }\n\n    function getExtensionContext(context) {\n        let extensionContext;\n        extensions.forEach(function (obj) {\n            if (obj === context) {\n                extensionContext = obj;\n            }\n        });\n        if (!extensionContext) {\n            extensionContext = extensions.push(context);\n        }\n        return extensionContext;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n"]}