{"version":3,"sources":["../../../../src/mss/MssFragmentMoofProcessor.js"],"names":[],"mappings":"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","file":"MssFragmentMoofProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\nimport ISOBoxer from 'codem-isoboxer';\n\nfunction MssFragmentMoofProcessor(config) {\n\n    let context = this.context;\n    let instance,\n        log;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n\n    function setup() {\n        log = Debug(context).getInstance().log;\n    }\n\n    function processTfrf(request, tfrf, tfdt, streamProcessor) {\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n        let indexHandler = streamProcessor.getIndexHandler();\n\n        let manifest = representation.adaptation.period.mpd.manifest;\n        let adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\n\n        let segmentsUpdated = false;\n        // Get adaptation's segment timeline (always a SegmentTimeline in Smooth Streaming use case)\n        let segments = adaptation.SegmentTemplate.SegmentTimeline.S;\n        let entries = tfrf.entry;\n        let fragment_absolute_time = 0;\n        let fragment_duration = 0;\n        let segment = null;\n        let t = 0;\n        let i = 0;\n        let j = 0;\n        let segmentId = -1;\n        let availabilityStartTime = null;\n        let range;\n\n        if (manifest.type !== 'dynamic') {\n            return false;\n        }\n\n        // Go through tfrf entries\n        while (i < entries.length) {\n            fragment_absolute_time = entries[i].fragment_absolute_time;\n            fragment_duration = entries[i].fragment_duration;\n\n            // Get timestamp of the last segment\n            segment = segments[segments.length - 1];\n            t = segment.t;\n\n            if (fragment_absolute_time > t) {\n                log('[MssFragmentMoofProcessor]Add new segment - t = ' + (fragment_absolute_time / 10000000.0));\n                segments.push({\n                    t: fragment_absolute_time,\n                    d: fragment_duration\n                });\n                segmentsUpdated = true;\n            }\n\n            i += 1;\n        }\n\n        for (j = segments.length - 1; j >= 0; j -= 1) {\n            if (segments[j].t === tfdt.baseMediaDecodeTime) {\n                segmentId = j;\n                break;\n            }\n        }\n\n        if (segmentId >= 0) {\n            for (i = 0; i < entries.length; i += 1) {\n                if (segmentId + i < segments.length) {\n                    t = segments[segmentId + i].t;\n                    if ((t + segments[segmentId + i].d) !== entries[i].fragment_absolute_time) {\n                        segments[segmentId + i].t = entries[i].fragment_absolute_time;\n                        segments[segmentId + i].d = entries[i].fragment_duration;\n                        log('[MssFragmentMoofProcessor]Correct tfrf time  = ' + entries[i].fragment_absolute_time + 'and duration = ' + entries[i].fragment_duration + '! ********');\n                        segmentsUpdated = true;\n                    }\n                }\n            }\n        }\n\n        //\n        if (manifest.timeShiftBufferDepth && manifest.timeShiftBufferDepth > 0) {\n            if (segmentsUpdated) {\n                // Get timestamp of the last segment\n                segment = segments[segments.length - 1];\n                t = segment.t;\n\n                // Determine the segments' availability start time\n                availabilityStartTime = t - (manifest.timeShiftBufferDepth * 10000000);\n\n                // Remove segments prior to availability start time\n                segment = segments[0];\n                while (segment.t < availabilityStartTime) {\n                    log('[MssFragmentMoofProcessor]Remove segment  - t = ' + (segment.t / 10000000.0));\n                    segments.splice(0, 1);\n                    segment = segments[0];\n                }\n            }\n\n            // Update DVR window range\n            // => set range end to end time of current segment\n            range = {\n                start: segments[0].t / adaptation.SegmentTemplate.timescale,\n                end: (tfdt.baseMediaDecodeTime / adaptation.SegmentTemplate.timescale) + request.duration\n            };\n\n            var dvrInfos = metricsModel.getMetricsFor(request.mediaType).DVRInfo;\n            if (dvrInfos) {\n                if (dvrInfos.length === 0 || (dvrInfos.length > 0 && range.end > dvrInfos[dvrInfos.length - 1].range.end)) {\n                    log('[MssFragmentMoofProcessor][' + request.mediaType + '] Update DVR Infos [' + range.start + ' - ' + range.end + ']');\n                    metricsModel.addDVRInfo(request.mediaType, playbackController.getTime(), streamProcessor.getStreamInfo().manifestInfo, range);\n                }\n            }\n        }\n\n        if (segmentsUpdated) {\n            indexHandler.updateSegmentList(representation);\n        }\n        return segmentsUpdated;\n    }\n\n    // This function returns the offset of the 1st byte of a child box within a container box\n    function getBoxOffset(parent, type) {\n        let offset = 8;\n        let i = 0;\n\n        for (i = 0; i < parent.boxes.length; i++) {\n            if (parent.boxes[i].type === type) {\n                return offset;\n            }\n            offset += parent.boxes[i].size;\n        }\n        return offset;\n    }\n\n    function convertFragment(e, sp) {\n\n        let i;\n\n        // e.request contains request description object\n        // e.response contains fragment bytes\n        if (!e.response) {\n            return;\n        }\n        let isoFile = ISOBoxer.parseBuffer(e.response);\n        // Update track_Id in tfhd box\n        let tfhd = isoFile.fetch('tfhd');\n        tfhd.track_ID = e.request.mediaInfo.index + 1;\n\n        // Add tfdt box\n        let tfdt = isoFile.fetch('tfdt');\n        let traf = isoFile.fetch('traf');\n        if (tfdt === null) {\n            tfdt = ISOBoxer.createFullBox('tfdt', traf, tfhd);\n            tfdt.version = 1;\n            tfdt.flags = 0;\n            tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale);\n        }\n\n        let trun = isoFile.fetch('trun');\n\n        // Process tfxd boxes\n        // This box provide absolute timestamp but we take the segment start time for tfdt\n        let tfxd = isoFile.fetch('tfxd');\n        if (tfxd) {\n            tfxd._parent.boxes.splice(tfxd._parent.boxes.indexOf(tfxd), 1);\n            tfxd = null;\n        }\n        let tfrf = isoFile.fetch('tfrf');\n        if (tfrf) {\n            processTfrf(e.request, tfrf, tfdt, sp);\n            tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1);\n            tfrf = null;\n        }\n\n        // If protected content in PIFF1.1 format (sepiff box = Sample Encryption PIFF)\n        // => convert sepiff box it into a senc box\n        // => create saio and saiz boxes (if not already present)\n        let sepiff = isoFile.fetch('sepiff');\n        if (sepiff !== null) {\n            sepiff.type = 'senc';\n            sepiff.usertype = undefined;\n\n            let saio = isoFile.fetch('saio');\n            if (saio === null) {\n                // Create Sample Auxiliary Information Offsets Box box (saio)\n                saio = ISOBoxer.createFullBox('saio', traf);\n                saio.version = 0;\n                saio.flags = 0;\n                saio.entry_count = 1;\n                saio.offset = [0];\n\n                let saiz = ISOBoxer.createFullBox('saiz', traf);\n                saiz.version = 0;\n                saiz.flags = 0;\n                saiz.sample_count = sepiff.sample_count;\n                saiz.default_sample_info_size = 0;\n                saiz.sample_info_size = [];\n\n                if (sepiff.flags & 0x02) {\n                    // Sub-sample encryption => set sample_info_size for each sample\n                    for (i = 0; i < sepiff.sample_count; i += 1) {\n                        // 10 = 8 (InitializationVector field size) + 2 (subsample_count field size)\n                        // 6 = 2 (BytesOfClearData field size) + 4 (BytesOfEncryptedData field size)\n                        saiz.sample_info_size[i] = 10 + (6 * sepiff.entry[i].NumberOfEntries);\n                    }\n                } else {\n                    // No sub-sample encryption => set default sample_info_size = InitializationVector field size (8)\n                    saiz.default_sample_info_size = 8;\n                }\n            }\n        }\n\n        tfhd.flags &= 0xFFFFFE; // set tfhd.base-data-offset-present to false\n        tfhd.flags |= 0x020000; // set tfhd.default-base-is-moof to true\n        trun.flags |= 0x000001; // set trun.data-offset-present to true\n\n        // Update trun.data_offset field that corresponds to first data byte (inside mdat box)\n        let moof = isoFile.fetch('moof');\n        let length = moof.getLength();\n        trun.data_offset = length + 8;\n\n        // Update saio box offset field according to new senc box offset\n        let saio = isoFile.fetch('saio');\n        if (saio !== null) {\n            let trafPosInMoof = getBoxOffset(moof, 'traf');\n            let sencPosInTraf = getBoxOffset(traf, 'senc');\n            // Set offset from begin fragment to the first IV field in senc box\n            saio.offset[0] = trafPosInMoof + sencPosInTraf + 16; // 16 = box header (12) + sample_count field size (4)\n        }\n\n        // Write transformed/processed fragment into request reponse data\n        e.response = isoFile.write();\n    }\n\n    function updateSegmentList(e, sp) {\n\n        // e.request contains request description object\n        // e.response contains fragment bytes\n        if (!e.response) {\n            return;\n        }\n\n        let isoFile = ISOBoxer.parseBuffer(e.response);\n        // Update track_Id in tfhd box\n        let tfhd = isoFile.fetch('tfhd');\n        tfhd.track_ID = e.request.mediaInfo.index + 1;\n\n        // Add tfdt box\n        let tfdt = isoFile.fetch('tfdt');\n        let traf = isoFile.fetch('traf');\n        if (tfdt === null) {\n            tfdt = ISOBoxer.createFullBox('tfdt', traf, tfhd);\n            tfdt.version = 1;\n            tfdt.flags = 0;\n            tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale);\n        }\n\n        let tfrf = isoFile.fetch('tfrf');\n        if (tfrf) {\n            processTfrf(e.request, tfrf, tfdt, sp);\n            tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1);\n            tfrf = null;\n        }\n    }\n\n    instance = {\n        convertFragment: convertFragment,\n        updateSegmentList: updateSegmentList\n    };\n\n    setup();\n    return instance;\n}\n\nMssFragmentMoofProcessor.__dashjs_factory_name = 'MssFragmentMoofProcessor';\nexport default FactoryMaker.getClassFactory(MssFragmentMoofProcessor);\n"]}