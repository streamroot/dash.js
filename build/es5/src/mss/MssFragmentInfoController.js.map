{"version":3,"sources":["../../../../src/mss/MssFragmentInfoController.js"],"names":[],"mappings":"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","file":"MssFragmentInfoController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\nimport MssEvents from './MssEvents';\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\n\nfunction MssFragmentInfoController(config) {\n\n    let context = this.context;\n\n    let instance;\n    let log;\n    let fragmentModel;\n    let indexHandler;\n    let started;\n    let type;\n    let bufferTimeout;\n    let _fragmentInfoTime;\n    let startFragmentInfoDate;\n    let startTimeStampValue;\n    let deltaTime;\n    let segmentDuration;\n\n    let streamProcessor = config.streamProcessor;\n    let eventBus = config.eventBus;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n\n    function setup() {\n        log = Debug(context).getInstance().log;\n    }\n\n    function initialize() {\n        started = false;\n\n        startFragmentInfoDate = null;\n        startTimeStampValue = null;\n        deltaTime = 0;\n        segmentDuration = NaN;\n\n        // register to stream processor as external controller\n        streamProcessor.registerExternalController(instance);\n        type = streamProcessor.getType();\n        fragmentModel = streamProcessor.getFragmentModel();\n        indexHandler = streamProcessor.getIndexHandler();\n    }\n\n    function getCurrentRepresentation() {\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n\n        return representation;\n    }\n\n    function sendRequest(request) {\n        let fragmentModel = streamProcessor.getFragmentModel();\n        fragmentModel.executeRequest(request);\n    }\n\n    function asFragmentInfoRequest(request) {\n        if (request && request.url) {\n            request.url = request.url.replace('Fragments', 'FragmentInfo');\n            request.type = 'FragmentInfoSegment';\n        }\n\n        return request;\n    }\n\n    function onFragmentRequest(request) {\n\n        // Check if current request signals end of stream\n        if ((request !== null) && (request.action === request.ACTION_COMPLETE)) {\n            doStop();\n            return;\n        }\n\n        if (request !== null) {\n            _fragmentInfoTime = request.startTime + request.duration;\n            request = asFragmentInfoRequest(request);\n\n            if (streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) {\n                request = indexHandler.getNextSegmentRequest(getCurrentRepresentation());\n                onFragmentRequest(request);\n                return;\n            }\n\n            log('[FragmentInfoController][' + type + '] onFragmentRequest ' + request.url);\n\n            // Download the fragment info segment\n            sendRequest(request);\n        } else {\n            // No more fragment in current list\n            log('[FragmentInfoController][' + type + '] bufferFragmentInfo failed');\n        }\n    }\n\n    function bufferFragmentInfo() {\n        var segmentTime;\n\n        // Check if running state\n        if (!started) {\n            return;\n        }\n\n        log('[FragmentInfoController][' + type + '] Start buffering process...');\n\n        // Get next segment time\n        segmentTime = _fragmentInfoTime;\n\n        log('[FragmentInfoController][' + type + '] loadNextFragment for time: ' + segmentTime);\n\n        let representation = getCurrentRepresentation();\n        let request = indexHandler.getSegmentRequestForTime(representation, segmentTime);\n        onFragmentRequest(request);\n    }\n\n    function delayLoadNextFragmentInfo(delay) {\n        var delayMs = Math.round(Math.min((delay * 1000), 2000));\n\n        log('[FragmentInfoController][' + type + '] Check buffer delta = ' + delayMs + ' ms');\n\n        clearTimeout(bufferTimeout);\n        bufferTimeout = setTimeout(function () {\n            bufferTimeout = null;\n            bufferFragmentInfo();\n        }, delayMs);\n    }\n\n    function onFragmentInfoLoadedCompleted(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n\n        let request = e.fragmentInfo.request;\n        let deltaDate,\n            deltaTimeStamp;\n\n\n        if (!e.fragmentInfo.response) {\n            log('[FragmentInfoController][' + type + '] ERROR loading ', request.url);\n            return;\n        }\n\n        segmentDuration = request.duration;\n        log('[FragmentInfoController][' + type + '] FragmentInfo loaded ', request.url);\n        try {\n\n            // update segment list\n            let mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController\n            });\n            mssFragmentMoofProcessor.updateSegmentList(e.fragmentInfo, streamProcessor);\n\n            deltaDate = (new Date().getTime() - startFragmentInfoDate) / 1000;\n            deltaTimeStamp = (_fragmentInfoTime + segmentDuration) - startTimeStampValue;\n            deltaTime = (deltaTimeStamp - deltaDate) > 0 ? (deltaTimeStamp - deltaDate) : 0;\n            delayLoadNextFragmentInfo(deltaTime);\n        } catch (e) {\n            log('[FragmentInfoController][' + type + '] ERROR - Internal error while processing fragment info segment ');\n        }\n    }\n\n    function startPlayback() {\n        if (!started) {\n            return;\n        }\n\n        startFragmentInfoDate = new Date().getTime();\n        startTimeStampValue = _fragmentInfoTime;\n\n        log('[FragmentInfoController][' + type + '] startPlayback');\n\n        // Start buffering process\n        bufferFragmentInfo.call(this);\n    }\n\n    function doStart() {\n\n        let segments;\n\n        if (started === true) {\n            return;\n        }\n\n        eventBus.on(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        started = true;\n        log('[FragmentInfoController][' + type + '] START');\n\n        let representation = getCurrentRepresentation();\n        segments = representation.segments;\n\n        if (segments) {\n            _fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration;\n\n            startPlayback();\n        } else {\n            indexHandler.updateSegmentList(representation);\n            segments = representation.segments;\n            _fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration;\n\n            startPlayback();\n        }\n    }\n\n    function doStop() {\n        if (!started) {\n            return;\n        }\n        log('[FragmentInfoController][' + type + '] STOP');\n\n        eventBus.off(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        // Stop buffering process\n        clearTimeout(bufferTimeout);\n        started = false;\n\n        startFragmentInfoDate = null;\n        startTimeStampValue = null;\n    }\n\n    function reset() {\n        doStop();\n        streamProcessor.unregisterExternalController(instance);\n    }\n\n    instance = {\n        initialize: initialize,\n        start: doStart,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentInfoController.__dashjs_factory_name = 'MssFragmentInfoController';\nexport default FactoryMaker.getClassFactory(MssFragmentInfoController);\nexport default FactoryMaker.getClassFactory(MssFragmentInfoController);\n"]}