{"version":3,"sources":["../../../../src/mss/MssHandler.js"],"names":[],"mappings":"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","file":"MssHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../streaming/constants/Constants';\nimport Events from '../core/events/Events';\nimport MediaPlayerEvents from '../streaming/MediaPlayerEvents';\nimport EventBus from '../core/EventBus';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DataChunk from '../streaming/vo/DataChunk';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport {\n    HTTPRequest\n} from '../streaming/vo/metrics/HTTPRequest';\nimport MssFragmentInfoController from './MssFragmentInfoController';\nimport MssFragmentProcessor from './MssFragmentProcessor';\nimport MssParser from './parser/MssParser';\n\nfunction MssHandler(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    let mssFragmentProcessor = MssFragmentProcessor(context).create({\n        metricsModel: metricsModel,\n        playbackController: playbackController,\n        eventBus: eventBus\n    });\n    let mssParser;\n\n    let instance;\n\n    function setup() {}\n\n    function onInitializationRequested(e) {\n        let streamProcessor = e.sender.getStreamProcessor();\n        let request = new FragmentRequest();\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n        let period,\n            presentationStartTime;\n\n        period = representation.adaptation.period;\n\n        request.mediaType = representation.adaptation.type;\n        request.type = HTTPRequest.INIT_SEGMENT_TYPE;\n        request.range = representation.range;\n        presentationStartTime = period.start;\n        //request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic);\n        //request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamic);\n        request.quality = representation.index;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.representationId = representation.id;\n\n        const chunk = createDataChunk(request, streamProcessor.getStreamInfo().id);\n\n        // Generate initialization segment (moov)\n        chunk.bytes = mssFragmentProcessor.generateMoov(representation);\n\n        eventBus.trigger(Events.INIT_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: streamProcessor.getFragmentModel()\n        });\n\n        // Change the sender value to stop event to be propagated\n        e.sender = null;\n    }\n\n    function createDataChunk(request, streamId) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n\n        return chunk;\n    }\n\n    function onSegmentMediaLoaded(e) {\n        // Process moof to transcode it from MSS to DASH\n        let streamProcessor = e.sender.getStreamProcessor();\n        mssFragmentProcessor.processFragment(e, streamProcessor);\n    }\n\n    function onPlaybackSeekAsked() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n\n            //create fragment info controllers for each stream processors of active stream (only for audio, video or fragmentedText)\n            let streamController = playbackController.getStreamController();\n            if (streamController) {\n                let processors = streamController.getActiveStreamProcessors();\n                processors.forEach(function (processor) {\n                    if (processor.getType() === Constants.VIDEO ||\n                        processor.getType() === Constants.AUDIO ||\n                        processor.getType() === Constants.FRAGMENTED_TEXT) {\n\n                        let fragmentInfoController = MssFragmentInfoController(context).create({\n                            streamProcessor: processor,\n                            eventBus: eventBus,\n                            metricsModel: metricsModel,\n                            playbackController: playbackController\n                        });\n                        fragmentInfoController.initialize();\n                        fragmentInfoController.start();\n                    }\n                });\n            }\n        }\n    }\n\n    function registerEvents() {\n        eventBus.on(Events.INIT_REQUESTED, onInitializationRequested, instance, EventBus.EVENT_PRIORITY_HIGH);\n        eventBus.on(MediaPlayerEvents.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, EventBus.EVENT_PRIORITY_HIGH);\n        eventBus.on(MediaPlayerEvents.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, EventBus.EVENT_PRIORITY_HIGH);\n    }\n\n    function reset() {\n        eventBus.off(Events.INIT_REQUESTED, onInitializationRequested, this);\n        eventBus.off(MediaPlayerEvents.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\n        eventBus.off(MediaPlayerEvents.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\n    }\n\n    function createMssParser() {\n        mssParser = MssParser(context).create(config);\n        return mssParser;\n    }\n\n    instance = {\n        reset: reset,\n        createMssParser: createMssParser,\n        registerEvents: registerEvents\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssHandler.__dashjs_factory_name = 'MssHandler';\nexport default FactoryMaker.getClassFactory(MssHandler);\n"]}